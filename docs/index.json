[
    {
        "uri": "/post/_awk使用说明",
        "content": "---\r\ntitle: sed和awk\r\ndate: 2017-09-01 14:20:00\r\ntag: [\"linux\"]\r\ncategories: ['linux']\r\ndraft: true\r\n---\r\n\r\nawk和sed有很多共同点：\r\n使用相似的语法\r\n面向流的，从文本文件中一次读取一行并将处理结果输出到标准输出\r\n使用正则表达式来进行模式匹配\r\n允许在脚本文件中指定命令\r\n这是因为awk和sed都可以追溯到原始的UNIX行编辑器--ed。vim中使用的命令与ed非常相似\r\n\r\ned\r\n使用行编辑器，需要知道每次处理都是以行为单位的。重要的是知道当前处理的是文件的哪行。但是用ed打开文件时，控制台展示了文件的字符数，并且指向最后一行。\r\n`bash \r\n$ ed test\r\n23\r\n`\r\ned命令下没有提示符。如果输入错误的命令，ed会返回一个问号。可以使用p来显示当前行。\r\n默认情况下，一个命令只对当前行生效。可以通过输入行号来跳转到指定的行。可以通过1d命令来删除第一个行(同vim一样)\r\n还可以使用正则表达式来指定地址。删除所有包含有\"regular\"的行，可以通过执行命令g/regular/d\r\n替换命令在ed中如下：\r\n`\r\n[address]s/pattern/replacement/flag\r\n`\r\n其中[address]地址限制命令可以用数字，正则表达式来表示\r\n可以像下面使用替换命令\r\n`bash\r\n 用 complex 替换当前行的 b第一个/b regular \r\ns/regular/complex\r\n用complex 替换当前行所有的regular\r\ns/regular/complex/g\r\n 用 complex 替换 含有regular的所有行的regular\r\n第一个 /regular 是行地址选择\r\n/regular/s/regular/complex/g\r\n 替换所有的regular为complex\r\ng/regular/s/regular/complex/g\r\n当 正则表达式和要被替换的内容相同时，可以简写为\r\ng/regular/s//complex/g\r\n`\r\nUNIX下的grep命令可以用ed的 g/regular/p 来实现。\r\ned可以执行操作集合的文件，将要执行的命令放到一个文件中，通过指定它们为行编辑器的输入，就可以执行相应的命令\r\n`bash\r\ned test < edscript\r\n edscript 中的内容可以是\r\n/wz/\r\np\r\n`\r\n\r\nawk和sed中的正则表达式\r\n 元字符汇总\r\n元字符   | 含义\r\n:--------|:-----\r\n.        | 匹配换行符以外的任意单个字符，awk中能匹配换行符\r\n| 匹配任意一个在它前面的字符\r\n[...]    | 匹配方括号字符中的任意一个，如果第一个字符是^，则表示不匹配其中字符的任意一个\r\n^        | 如果作为正则表达式的第一个字符，则表示匹配行的开始\r\n&        | 如果作为正则表达式中的最后一个字符，表示匹配行的结束\r\n\\\\{n, m\\\\}| 匹配前面某个范围内单个字符出现的词数\r\n\\\\      | 转义字符\r\n\r\n扩展的元字符(egrep 和 awk)\r\n扩展字符 | 含义\r\n:--------| :-----------\r\n| 匹配前面的正则表达式一次或多次\r\n?        | 匹配前面的正则表达式零次或一次\r\n\\|       | 指定可以匹配前面或者后面的表达式\r\n()       | 分组\r\n{n,m}    | 匹配前面某个范围内单个字符出现的次数\r\n\r\n\r\n sed\r\n使用sed可以将类似vim编辑器手动的操作过程提取出来，编写成一个可以执行的脚本来实现\r\n\r\nsed的基本用法\r\n\r\n`bash\r\nsed [-nefr] [动作]\r\n    -n: 使用安静模式，一般情况下，所有来自STDIN的数据都会输出到屏幕上，加上-n，则只有经过sed特殊处理的那行才会被列出来\r\n    -e: 直接在命令行模式上进行sed的动作编辑\r\n    -f: 直接将sed的动作写在一个文件内，-f filename 可以执行filename中的sed动作\r\n    -r: sed的动作执行的是扩展型的正则表达式语法\r\n    -i: 直接修改读取的文件内容，而不是输出到屏幕上\r\n 动作说明\r\n[n1 [,n2]] function\r\n    n1, n2: 可选参数，表示进行动作的行数。如 10,20动作， 会在10到20行执行动作\r\nfunction可以是下面的参数\r\n    a: 新增，a后接字符串，字符串会添加到当前行的下一行\r\n    c: 替换，c后接字符串，这些字符串替换n1, n2之间的内容\r\n    d: 删除\r\n    i: 插入，i后接字符串，字符串会插入到当前行的前一行\r\n    p: 打印\r\n    s: 替换，后接正则表达式，执行行内的替换工作\r\n`\r\n示例如下：\r\n`bash\r\n 删除2到8行\r\ncat filename | sed '2,8d'\r\n在第2行后新增内容\r\ncat filename | sed '2a append string'\r\n 在第2行前新增内容\r\ncat filename | sed '2i append string'\r\n增加多行内容，使用 \\ 加 回车换行\r\ncat filename | sed '2a append string  \\\r\nsecond line'\r\n 输出文件的第2到8行，需要加上 -n，否则2到8行会重复输出\r\ncat filename | sed -n '2,8p'\r\n替换字符串\r\nsed 's/replaced string/new string/g'\r\n 将文件filename中的每行结尾的 . 替换成 !\r\nsed -i 's/\\.$/\\.!/g' filename\r\n`\r\n\r\nsed可以用来做：\r\n对一个或者多个文件自动执行编辑操作\r\n简化对多个文件执行相同的编辑操作\r\n编写转换程序\r\n\r\nsed工作的三个基本原理：\r\n脚本中的所有编辑命令都将依次应用于每个输入行\r\n命令应用于所有行，除非寻址限制\r\n原始的输入文件未改变\r\n\r\nsed脚本\r\nsed 将文件中每一行都顺序执行脚本内的命令。sed总是处理行的最新内容，因此生成的任何编辑工作都会改变后续命令应用的行。\r\n`\r\ns/pig/cow/g\r\ns/cow/horse/g\r\n`\r\n上面的命令会将 pig 替换成 cow，再将cow替换成horse，也就是将pig和cow都替换成horse。所以这么写是有问题的。\r\n\r\nsed可以用地址限制命令来告诉它哪一行需要相关的操作 /pig/s/cow/horse/g: 行中有pig，才将cow替换为horse\r\n\r\nsed命令最多可以指定两个地址，地址可以是描述模式、行号或者行寻址符号的正则表达式\r\n如果没有指定地址，那么命令将用于每行\r\n如果只有一个地址，命令应用于于地址匹配的任意行\r\n如果指定了由逗号分隔的两个地址，那么命令会应用于第一个地址和第二个地址之间的行\r\n如果地址后边有感叹号(!)，那么命令就应用于不匹配改地址的所有行\r\n\r\n`bash\r\n 删除第一行\r\n1d\r\n删除最后一行\r\n$d\r\n 删除空行\r\n/^$/d\r\n删除第一行到第一个空行中的所有行\r\n1,/^$/d\r\n`\r\n可以通过如下方式执行脚本，并将结果保存到临时文件中\r\n`bash\r\nsed -f sedscr $x  tmp.$x\r\ndone\r\n`\r\n\r\n 分组命令\r\nsed使用大括号见给一个地址嵌套在另一个地址中，或在相同的地址上应用多个命令。\r\n`bash\r\nb左大括号可以放在行末，但右大括号必须单独占一行。大括号之后没有空格/b\r\n .TS 和 .TE 标记了tb1输入\r\n删除tb1输入中的空行，并执行替换命令\r\n/^\\.TS/,/^\\.TE/ {\r\n    /^$/d\r\n    s/^\\.ps 10/.ps 8/\r\n    s/^\\.vs 12/.vs 10/\r\n}\r\n`\r\n\r\n\r\nsed只能用来执行脚本，没有像ed的交互功能。sed不会更改输入文件，如果想要改变输入文件，可以用流的重定向功能。\r\n\r\n\r\n awk - 可编程编辑器\r\n\r\nawk的基本使用\r\n\r\nawk命令格式如下：\r\n`bash\r\n 所有的动作都用 单引号 包裹\r\nawk '条件类型1 {动作1} 条件类型2 {动作2} ...' filename\r\n`\r\nawk 后可以接文件，也可以作为管道命令使用。其处理流程大概为：\r\n读入第一行，并将第一行的数据填入到$0, $1, $2等变量中\r\n依据条件类型限制，判断后续动作是否要执行\r\n做完所有的动作与条件类型\r\n重复1-3，直到所有的数据处理完\r\nawk中有如下内置变量\r\n变量名     | 含义\r\n:----------|:---------\r\nNF         | 每行拥有的字段总数\r\nNR         | 目前awk处理的是行号\r\nFS         | 目前的分隔符，默认是空格\r\n\r\n例子：\r\n`bash\r\ncat filename | awk 'BEGIN {FS=\":\"} $3 < 10 {print $1 \"\\t\" $3}'\r\n\r\ncat filename | awk '{if (NR==1) printf \"%10s %10s %10s\\n\", $1,$2,$3, \"Total\"}\r\n                    NR=2 {total = $2+$3 printf \"%10s %10s %10s\\n\", $1,$2,$3, total}'\r\n`\r\n\r\n\r\n\r\nawk 将文本编辑的功能扩展到计算，可以进行大多数的数据处理，像分析，提取和数据报告。\r\nawk 最独特的特性是它将输入的每行解析成可用于脚本处理的单个字。\r\n使用awk 可以做的事有：\r\n将文本文件看做是有record和field的数据库\r\n可以使用变量操作数据库\r\n可以使用数学和字符串运算符\r\n可以使用条件和循环等编程结构\r\n生成格式化的报表\r\n定义函数\r\n执行脚本\r\n处理UNIX命令的结果\r\n更优雅地处理命令行参数\r\n轻松地处理多输入流\r\n\r\n\r\n命令行语法是 commend [options] script filename",
        "tags": []
    },
    {
        "uri": "/post/_less",
        "content": "---\r\ntitle: less 语法\r\ndate: 2017-08-11\r\ndraft: true\r\n---\r\n参考网站： http://www.bootcss.com/p/lesscss/\r\n变量\r\n可以用如下方式定义变量，Less中的变量只能定义一次：\r\n`css\r\n@nice-blue: 5B83AD;\r\n\r\nheader { color: @nice-blue;}\r\n`\r\n输出如下：\r\n`css\r\nheader { color: #5B83AD; }\r\n`\r\n混合\r\n在Less中我们可以定义通用的属性集为一个class，之后可以在其他class中调用这些属性：\r\n`css\r\n.bordered {\r\n    border-top: dotted 1px black;\r\n    border-bottom: solid 2px black;\r\n}\r\n// 通过如下方式调用\r\nmenu a {\r\n    color: #111;\r\n    .boardered;\r\n}\r\n`\r\n输出如下：\r\n`css\r\nmenu a {\r\n  color: 111;\r\n  border-top: dotted 1px black;\r\n  border-bottom: solid 2px black;\r\n}\r\n`\r\n带参数的混合\r\n可以定义一个带参数的混合：\r\n`css\r\n.border-radius (@radius) {\r\n    border-radius: @radius;\r\n    -moz-border-radius: @radius;\r\n     -webkit-border-radius: @radius;\r\n}\r\n// 通过如下方式调用\r\nheader {\r\n  .border-radius(4px);\r\n}\r\n`\r\n还可以定义默认参数的混合\r\n`css\r\n.border-radius (@radius: 5px) {\r\n  border-radius: @radius;\r\n  -moz-border-radius: @radius;\r\n  -webkit-border-radius: @radius;\r\n}\r\n`\r\n\r\n&\r\n串联选择器和伪类选择器需要使用&\r\n`css\r\n.bordered {\r\n  &.float {\r\n    float: left; \r\n  }\r\n  .top {\r\n    margin: 5px; \r\n    &:hover    { text-decoration: none }\r\n  }\r\n}\r\n`",
        "tags": []
    },
    {
        "uri": "/post/_Photoshop常用快捷键",
        "content": "\r\n\r\nCtrl+r: 显示标尺\r\nShift+Tab:隐藏/显示浮动面板\r\n",
        "tags": []
    },
    {
        "uri": "/post/_spark",
        "content": "---\r\ntitle: spark\r\ndraft: true\r\n\r\n---\r\n\r\nSpark简介\r\nSpark是什么？\r\nSpark是一个快速且通用的集群计算平台\r\nSpark扩充了Mapreduce计算模型\r\nSpark是基于内存的计算\r\n批处理，迭代式计算，交互查询和流处理\r\nSpark提供了Python，java，Scala，SQL\r\n跟其他工具能很好整合\r\n\r\n Spark安装\r\n如果有Hadoop，需要下载与Hadoop相兼容的版本\r\n目录分布如下：\r\nbin包含用来和Spark交互的可执行文件\r\nconf包含配置文件\r\ncore, streaming, python,... 包含组件的源代码\r\nexamples包含了一些单机的例子\r\n调整日志级别\r\n修改conf/log4j.properties的INFO为WARN\r\n\r\n Spark 开发环境搭建\r\n安装Scala：版本需要匹配 Spark 1.6.2 - Scala 2.10 Spark 2.0.0 - Scala 2.11\r\n在 idea上安装 Scala插件，使用SBT打包\r\n\r\n`shell\r\nssh -keygen\r\ncd ~/.ssh\r\ntouch authorized_keys\r\ncat idrsa.pub  authorizedkeys\r\nchmod 600 authorizd_keys\r\n`\r\n开发Spark程序\r\n\r\n`scala\r\nobject WordCount {\r\n    def main (args: Array[String]) {\r\n        val conf = new SparkCOnf().setAppName(\"wordcount\")\r\n        val sc = new SparkContext(conf)\r\n        val input = sc.textFile(\"./helloSpark.txt\")\r\n        val lines = input.flatMap(line = line.split(\" \"))\r\n        val count = lines.map(word = (word, 1)).reduceByKey{ case (x,y) = x+y}\r\n\r\n        val output = count.saveAsTextFile(\"./helloSparkResult\")\r\n    }\r\n}\r\n`\r\n 打包\r\nproject struct - \r\nbuild - build artifact\r\n\r\n启动集群\r\n启动master ./sbin/start-master.sh\r\n启动worker ./bin/spark-class org.apache.spark.deploy.worker.Worker spark://localhost.localdomain:7077\r\n提交作业  ./bin/spark-submit --master localhost.localdomain:7077 --class WordCount ./imoocpro.jar ",
        "tags": []
    },
    {
        "uri": "/post/_ToLearn",
        "content": "---\r\ntitle: to learn\r\ndraft: true\r\n---\r\n\r\nRedis\r\nMySql\r\nawk\r\n\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/post/_webpackage",
        "content": "---\r\ntitle: webpackage\r\ndraft: true\r\n---\r\n\r\n文件中的缩进是2，修改idea的配置之后不生效，需要修改文件 .editorconfig\r\n\r\n创建webpack\r\n`\r\nvue init webpack  \r\n或者\r\nvue init gurghet/webpack\r\n\r\nnpm install  安装依赖\r\n`\r\n\r\n如果有 less 文件，需要安装\r\n`\r\nnpm install --save-dev less-loader less\r\n`\r\n指定webpack入口文件：\r\n`\r\nmodule.exports = {\r\n\tentry: {\r\n\t\tmain: './src/main.js',\r\n\t\ta: './src/a.js'\r\n\t}\r\n}\r\n\r\n`\r\n\r\n指定输出路径\r\n`\r\nmodule.exports = {\r\n\toutput: {\r\n\t\tpath: './dist',\r\n\t\tfilename: 'js/[name]-[chunkhash].js'\r\n\t}\r\n}\r\n`\r\n\r\n安装htmlWebpackPlugin插件：\r\n`javascript\r\nmodule.exports = {\r\n    // 环境的上下文\r\n\tcontext: ./ \r\n\tplugins: {\r\n\t\tnew htmlWebpackPlugin({\r\n\t\t    // 指定html模板\r\n\t\t\ttemplate: index.html,\r\n\t\t\t// 指定生成文件名\r\n\t\t\tfilename: 'index-[hash].html',\r\n\t\t\t// 指定script标签位置\r\n\t\t\tinject: 'head',\r\n\t\t\t// 设定参数\r\n\t\t\ttitle: 'webpack is awesome!'\r\n\t\t})\r\n\t}\r\n}\r\n`\r\n\r\n在html中使用htmlWebpackPlugin的参数\r\n`html\r\ntitle%= htmlWebpackPlugin.options.title %/title\r\n`",
        "tags": []
    },
    {
        "uri": "/post/_工具篇",
        "content": "---\r\ntitle: 工具篇\r\ndraft: true\r\n---\r\n\r\nsublime\r\n\r\n atom\r\n\r\nchrome\r\n对于前端开发人员来说，chrome有很多有用的插件（扩展程序）：\r\nPostman： 一款强大的模拟请求和假服务器的插件，可以方便的测试开发中的接口，也可以很方便地模拟后端服务器来为自己的前端提供数据\r\n二维码生成器： 可以根据当前页面的地址生成二维码，手机扫码即可访问当前页面\r\nUser-Agent Switcher： 可以快速切换当前页面的代理\r\nTampermonkey",
        "tags": []
    },
    {
        "uri": "/post/algorithms/_解决思路",
        "content": "---\r\ntitle: 解决思路\r\ndraft: true\r\n---\r\n\r\n\r\n排序\r\n位运算\r\n贪婪算法\r\n动态规划\r\n二分算法 \r\n",
        "tags": []
    },
    {
        "uri": "/post/algorithms/找出字符串最大回文",
        "content": "---\r\ntitle: 找出字符串最大回文\r\ndate: 2017-09-17 14:20:00\r\ntag: [\"算法\"]\r\ncategories: [\"算法\"]\r\n---\r\n\r\n题目\r\n给定一个字符串 s，找到s中最长的回文字符串。可以假设s的最长长度是1000。\r\nExample1 :\r\n   Input: \"babad\"\r\n   Output: \"bab\"\r\n   Note: \"aba\" 也是可以的答案\r\nExample2 :\r\n   Input: \"cbbd\"\r\n   Output: \"bb\"\r\n\r\n 解法\r\n假设前i个字符最大的回文串长度是currLength，那么i+1个字符最大的回文长度计算方法是：\r\n计算i+1-curLength-1到i+1是否为回文\r\n计算i+1-curLength-2到i+1是否为回文\r\n如果前两步中为是，那么将curLength赋值为其中的最大值\r\n\r\n原理\r\n对于 \"xxxbcbxxxxa\" (x 是随机的字符) 来说，我们现在处理最后一个字符 a。目前最长回文是bcb，长度是 3\r\n如果 xxxxa 是回文，那么我们可以计算得到一个新的最大回文长度 5\r\n如果 xxxa 是回文，那么我们可以计算得到一个新的最大回文长度 4\r\n无需计算更短的字符串，因为其回文的最大长度不会大于现在回文长度\r\n不用计算 xxxxxa，因为如果它是回文，那么去掉头和尾，xxxx仍然是回文，其长度是4，与假设矛盾。\r\n\r\n 代码\r\n`java\r\nprivate byte[] sByte;\r\n\r\npublic String alongestPalindrome(String s) {\r\n    int currLength = 0, start = 0, end = 0;\r\n    sByte = s.getBytes();\r\n    for(int i=0;i<s.length();i++){\r\n        if(isPalindrome(i-currLength-1,i)){\r\n            start = i-currLength-1;\r\n            currLength = currLength+2;\r\n        } else if(isPalindrome(i-currLength,i)){\r\n            start = i-currLength;\r\n            end = i+1;\r\n            currLength = currLength+1;\r\n        }\r\n    }\r\n    return s.substring(start, end);\r\n}\r\n\r\npublic boolean isPalindrome( int begin, int end){\r\n    if(begin<0) return false;\r\n    while(begin<end){\r\n        if(sByte[begin++]!=sByte[end--]) return false;\r\n    }\r\n    return true;\r\n}\r\n`",
        "tags": []
    },
    {
        "uri": "/post/algorithms/缓存算法",
        "content": "---\r\ntitle: 缓存算法\r\ndate: 2017-06-30 11:41:43\r\ntags: [\"算法\"]\r\ncategories: [\"算法\"]\r\ntop: 1\r\n---\r\n\r\n\r\n众所周知，内存的读取速度比硬盘类存储设备快的多。为了降低硬件设备的负载，提高响应速度，增加吞吐率，我们可以将最近使用过，并且将来还要使用的数据缓存到内存中。因为内存的容量是有限的，所以根据怎么选择将来还要使用的数据，产生了各种缓存算法。\r\n\r\n一些术语\r\n命中：当客户发起一个请求，如果在缓存中，就成为缓存命中\r\nCache Miss：如果还有缓存空间，没有命中的就会被存储到缓存中；如果缓存满了，而又没命中缓存，那么久会按照缓存算法，用新对象替换旧对象。\r\n存储成本：将数据放到缓存所需要的时间和空间\r\n失效：当存在缓存中的数据需要更新时，缓存中的这个数据就失效了\r\n\r\n\r\n Least Frequently Used (LFU):\r\nLFU算法认为：如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小。\r\n命中率\r\nLFU的命中率还要看数据的访问顺序。一旦访问内容发生较大的变化，LFU需要更长的时间来适应。因为他是根据频率来淘汰数据的，新的数据访问频率低，很容易被淘汰掉。这样会导致之前经常而现在不被访问的数据，一直赖在缓存中。所以，一般相比LFU，会采用LRU算法\r\n\r\n!-- more --\r\n Least Recently Used (LRU):\r\nLRU算法认为：如果数据最近被访问过，那么将来被访问的几率也更高。 LRU算法将最近最少使用的数据淘汰。最近使用的数据会被放到缓存的顶部，当缓存达到容量上限时，将底部的数据移除。\r\n命中率\r\n如果存在热点数据，LRU的命中率比较高。但是针对偶然性、周期性或者随机性的批量操作会导致LRU的命中率急剧下降，缓存污染情况也比较严重。\r\n 复杂度\r\n实现简单，java中可以通过扩展LinkedHashMap来实现。\r\n`\r\nimport java.util.LinkedHashMap;\r\nimport java.util.Map;\r\n//扩展LinkedHashMap，实现LRU\r\npublic class LRUCacheK,V extends LinkedHashMapK,V{\r\n    //定义缓存的容量\r\n    private int capacity;\r\n    private static final long serialVersionUID = 1L;\r\n    //带参数的构造器\r\n    public LRUCache(int capacity){\r\n        //调用LinkedHashMap的构造器，传入以下参数\r\n        super(capacity);\r\n        this.capacity=capacity;\r\n    }\r\n    //实现LRU的关键方法，如果map里面的元素个数大于了缓存最大容量，则删除链表的顶端元素\r\n    @Override\r\n    public boolean removeEldestEntry(Map.EntryK, V eldest){\r\n        System.out.println(eldest.getKey() + \"=\" + eldest.getValue());\r\n        return size()  capacity;\r\n    }\r\n}\r\n`\r\n\r\nLeast Recently Used 2 (LRU2)：\r\nLRU2算法认为：\r\n将被两次访问过的对象放入缓存池，当缓存池满了，会移除两次最少使用的缓存对象。因为要跟踪对象两次，访问负载就会随着缓存池的增加而增加，所以不能用于大容量的缓存池。\r\n Two Queues (2Q)：\r\n将被访问的数据放到LRU的缓存中，如果这个对象再一次被访问，就将它转移到更大的LRU缓存中。移除对象是为了保持第一个缓存池是第二个缓存池的1/3，当缓存访问负载是固定的时候，把LRU换成LRU2，比增加缓存容量更好，是adoptive to access模式\r\nAdaptive Replacement Cache (ARC):\r\n介于LRU和LFU之间。由两个LRU组成，第一个L1，包含的条目是最近值被使用过一次的，而L2，包含的是最近被使用过两次的数据。L1放的是新对象，L2放的是常用对象。\r\n Most Recently Used (MRU):\r\n移除最近最多被使用的对象。每当一次缓存记录的使用，就会被放到栈顶，当栈满了，将栈顶的对象移除。\r\nFirst In First Out (FIFO):\r\n先进先出，低负载的算法，通过队列跟踪所有的缓存对象，最近最常用的对象放在后边，当缓存容量满的时，会移除前边缓存的更早的对象。很快，但是不适用\r\n",
        "tags": []
    },
    {
        "uri": "/post/atom 插件",
        "content": "---\r\ntitle: atom 插件\r\ndraft: true\r\n---\r\n\r\nmarkdown插件：markdown-preview-enhanced\r\n",
        "tags": []
    },
    {
        "uri": "/post/DesignPatterns/创建型模式",
        "content": "---\r\ntitle: 创建型模式\r\n---\r\n\r\n创建型模式包括：Abstract Factory、Builder、Factory Method、Prototype、Singleton\r\n创建型模式概述\r\n\r\n将通过一个为电脑创建迷宫的游戏来说明各个模式的实现，以及它们的异同。\r\n枚举类Direction指定了房间的东西南北：\r\n`java\r\npublic enum Direction {\r\n    North(0), South(1), East(2), West(3);\r\n    int pos;\r\n    Direction(int pos) {\r\n        this.pos = pos;\r\n    }\r\n    public int getPos () {\r\n        return pos;\r\n    }\r\n}\r\n`\r\n\r\nMapSite 是所有迷宫组件的公共抽象类，定义了迷宫中构件之间的主要关系。因为是说明类，所以仅定义了一个操作Enter，决定了你在进入什么:\r\n`java\r\npublic interface MapSite {\r\n    void enter();\r\n}\r\n`\r\n\r\nRoom、 Door、Wall 是 MapSite 的子类：\r\n`java\r\npublic class Room implements MapSite {\r\n    private MapSite side[] = new MapSite[4];\r\n    private int roomNo;\r\n    public Room(int roomNo) {\r\n        this.roomNo = roomNo;\r\n    }\r\n    MapSite getSide(Direction d) { return side[d.getPos()]; }\r\n    void setSide (Direction d, MapSite m) {\r\n        side[d.getPos()] = m;\r\n    }\r\n    @Override\r\n    public void enter() {\r\n    }\r\n}\r\npublic class Door implements MapSite{\r\n    private Room room1;\r\n    private Room room2;\r\n    private boolean isOpen;\r\n    public Door(Room room1, Room room2) {\r\n        this.room1 = room1;\r\n        this.room2 = room2;\r\n    }\r\n    public Room otherSideFrom (Room oRoom) {\r\n        return room1;\r\n    }\r\n    @Override\r\n    public void enter() {\r\n\r\n    }\r\n}\r\npublic class Wall implements MapSite {\r\n    @Override\r\n    public void enter() {\r\n    }\r\n}\r\n`\r\n\r\nMaze 定义了一个房间集合：\r\n`java\r\npublic class Maze {\r\n    private ListRoom rooms = new ArrayListRoom();\r\n    public void addRoom (Room room) {\r\n        rooms.add(room);\r\n    }\r\n    Room getRoom (int i) {\r\n        return rooms.get(i);\r\n    }\r\n}\r\n`\r\n\r\nMazeGame 用来创建一个迷宫游戏，一个简单的方式是使用一系列操作将构件增加到迷宫中，然后连接它们：\r\n`java\r\npublic class MazeGame {\r\n    Maze createMaze () {\r\n        Maze maze = new Maze();\r\n        Room r1 = new Room(1);\r\n        Room r2 = new Room(2);\r\n        Door theDoor = new Door(r1, r2);\r\n        maze.addRoom(r1);\r\n        maze.addRoom(r2);\r\n        r1.setSide(Direction.North, new Wall());\r\n        r1.setSide(Direction.South, theDoor);\r\n        ...\r\n        return maze;\r\n    }\r\n}\r\n`\r\n\r\n这个函数仅用来创建一个有两个房间的迷宫，就相当复杂。虽然有办法让它变得简单——比如在 Room 的构造器中，可以提前用墙壁来初始化房间的每面--但这仅仅将代码移动到了其他地方。这个函数的真正问题在于它不灵活。它对迷宫的布局进行了硬编码，改变布局意味着改变这个函数，或者重定义它--这意味着重新实现这个过程，或是对它的部分进行改变--这容易产生错误并且不利于重用\r\n创建型模式显示如何使设计更灵活，但未必会更小。\r\n假设在一个包含魔法的迷宫中重用一个已有的迷宫布局，这样有魔法的迷宫游戏有了新的构件，像 DoorNeedSpell 用咒语才能打开的门； EnchantedRoom 有不寻常东西的房间等，如何才能更容易地改变 createMaze 才能创建魔法迷宫？\r\n这种情况下，改变最大的障碍就是对被实例化的类进行硬编码。创建型模式提供了多种不同方法从实例化它们的代码中去除这些具体类的显示引用：\r\n如果 createMaze 调用的是接口而不是构造器来创建房间等，那么可以创建一个 MazeGame 的子类并重新定义 createMaze ，从而改变被实例化的类，这是 Factory Method\r\n如果传递一个对象给 createMaze 做参数来创建房间等，那么通过传递不同的参数来改变房间等，这是 Abstract Factory\r\n如果传递一个对象给 createMaze，这个对象可以在它所创建的迷宫中使用增加房间、墙壁和门的操作，来创建一个新迷宫，那么可以使用继承来改变迷宫的一些部分或该迷宫被创建的方式，这是 Builder\r\n如果 createMaze 由多种原型房间、墙壁和门对象参数化，它拷贝并将这些对象增加到迷宫中，那么用不同的对象替换这些原型对象以改变迷宫的构成，这是 Prototype\r\n\r\n 创建产品族的抽象工厂 -- Abstract Factory\r\n\r\n目的\r\n提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\r\n\r\n 适用性\r\n以下情况适用于 抽象工厂：\r\n一个系统要对立于它的产品的创建、组合和表示\r\n一个系统要由多个产品系列中的一个来配置时\r\n当你要强调一系列相关的产品对象的设计以便进行联合使用时\r\n当你提供一个产品类库，而只想显示它们的接口而不是实现时\r\n\r\n结构\r\n此模式的结构图如下：\r\n{% raw %}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"43 11.364 987.909 431.303\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"f\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"g\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"h\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"i\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"j\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"k\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"l\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"m\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//marker/defspath fill=\"none\" d=\"M43 11.364h987.91v431.303H43V11.364z\"/path fill=\"#9cf\" stroke=\"#323232\" stroke-width=\"2\" d=\"M156 72q0-4 4-4h215q4 0 4 4v90q0 4-4 4H160q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M156 98h223\"/path fill=\"none\" d=\"M156 68h223v98H156z\"/text x=\"100.5\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(166 73.625)\"AbstractFactory/textg fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"100.5\" y=\"15.375\" transform=\"translate(166 113.25)\"createProductA()/texttext x=\"100.5\" y=\"34.125\" transform=\"translate(166 113.25)\"createProductB()/text/gpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M63 256q0-4 4-4h169q4 0 4 4v82q0 4-4 4H67q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M63 282h177\"/path fill=\"none\" d=\"M63 252h177v90H63z\"/text x=\"77.5\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(73 257.625)\"ConcreteFactory1/textg fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"77.5\" y=\"15.375\" transform=\"translate(73 293.25)\"createProductA()/texttext x=\"77.5\" y=\"34.125\" transform=\"translate(73 293.25)\"createProductB()/text/gpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M296 256q0-4 4-4h169q4 0 4 4v82q0 4-4 4H300q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M296 282h177\"/path fill=\"none\" d=\"M296 252h177v90H296z\"/text x=\"77.5\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(306 257.625)\"ConcreteFactory2/textg fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"77.5\" y=\"15.375\" transform=\"translate(306 293.25)\"createProductA()/texttext x=\"77.5\" y=\"34.125\" transform=\"translate(306 293.25)\"createProductB()/text/gpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M151.5 252v-43h116v-27.764\" marker-end=\"url(#a)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M384.5 252v-43h-117v-27.764\" marker-end=\"url(#b)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M473 297h50V186.5h26.764\" stroke-dasharray=\"10 4\" marker-end=\"url(#c)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M473 297h49.958v82.333h34.723\" stroke-dasharray=\"10 4\" marker-end=\"url(#d)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M151.5 342v79.825h803.076v-41.51h-8.097\" stroke-dasharray=\"10 4\" marker-end=\"url(#e)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M151.5 342v80.667h803.076V184.983h-14.764\" stroke-dasharray=\"10 4\" marker-end=\"url(#f)\"/path fill=\"#9cf\" stroke=\"#323232\" stroke-width=\"2\" d=\"M658.364 73q0-4 4-4h169q4 0 4 4v36q0 4-4 4h-169q-4 0-4-4z\"/text x=\"77.5\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(668.364 81.625)\"AbstractProductA/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M566.25 168q0-4 4-4h152.5q4 0 4 4v32q0 4-4 4h-152.5q-4 0-4-4z\"/text x=\"69.25\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(576.25 174.625)\"ProductA1/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M764.076 168.983q0-4 4-4h152.5q4 0 4 4v32q0 4-4 4h-152.5q-4 0-4-4z\"/text x=\"69.25\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(774.076 175.608)\"ProductA2/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M646.5 164v-25.065h100.364v-10.7\" marker-end=\"url(#g)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M844.326 164.983V138.99h-97.462v-10.754\" marker-end=\"url(#h)\"/path fill=\"#9cf\" stroke=\"#323232\" stroke-width=\"2\" d=\"M665.03 268.333q0-4 4-4h169q4 0 4 4v36q0 4-4 4h-169q-4 0-4-4z\"/text x=\"77.5\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(675.03 276.958)\"AbstractProductB/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M572.917 363.333q0-4 4-4h152.5q4 0 4 4v32q0 4-4 4h-152.5q-4 0-4-4z\"/text x=\"69.25\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(582.917 369.958)\"ProductB1/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M770.743 364.316q0-4 4-4h152.5q4 0 4 4v32q0 4-4 4h-152.5q-4 0-4-4z\"/text x=\"69.25\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(780.743 370.94)\"ProductB2/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M653.167 359.333v-25.065H753.53v-10.7\" marker-end=\"url(#i)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M850.993 360.316v-25.99H753.53V323.57\" marker-end=\"url(#j)\"/path fill=\"#9ff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M927.273 31.364h83.636V60.91h-83.64z\"/text x=\"30.818\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(937.273 36.76)\"client/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M927.273 46.136H267.5v6.628\" marker-end=\"url(#k)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M969.09 60.91V91H850.6\" marker-end=\"url(#l)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M969.09 60.91v225.423H857.267\" marker-end=\"url(#m)\"//svg\r\n{% endraw %}\r\n\r\n参与者\r\nAbstractFactory: 声明一个创建抽象产品对象的操作接口\r\nConcreteFactory: 实现创建具体产品对象的操作\r\nAbstractProduct: 为一类产品对象声明一个接口\r\nConcreteProduct: 定义一个将被相应的具体工厂创建的产品对象，实现AbstractProduct 接口\r\nClient: 仅使用 AbstractFactory 和 AbstractProduct 接口\r\n\r\n通常在运行时刻创建一个 ConcreteFactory 类的实例。这一具体的工厂创建具有特定实现的产品对象，为创建不同的产品对象，客户应使用不同的具体工厂。\r\nAbstractFactory 将产品对象的创建延迟到它的 ConcreteFactory 子类\r\n\r\n 优缺点\r\n抽象工厂有如下的优缺点：\r\n它分离了具体的类。抽象工厂模式帮助你控制一个应用创建的对象的类，封装了产品对象的责任和过程，将客户与具体类相分离，客户通过它们的抽象接口操纵实例。\r\n它使得易于交换产品系列。一个具体工厂类在一个应用中只出现一次——其初始化的时候。这使得改变一个应用的具体工厂变得很容易，只需改变具体的工厂即可使用不同的产品配置。\r\n它有利于产品的一致性。当一个系列中的产品对象被设计成一起工作时，一个应用只能使用同一系列的对象。\r\n难以支持新种类的产品。难以扩展抽象工厂以生产新种类的产品，这是因为 AbstractFactory 接口确定了可以被创建的产品集合。支持新种类的产品就需要扩展该工厂接口，这将涉及到 AbstractFactory 类及其所有子类的改变。\r\n\r\n实现(模式组合)\r\n下面是 AbstractFactory 模式中一些有用的意见和建议:\r\n工厂使用单例模式。一个应用中一般每个产品系列只需要一个 ConcreteFactory。\r\n创建产品。AbstractFactory 仅声明一个创建产品的接口，真正创建产品是由ConcreteFactory 实现的，最通常的一个方法是为每一个产品定义一个工厂方法。具体的工厂将为每个产品重定义该工厂方法以指定产品。\r\n定义可扩展的工厂。抽象工厂难以支持新增种类的产品，一个比较灵活但不太安全的设计是给创建对象的操作增加一个参数，该参数指定将被创建对象的种类，但是需要客户向下类型转换。当然也可以使用泛型方法。\r\n\r\n你可以实现一个魔法迷宫的工厂类：\r\n`java\r\npublic class EnchantedMazeFactory implements MazeFactory {\r\n    @Override\r\n    public Maze makeMaze() {\r\n        return new EnchantedMaze();\r\n    }\r\n\r\n    @Override\r\n    public Wall makeWall() {\r\n        return new Wall();\r\n    }\r\n\r\n    @Override\r\n    public Room makeRoom(int roomNo) {\r\n        return new EnchantedRoom(roomNo);\r\n    }\r\n\r\n    @Override\r\n    public Door makeDoor(Room r1, Room r2) {\r\n        return new DoorNeedSpell(r1, r2);\r\n    }\r\n}\r\n`\r\n\r\n使用如下方式创建一个游戏\r\n`java\r\nMazeGame game;\r\nEnchantedMazeFactory factory;\r\ngame.createMaze(factory);\r\n`\r\n\r\n\r\n 相关模式\r\nAbstractFactory 类通常用工厂方法 (FactoryMethod) 实现，也可以用 Prototype 实现。\r\n一个具体的工厂通常是一个单件。\r\n",
        "tags": []
    },
    {
        "uri": "/post/DesignPatterns/创建者模式之生成器",
        "content": "---\r\ntitle: 创建者模式之生成器\r\ndate: 2017-11-04 12:00:00\r\ntags: [\"设计模式\"]\r\ncategories: [\"设计模式\"]\r\n---\r\n\r\n构建复杂对象的生成器 -- Builder\r\n生成器模式适合于创建一个对象很复杂的时候。\r\n\r\n 意图\r\n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\r\n\r\n适用性\r\n以下情况适用Builder模式\r\n当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时\r\n当构造过程必须允许被构造的对象有不同的表示时\r\n\r\n 结构\r\n\r\n{% raw %}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"79.286 48 637.381 274\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.61\" markerHeight=\"10.888\" viewBox=\"-2.305 -1.591 20.61 10.888\" refX=\"16\" refY=\"3.853\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M0 3.853L8 0l8 3.853-8 3.852z\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//marker/defspath fill=\"none\" d=\"M79.286 48h637.38v274H79.286V48z\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M140 72q0-4 4-4h134q4 0 4 4v60q0 4-4 4H144q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M140 98h142\"/path fill=\"none\" d=\"M140 68h142v68H140z\"/text x=\"60\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(150 73.625)\"Director/texttext x=\"60\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(150 107.625)\"construct()/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M99.286 197.143h215l16 16v54h-231v-70z\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M314.286 197.143v16h16\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M99.286 197.143h215l16 16v54h-231v-70z\"/g fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\"text y=\"15.375\" transform=\"translate(109.286 204.018)\"for all objects in structure {/texttext y=\"34.125\" transform=\"translate(109.286 204.018)\"buider.buildPart();/texttext y=\"52.875\" transform=\"translate(109.286 204.018)\"}/text/gpath fill=\"#9cf\" stroke=\"#323232\" stroke-width=\"2\" d=\"M387.833 76q0-4 4-4h134q4 0 4 4v52q0 4-4 4h-134q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M387.833 102h142\"/path fill=\"none\" d=\"M387.833 72h142v60h-142z\"/text x=\"60\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(397.833 77.625)\"Builder/texttext x=\"60\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(397.833 107.625)\"buildPart()/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M378.833 209q0-4 4-4h152q4 0 4 4v89q0 4-4 4h-152q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M378.833 235h160\"/path fill=\"none\" d=\"M378.833 205h160v97h-160z\"/text x=\"69\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(388.833 210.625)\"ConcreteBuilder/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"69\" y=\"15.375\" transform=\"translate(388.833 249.75)\"buildPart()/texttext x=\"69\" y=\"34.125\" transform=\"translate(388.833 249.75)\"getResult()/text/gpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M598.722 209.873q0-4 4-4h89.945q4 0 4 4v22.593q0 4-4 4h-89.945q-4 0-4-4z\"/text x=\"37.972\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(608.722 211.795)\"Product/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M257.143 144.714v51.717\" stroke-dasharray=\"2 3\" marker-start=\"url(#a)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M300.305 102h72.292\" marker-start=\"url(#b)\" marker-end=\"url(#c)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M458.833 205v-57.764\" marker-end=\"url(#d)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M538.333 220.833h30.195v.337h14.958\" stroke-dasharray=\"2 3\" marker-end=\"url(#e)\"//svg\r\n{% endraw %}\r\n\r\n参与者\r\n上图中的各个类的角色：\r\nBuilder: 为创建一个 Product 对象的各个部件指定抽象接口\r\nConcreteBuilder: 实现 Builder 的接口以构造和装配该产品的各个部件；定义并明确它所创建的表示；提供一个检索产品的接口\r\nDirector: 构造一个使用Builder接口的对象\r\nProduct: 表示被构造的复杂对象，ConcreteBuilder 创建该产品的内部表示并定义它的装配过程；包含了定义组成部件的类，包括将这些部件组装成最终产品的接口。\r\n\r\n 目的\r\n它使你可以改变一个产品的内部表示。Builder对象提供给导向器一个构造产品的抽象接口。该接口使得生成器可以隐藏这个产品的表示和内部结构，所以改变该产品的内部表示所要做的只是定义一个新的生成器\r\n它将构造代码和表示代码分开。Builder模式通过封装一个复杂对象的创建和表示方式提高了对象的模块性。客户不需要知道定义产品内部结构的类的所有信息；这些类是不出现在Builder接口中的。每个ConcreteBuilder包含了创建和装配一个特定产品的所有代码\r\n它使你对构造过程进行更精细的控制。Builder模式同一下就生成产品的创建型模式不同，它是在 Director 的控制下一步步构造产品的。因此Builder接口相比其他创建型模式更能反映产品的构造过程，也可以让我们更精细地控制构造过程。\r\n\r\n实现\r\n装配和构造接口。 生成器逐步构造它们的产品，因此Builder类接口必须足够普遍，以便为各种类型的具体生成器构造产品。\r\n产品没有抽象类。 具体生成器生产的产品，它们表示相差如此之大以至于给不同的产品以公共父类没有太大的意义。\r\nBuilder中缺省的方法为空。 这样客户只需要重定义所感兴趣的操作\r\n\r\n我们定义一个 Maze 的 Builder(缺省方法为空):\r\n`java\r\npublic class MazeBuilder {\r\n    public void buildMaze(){}\r\n    public void buildRoom(int room){}\r\n    public void buildDoor(int roomFrom, int roomTo){}\r\n    public Maze getMaze(){return null;}\r\n}\r\n`\r\n\r\n然后 createMaze 就变成了：\r\n`java\r\npublic Maze createMaze(MazeBuilder builder) {\r\n    builder.buildMaze();\r\n    builder.buildRoom(1);\r\n    builder.buildRoom(2);\r\n    builder.buildDoor(1,2);\r\n\r\n    return builder.getMaze();\r\n}\r\n`\r\n\r\n同其他创建型模式相同，Builder模式封装了对象是如何被创建的，我们可以重用 MazeBuilder 来创建不同种类的迷宫。\r\n一个简单的迷宫实现如下：\r\n`java\r\npublic class StandardMazeBuilder extends MazeBuilder{\r\n\r\n    public StandardMazeBuilder(){}\r\n    @Override\r\n    public void buildMaze(){\r\n        currentMaze = new Maze();\r\n    }\r\n    @Override\r\n    public void buildRoom(int n){\r\n        if(currentMaze.getRoom(n) == null) {\r\n            Room room = new Room(n);\r\n            currentMaze.addRoom(room);\r\n\r\n            room.setSide(Direction.North, new Wall());\r\n            room.setSide(Direction.South, new Wall());\r\n            room.setSide(Direction.East, new Wall());\r\n            room.setSide(Direction.West, new Wall());\r\n        }\r\n    }\r\n    @Override\r\n    public void buildDoor(int roomFrom, int roomTo){\r\n        Room room1 = currentMaze.getRoom(roomFrom);\r\n        Room room2 = currentMaze.getRoom(roomTo);\r\n        Door d = new Door(room1, room2);\r\n\r\n        room1.setSide(commonWall(room1, room2), d);\r\n        room2.setSide(commonWall(room2, room1), d);\r\n    }\r\n    @Override\r\n    public Maze getMaze(){return currentMaze;}\r\n    private Direction commonWall(Room r1, Room r2){\r\n        return Direction.South;\r\n    }\r\n\r\n\r\n    private Direction direction;\r\n    private Maze currentMaze;\r\n}\r\n`\r\n\r\n我们可以用如下方式创建一个简单的迷宫：\r\n`java\r\nMaze maze;\r\nMazeGame game;\r\nStandardMazeBuilder builder;\r\ngame.createMaze(builder);\r\nmaze = builder.getMaze();\r\n`\r\n\r\n\r\n 相关模式\r\nAbstractFactory 同 Builder 相似，因为它也可以创建复杂对象。主要区别是 Builder 模式着重于一步步构造一个复杂对象；而AbstractFactory着重于多个系列的产品对象（无论简单还是复杂）\r\nComposite 通常是 Builder 生成的\r\n\r\n创建固定产品的工厂方法 -- Factory Method\r\n\r\n 意图\r\n定义一个用于创建对象的接口，让子类决定实例化哪一个类，Factory Method 使一个类的实例化延迟到其子类。\r\n\r\n适用性\r\n下列情况可以使用 Factory Method：\r\n当一个类不知道它所必须创建的对象的类的时候\r\n当一个类希望由它的子类来指定它所创建的对象的时候\r\n当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类时代理者这一信息局部化的时候\r\n\r\n 结构\r\n{% raw %}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"134.856 51.673 715.977 246.073\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//marker/defspath fill=\"none\" d=\"M134.856 51.673h715.977v246.073H134.856V51.673z\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M585.952 107.143H811.5l16 16V157.5H585.952v-50.357z\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M811.5 107.143v16h16\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M585.952 107.143H811.5l16 16V157.5H585.952v-50.357z\"/text y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(595.952 122.946)\"product = FactoryMethod()/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M387.833 76q0-4 4-4H531q4 0 4 4v66.667q0 4-4 4H391.833q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M387.833 102H535\"/path fill=\"none\" d=\"M387.833 72H535v74.667H387.833z\"/text x=\"62.583\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(397.833 77.625)\"Creator/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"62.583\" y=\"15.375\" transform=\"translate(397.833 105.583)\"FactoryMethod()/texttext x=\"62.583\" y=\"34.125\" transform=\"translate(397.833 105.583)\"AnOperation()/text/gpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M383.313 206.222q0-4 4-4H535.48q4 0 4 4v52q0 4-4 4H387.312q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M383.313 232.222H539.48\"/path fill=\"none\" d=\"M383.313 202.222H539.48v60H383.312z\"/text x=\"67.083\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(393.313 207.847)\"ConcreteCreator/texttext x=\"67.083\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(393.313 237.847)\"FactoryMethod()/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M189.556 75.673q0-4 4-4H283.5q4 0 4 4v22.593q0 4-4 4h-89.944q-4 0-4-4z\"/text x=\"37.972\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(199.556 77.595)\"Product/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M461.396 202.222v-27.778h.02v-12.54\" marker-end=\"url(#a)\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M154.856 206.566q0-4 4-4h159.306q4 0 4 4v29.454q0 4-4 4H158.856q-4 0-4-4z\"/text x=\"72.653\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(164.856 211.918)\"ConcreteProduct/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M238.51 202.566v-50.15h.018v-34.914\" marker-end=\"url(#b)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M534.167 137.5h50\" stroke-dasharray=\"2 3\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M589.286 227.39h225.547l16 16v34.356H589.286V227.39z\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M814.833 227.39v16h16\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M589.286 227.39h225.547l16 16v34.356H589.286V227.39z\"/text y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(599.286 243.193)\"return new ConcreteProduct/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M539.27 254.167h46.562\" stroke-dasharray=\"2 3\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M383.333 221.667h-30.586v-.374h-15.35\" stroke-dasharray=\"2 3\" marker-end=\"url(#c)\"//svg\r\n{% endraw %}\r\n\r\n参与者\r\nProduct: 定义工厂方法所创建的对象的接口\r\nConcreteProduct: 实现 Product 接口\r\nCreator: 声明工厂方法，该方法返回一个 Product 类型的对象。Creator 也可以定义一个工厂方法的缺省实现，返回一个缺省的ConcreteProduct 对象；可以调用工厂方法创建一个 Product 对象\r\nConcreteCreator: 重定义工厂方法以返回一个 ConcreteProduct 实例\r\n\r\n 效果\r\n工厂方法不再将与特定应用有关的类绑定到代码中，代码仅仅处理 Product 接口，因此它可以与用户定义的任何 ConcreteProduct 一起使用。\r\n其潜在缺点在于客户可能仅仅为创建一个特定的 ConcreteProduct 对象，就不得不创建 Creator 子类。 当 Creator 子类不是必须的时候，客户必须自己处理类原话的其他方面。\r\n为子类提供挂钩。 用工厂方法在一个类的内部创建对象通常比直接创建对象更灵活\r\n连接平行的类层次。 工厂方法并不往往只是被 Creator 调用，客户可以找到一些有用的工厂方法，尤其在平行类层次的情况下。（当一个类将它的一些职责委托给一个独立的类的时候，就产生了平行类层次。）\r\n\r\n实现\r\n有两种不同的情况。 Creator 类是一个抽象类并且不提供它所声明的工厂方法的实现，避免了不得不实例化不可预见类的问题；Creator是一个具体类，提供一个缺省的实现，更具有灵活性。\r\n参数化工厂方法。 工厂方法可以采用一个标识要被创建的对象种类的参数。通过解析该参数，可以确定要实力化的是哪个产品。\r\n\r\n 代码示例\r\n创建一个 MazeGame 的缺省实现类，定义了缺省的方法\r\n`java\r\npublic class MazeGame {\r\n    public Maze makeMaze() {\r\n        return new Maze();\r\n    }\r\n\r\n    public Room makeRoom (int n) {\r\n        return new Room(n);\r\n    }\r\n\r\n    public Wall makeWall () {\r\n        return new Wall();\r\n    }\r\n\r\n    public Door makeDoor (Room r1, Room r2) {\r\n        return new Door(r1, r2);\r\n    }\r\n\r\n    /**\r\n     用工厂方法重新 createMaze\r\n     */\r\n    public Maze createMaze () {\r\n        Maze maze = makeMaze();\r\n        Room r1 = makeRoom(1);\r\n        Room r2 = makeRoom(2);\r\n        Door theDoor = makeDoor(r1, r2);\r\n        maze.addRoom(r1);\r\n        maze.addRoom(r2);\r\n        r1.setSide(Direction.North, makeWall());\r\n        r1.setSide(Direction.East, theDoor);\r\n        r1.setSide(Direction.South, makeWall());\r\n        r1.setSide(Direction.West, makeWall());\r\n\r\n        return maze;\r\n    }\r\n}\r\n`\r\n继承 MazeGame，子类覆盖某些方法，以创建自己的内容需要。\r\n`java\r\npublic class EnchantedMazeGame extends MazeGame {\r\n    @Override\r\n    public Room makeRoom (int n) {\r\n        return new EnchantedRoom(n);\r\n    }\r\n\r\n    @Override\r\n    public Door makeDoor (Room r1, Room r2) {\r\n        return new DoorNeedSpell(r1, r2);\r\n    }\r\n}\r\n`\r\n\r\n相关模式\r\n工厂方法通常在 Template Method 中被调用\r\n抽象工厂经常用工厂方法来实现。\r\n\r\n\r\n 原型模式 -- Prototype\r\n\r\n意图\r\n用原型实例指定创建对象的种类，并通过 拷贝 这些原型对象创建新的对象\r\n\r\n 适用性\r\n当一个系统应该独立于它的产品创建、构成和表示时，要用到 Prototype 模式；以及：\r\n当要实例化的类时在运行时刻指定时，例如：动态装载\r\n为了避免创建一个与产品类层次平行的工厂类层次时\r\n当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实力话类更方便\r\n\r\n结构\r\n{% raw %}\r\n\r\nOpen SVG\r\n\r\nPaste markup\r\nDemo\r\nContribute\r\nAbout\r\nPowered by the incredible SVGO\r\n\r\n\r\nIMAGE\r\nCODE\r\n1.24k - 37.46% saving\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"68.04132932576539 33.760683760683726 753.2478143152309 357.62782408872954\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1\" refY=\"3.899\"path d=\"M12 3.9L0 7.797V0z\" stroke=\"323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1\" refY=\"3.899\"path d=\"M12 3.9L0 7.797V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1.0 -1.0 10.0 10.0\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1.0 -1.0 10.0 10.0\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1.0 -1.0 10.0 10.0\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M68.04 33.76h753.25v357.63H68.04V33.76z\" fill=\"none\"/path d=\"M500.056 73.038q0-4 4-4h139.166q4 0 4 4v52q0 4-4 4H504.056q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#9cf\"/path d=\"M500.056 99.038h147.166\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M500.056 69.038h147.166v60H500.056z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"62.583\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(510.056 74.663)\"Prototype/texttext fill=\"#323232\" font-size=\"15\" x=\"62.583\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(510.056 104.663)\"clone()/textpath d=\"M369.98 195.39q0-4 4-4h174.937q4 0 4 4v67.277q0 4-4 4H373.98q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M369.98 229.39h182.937\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M369.98 191.39h182.937v75.277H369.98z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"80.469\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(379.98 201.014)\"ConcretePrototype1/texttext fill=\"#323232\" font-size=\"15\" x=\"80.469\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(379.98 238.653)\"clone()/textpath d=\"M364.086 322.14h157.548l16 16v33H364.086v-49z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M521.634 322.14v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M364.086 322.14h157.548l16 16v33H364.086v-49z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(374.086 337.264)\"return copy of self/textgpath d=\"M590.352 195.11q0-4 4-4h178.636q4 0 4 4v67.834q0 4-4 4H594.352q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M590.352 221.11h186.636\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M590.352 191.11h186.636v75.834H590.352z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"82.318\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(600.352 196.736)\"ConcretePrototype2/texttext fill=\"#323232\" font-size=\"15\" x=\"82.318\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(600.352 234.653)\"clone()/text/ggpath d=\"M683.67 191.11v-31.035H573.64v-15.8\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"//ggpath d=\"M461.448 191.39v-31.176h112.19v-15.94\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"//ggpath d=\"M627.742 322.39H785.29l16 16v33H627.74v-49z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M785.29 322.39v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M627.742 322.39H785.29l16 16v33H627.74v-49z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(637.742 337.514)\"return copy of self/text/ggpath d=\"M88.04 186.623h192.865l16 16v30.75H88.04v-46.75z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M280.905 186.623v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M88.04 186.623h192.865l16 16v30.75H88.04v-46.75z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(98.04 200.623)\"p=prototype.clone()/text/ggpath d=\"M95.48 57.76q0-4 4-4h139.222q4 0 4 4v82.556q0 4-4 4H99.48q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M95.48 83.76h147.222m-147.222 32h147.222\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M95.48 53.76h147.222v90.556H95.48z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"62.611\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(105.48 59.386)\"Client/texttext fill=\"#323232\" font-size=\"15\" x=\"62.611\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(105.48 89.386)\"prototype/texttext fill=\"#323232\" font-size=\"15\" x=\"62.611\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(105.48 121.386)\"operation()/text/ggpath d=\"M242.702 99.038H500.055\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"//ggpath d=\"M192.222 141.38v45.445\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"2.0 3.0\" fill=\"none\" marker-start=\"url(#c)\"//ggpath d=\"M445.39 254.667V319\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"2.0 3.0\" fill=\"none\" marker-start=\"url(#d)\"//ggpath d=\"M658.89 320v-62.667\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"2.0 3.0\" fill=\"none\" marker-end=\"url(#e)\"//g/svg\r\n{% endraw %}\r\n\r\n参与者\r\nPrototype: 声明一个克隆自身的接口\r\nConcretePrototype: 实现一个克隆自身的操作\r\nClient: 让一个原型克隆自身从而创建新的对象\r\n\r\n 效果\r\nPrototype模式的一些优点：\r\n运行时刻增加和删除产品。 Prototype允许只通过客户注册原型实例就可以将一个新的具体产品类并入系统。\r\n改变值以指定新对象。 高度动态的系统允许你通过对象符合定义新的行为而不是定义新的类，例如：通过一个对象变量指定值。通过实例化已有类并且将这些实例注册为客户对象原型，就可以有效定义新类别的对象。\r\n改变结构以指定新对象。 许多应用由部件和子部件来创建对象。例如电路设计编辑器就是由子电路来构造电路的。这样的应用通常允许实例化复杂的、用户定义的结构，可以重复使用一个特定的子电路。Prototype 模式也支持这一特性。我们只需要将这个子电路作为一个原型增加到可用的电路选择板中。只要符合电路对象将Clone实现为一个深拷贝，具有不同结构的电路就可以是原型了。\r\n减少子类的构造。 工厂方法经常产生一个与产品类层次平行的Creator类层次。Prototype模式使得我们克隆一个原型而不是请求工厂方法生产一个新对象，因此不需要Creator层次。\r\n用类动态配置应用。 一些运行时刻环境运行你动态将类装载到应用中。\r\n主要缺陷是需要每一个Prototype子类都实现Clone操作。 在有些情况下，比较困难。例如，当所考虑的类不支持拷贝或有循环引用时，就比较困难。\r\n\r\n实现\r\n当实现原型时，需要考虑如下问题：\r\n使用一个原型管理器。 当一个系统中原型数目不固定时，要保持一个可用原型的注册表。客户不会自己来管理原型，但会在注册表中存储和检索原型。\r\n实现克隆操作 克隆一个结构复杂的原型通常需要深拷贝，因为复制对象和原对象必须相互独立。\r\n初始化克隆对象 原型的类应该为一些关键的状态值定义好了操作，客户可以在克隆对象之后马上就可以使用这些操作。\r\n\r\n 代码示例\r\n因为需要深拷贝，下面列出 Maze 类的深拷贝，其他类似：\r\n`java\r\npublic class Maze implements Cloneable {\r\n    private ListRoom rooms = new ArrayListRoom();\r\n    public void addRoom (Room room) {\r\n        rooms.add(room);\r\n    }\r\n    public Room getRoom (int i) {\r\n        return rooms.get(i);\r\n    }\r\n    @Override\r\n    public Maze clone() {\r\n        Maze maze = null;\r\n        try {\r\n            maze = (Maze) super.clone();\r\n            // 需要注意浅拷贝和深拷贝\r\n            maze.rooms = new ArrayList(this.rooms.size());\r\n            Collections.copy(maze.rooms, this.rooms);\r\n        } catch (CloneNotSupportedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return maze;\r\n    }\r\n}\r\n`\r\n\r\nMazePrototypeFactory 用一个原型为参数的构造器来扩充 MazeFactory 接口：\r\n`java\r\npublic class MazePrototypeFactory implements MazeFactory {\r\n\r\n    private Maze prototypeMaze;\r\n    private Room prototypeRoom;\r\n    private Wall prototypeWall;\r\n    private Door prototypeDoor;\r\n\r\n    public MazePrototypeFactory(Maze prototypeMaze, Room prototypeRoom, Wall prototypeWall, Door prototypeDoor) {\r\n        this.prototypeMaze = prototypeMaze;\r\n        this.prototypeRoom = prototypeRoom;\r\n        this.prototypeWall = prototypeWall;\r\n        this.prototypeDoor = prototypeDoor;\r\n    }\r\n\r\n    @Override\r\n    public Maze makeMaze() {\r\n        return prototypeMaze.clone();\r\n    }\r\n\r\n    @Override\r\n    public Wall makeWall() {\r\n        return prototypeWall.clone();\r\n    }\r\n\r\n    @Override\r\n    public Room makeRoom(int roomNo) {\r\n        return prototypeRoom.clone();\r\n    }\r\n\r\n    @Override\r\n    public Door makeDoor(Room r1, Room r2) {\r\n        Door door = prototypeDoor.clone();\r\n        door.initialize(r1, r2);\r\n        return door;\r\n    }\r\n}\r\n`\r\n\r\n我们只需要使用基本迷宫构建的原型进行初始化，就可以创建一个原型或者缺省的迷宫：\r\n`java\r\nMazeGame game = new MazeGame();\r\nMazePrototypeFactory simpleMazeFactory = new MazePrototypeFactory(new Maze(), new Room(), new Wall(), new Door());\r\nMaze maze = game.createMaze(simpleMazeFactory);\r\n`\r\n\r\n为了改变迷宫的类型，我们可以用一个不同的原型集合来初始化 MazePrototypeFactory:\r\n`java\r\nMazePrototypeFactory enchantedFactory = new MazePrototypeFactory(new EnchantedMaze(), new EnchantedRoom(),\r\n            new Wall(), new DoorNeedSpell());\r\nMaze maze1 = game.createMaze(enchantedFactory);\r\n`\r\n\r\n相关模式\r\nPrototype 和 AbstractFactory模式在某种方面是相互竞争的，但他们也可以一起使用。AbstractFactory 可以存储一个被克隆的原型集合，并且返回产品对象。\r\n大量使用Composite 和 Decorator 模式的设计通常也可以使用 Prototype\r\n\r\n 创建只有一个对象的单件模式 -- Singleton\r\n创建只有一个对象实例的类。\r\n意图\r\n保证一个类仅有一个实例，并提供一个访问它的全局访问点。\r\n\r\n 适用性\r\n下面情况使用Singleton模式：\r\n当类智能有一个实例而且客户可以从一个全局访问点访问它\r\n当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例。\r\n\r\n结构\r\n{% raw %}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"141.0 60.0 470.0 173.0\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1.0 -1.0 10.0 10.0\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M141 60h470v173H141V60z\" fill=\"none\"/path d=\"M161 84q0-4 4-4h178q4 0 4 4v125q0 4-4 4H165q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M161 110h186m-186 38h186\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M161 80h186v133H161z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"82\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(171 85.625)\"Singleton/textg fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"82\" y=\"15.375\" transform=\"translate(171 110.25)\"static uniqueInstance/texttext x=\"82\" y=\"34.125\" transform=\"translate(171 110.25)\"singletonData/text/gg fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"82\" y=\"15.375\" transform=\"translate(171 148.375)\"static getInstance()/texttext x=\"82\" y=\"34.125\" transform=\"translate(171 148.375)\"singletonOperation()/texttext x=\"82\" y=\"52.875\" transform=\"translate(171 148.375)\"getSingletonData()/text/ggpath d=\"M414 132h161l16 16v31H414v-47z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M575 132v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M414 132h161l16 16v31H414v-47z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"77.5\" y=\"15.375\" font-family=\"Arial\" text-anchor=\"middle\" transform=\"translate(424 146.125)\"return uniqueInstance/text/ggpath d=\"M346 159h68\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"2.0 3.0\" fill=\"none\" marker-start=\"url(#a)\"//g/svg\r\n{% endraw %}\r\n\r\n参与者\r\nSingleton: 定义一个 getInstance 来允许客户访问它唯一实例；负责创建唯一实例\r\n\r\n 效果\r\nSingleton模式有许多有点：\r\n对唯一实例的受控访问。\r\n缩小命名空间。 Singleton模式是对全局变量的一种改进，它避免了那些存储唯一实例的全局变量污染命名空间\r\n允许对操作和表示的精化。 Singleton类可以有子类，而且用这个扩展类的实例来配置一个应用很容易。可以用你所需要的类的实例在运行时刻配置应用\r\n比类操作更灵活。 \r\n\r\n创建型模式总结\r\n用一个系统创建的那些对象的类对系统进行参数化有两种常用的方法：\r\n生成创建对象的类的子类；这对应于使用 Factory Method 模式。这种方法的主要缺点是，仅为了改变产品类，就可能需要创建一个新的子类。\r\n对系统进行参数化的方法更多的依赖于对象复合：定义一个对象负责声明产品对象类，并将它作为系统参数。这是 Abstract Factory、Builder 和 Prototype 模式的关键特征。\r\nAbstract Factory由这个工厂对象产生多个类的对象。Builder由这个工厂对象使用一个相对复杂的协议，逐步创建一各复杂的对象。Prototype由该工厂对象通过拷贝原型对象来创建产品对象。\r\n\r\n使用 Abstract Factory、Prototype或Builder的设计比使用Factory Method的那些设计更灵活，但也更复杂。设计以使用 Factory Method 开始，并且当设计者发现需要更大的灵活性时，设计会向其他创建型模式演化。\r\n",
        "tags": []
    },
    {
        "uri": "/post/DesignPatterns/结构型模式",
        "content": "---\r\ntitle: 结构型模式\r\n---\r\n\r\n转换接口的适配器 -- Adapter\r\n将一个类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\r\n\r\n 适用性\r\n以下情况使用Adapter模式：\r\n使用一个已经存在的类，而它的接口不符合需求\r\n创建一个可复用的类，该类可以与其他不相关的类或不可预见的类协同工作\r\n想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配他们的接口，对象适配器可以适配它的父类接口\r\n\r\n结构\r\n类适配器使用多重继承对一个接口与另一个接口进行匹配：\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"215.840909090909 46.0 662.3409090909091 269.1089406461307\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1\" refY=\"3.899\"path d=\"M12 3.9L0 7.797V0z\" stroke=\"323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1\" refY=\"3.899\"path d=\"M12 3.9L0 7.797V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1\" refY=\"3.899\"path d=\"M12 3.9L0 7.797V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1.0 -1.0 10.0 10.0\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M215.84 46h662.342v269.11h-662.34V46z\" fill=\"none\"/path d=\"M403 70q0-4 4-4h98q4 0 4 4v56q0 4-4 4h-98q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#9cf\"/path d=\"M403 96h106\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M403 66h106v64H403z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"42\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(413 71.625)\"Target/texttext fill=\"#323232\" font-size=\"15\" x=\"42\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(413 103.625)\"request()/textpath d=\"M586 70q0-4 4-4h150q4 0 4 4v56q0 4-4 4H590q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#9cf\"/path d=\"M586 96h158\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M586 66h158v64H586z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"68\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(596 71.625)\"Adaptee/texttext fill=\"#323232\" font-size=\"15\" x=\"68\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(596 103.625)\"specificRequest()/textgpath d=\"M472 231q0-4 4-4h161q4 0 4 4v60q0 4-4 4H476q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M472 257h169\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M472 227h169v68H472z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"73.5\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(482 232.625)\"Adapter/texttext fill=\"#323232\" font-size=\"15\" x=\"73.5\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(482 266.625)\"request()/text/ggpath d=\"M556.5 227v-48.5H456v-33.264\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"//ggpath d=\"M556.5 227v-48.5H665v-33.264\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"//ggpath d=\"M235.84 71.637q0-4 4-4h85q4 0 4 4v37q0 4-4 4h-85q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"35.5\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(245.84 80.762)\"Client/text/ggpath d=\"M328.84 90.137h37.08V90h21.844\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#c)\"//ggpath d=\"M716.364 254.654h125.818l16 16v24.455H716.364v-40.456z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M842.182 254.654v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M716.364 254.654h125.818l16 16v24.455H716.364v-40.456z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"13\" x=\"59.909\" y=\"13.325\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(726.364 266.757)\"specificRequest()/text/ggpath d=\"M607.687 278.182h108.98\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-start=\"url(#d)\"//g/svg\r\n{%endraw%}\r\n\r\n对象匹配器依赖于对象组合：\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"215.840909090909 46.0 569.4532085561497 295.17647058823513\" width=\"100%\" height=\"100%\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1\" refY=\"3.899\"path d=\"M12 3.9L0 7.797V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1\" refY=\"3.899\"path d=\"M12 3.9L0 7.797V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1.0 -1.0 10.0 10.0\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.61\" markerHeight=\"10.888\" viewBox=\"-2.3047648709624866 -1.5914908829822711 20.609529741924973 10.888175666885001\" refX=\"16\" refY=\"3.853\"path d=\"M0 3.853L8 0l8 3.853-8 3.852z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1\" refY=\"3.899\"path d=\"M12 3.9L0 7.797V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//marker/defspath d=\"M215.84 46h569.454v295.176H215.84V46z\" fill=\"none\"/path d=\"M403 70q0-4 4-4h98q4 0 4 4v56q0 4-4 4h-98q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#9cf\"/path d=\"M403 96h106\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M403 66h106v64H403z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"42\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(413 71.625)\"Target/texttext fill=\"#323232\" font-size=\"15\" x=\"42\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(413 103.625)\"request()/textpath d=\"M578.94 168.235q0-4 4-4h150q4 0 4 4v56q0 4-4 4h-150q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#9cf\"/path d=\"M578.94 194.235h158\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M578.94 164.235h158v64h-158z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"68\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(588.94 169.86)\"Adaptee/texttext fill=\"#323232\" font-size=\"15\" x=\"68\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(588.94 201.86)\"specificRequest()/textgpath d=\"M455.912 227.12v-48.56H456v-33.324\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"//ggpath d=\"M235.84 71.637q0-4 4-4h85q4 0 4 4v37q0 4-4 4h-85q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"35.5\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(245.84 80.762)\"Client/text/ggpath d=\"M328.84 90.137h37.08V90h21.844\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"//ggpath d=\"M578.128 286.42h171.166l16 16v18.756H578.128V286.42z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M749.294 286.42v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M578.128 286.42h171.166l16 16v18.756H578.128V286.42z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"13\" x=\"82.583\" y=\"13.325\" font-family=\"Arial\" text-anchor=\"middle\" transform=\"translate(588.128 295.673)\"adaptee.specificRequest()/text/ggpath d=\"M391.47 230.176q0-4 4-4H516q4 0 4 4v82.883q0 4-4 4H395.47q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M391.47 256.176H520m-128.53 32H520\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M391.47 226.176H520v90.883H391.47z\" fill=\"none\"/text fill=\"#323232\" font-size=\"13\" x=\"53.265\" y=\"13.325\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(401.47 233.05)\"Adapter/texttext fill=\"#323232\" font-size=\"13\" x=\"53.265\" y=\"13.325\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(401.47 263.05)\"adaptee/texttext fill=\"#323232\" font-size=\"13\" x=\"53.265\" y=\"13.325\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(401.47 295.05)\"request()/text/ggpath d=\"M505.334 304.064H577.647\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-start=\"url(#c)\"//ggpath d=\"M538.305 271.618h11.166v-75.383h14.235\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-start=\"url(#d)\" marker-end=\"url(#e)\"//g/svg\r\n{%endraw%}\r\n\r\n参与者\r\nTarget: 定义Client使用的与特定领域相关的接口\r\nClient: 与符合 Target 接口的对象协同\r\nAdaptee: 定义一个已经存在的接口，这个接口需要适配\r\nAdapter: 对Adaptee 的接口与 Target 接口进行适配\r\n\r\n 效果\r\n类适配器和对象适配器有不同的权衡，其中类适配器：\r\n用一个具体的Adapter类对Adaptee和Target进行匹配，结果是当我们想要匹配一个类以及它的所有子类时，类Adapter将不能胜任工作。\r\n使得Adapter可以重定义Adaptee的部分行为，因为Adapter是Adaptee的一个子类\r\n仅仅引入了一个对象，并不需要额外的指针以间接得到adaptee\r\n\r\n对象适配器：\r\n允许一个Adapter与多个Adaptee（Adaptee以及其子类）一同工作。Adapter也可以一次给所有的Adaptee添加功能\r\n使得重定义Adaptee的行为比较困难。这就需要生成Adaptee的子类并且使得Adapter引用这个子类而不是引用Adaptee本身 (作为参数传递)\r\n\r\n使用适配器模式需要考虑的因素：\r\nAdapter的匹配程度。 对Adaptee的接口与Target的接口进行匹配的工作量，各个Adapter可能不一样。可能从简单的接口转换到支持完全不同操作集合\r\n可插入Adapter。 当其他类使用一个类时，所需的假定条件越少，就具有越高的可复用性。\r\n使用双向适配器提供透明操作。 被适配的对象不再兼容Adaptee的接口，因此并不是所有Adaptee对象可以被使用的地方它都可以被使用，双向适配器可以提供这样的透明性（接口）。\r\n\r\n实现\r\nShape 根据相对的两个角定义一个边框，而TextView 根据原点、宽度和高度定义一个边框。\r\n`java\r\npublic interface Shape {\r\n    void boundingBox (Point bottomLeft, Point topRight);\r\n    Manipulator createManipulator ();\r\n}\r\npublic interface TextView {\r\n    void getOrigin(Coord x, Coord y);\r\n    void getExtent (Coord width, Coord height);\r\n    boolean isEmpty();\r\n}\r\n`\r\n\r\n对象适配器采用对象组合的方法将具有不同接口的类组合在一起，适配器中维护了一个指向TextView的指针\r\n`java\r\npublic class TextShapeAdapter implements Shape, TextView {\r\n\r\n    private TextView textView;\r\n    public TextShapeAdapter(TextView textView) {\r\n        this.textView = textView;\r\n    }\r\n    @Override\r\n    public void boundingBox(Point bottomLeft, Point topRight) {\r\n        Coord bottom = new Coord(), left= new Coord(), width= new Coord(), height= new Coord();\r\n        getOrigin(bottom, left);\r\n        getExtent(width, height);\r\n        bottomLeft.setBottom(bottom.getCenter());\r\n        bottomLeft.setLeft(left.getCenter());\r\n        topRight.setBottom(height.getCenter() + bottom.getCenter());\r\n        topRight.setLeft(left.getCenter() + width.getCenter());\r\n    }\r\n    @Override\r\n    public Manipulator createManipulator() {\r\n        return null;\r\n    }\r\n    @Override\r\n    public void getOrigin(Coord x, Coord y) {\r\n    }\r\n    @Override\r\n    public void getExtent(Coord width, Coord height) {\r\n    }\r\n    @Override\r\n    public boolean isEmpty() {\r\n        return textView.isEmpty();\r\n    }\r\n}\r\n`\r\n\r\n 相关模式\r\n模式Bridge的结构与对象适配器类似，但是Bridge的目的是将接口部分与实现部分分离，从而对他们可以较容易也相对独立的加以改变\r\nDecorator模式增强了其他对象的功能而同时又不改变他们的接口，而且其支持递归组合。\r\nProxy在不改变它的接口的条件下，为另一个对象定义了一个代理。\r\n\r\n\r\n分离抽象和实现 -- Bridge\r\n将抽象部分与它的实现部分分离，使它们都可以独立地变化。\r\n继承机制将抽象部分与它的实现部分固定在一起，是的难以对抽象部分和实现部分独立地进行修改、扩充和重用。\r\n\r\n 适用性\r\n以下情况使用Bridge：\r\n不希望抽象和它的实现部分之间有固定的绑定关系，例如：在程序运行时刻实现部分应该可以被选择或者切换。\r\n类的抽象以及他的实现都应该可以通过生成子类的方法加以扩充。\r\n对一个抽象的实现部分的修改应该对客户不产生影响，即客户的代码不需要重新编译\r\n想在多个对象间共享实现，但同时要求客户并不知道这一点\r\n\r\n结构\r\n\r\n{% raw %}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"71 61 850.25 301\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.61\" markerHeight=\"10.888\" viewBox=\"-2.305 -1.591 20.61 10.888\" refX=\"16\" refY=\"3.853\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M0 3.853L8 0l8 3.853-8 3.852z\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\"//markermarker id=\"f\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"g\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//marker/defspath fill=\"none\" d=\"M71 61h850.25v301H71V61z\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M177 284h164v39H177z\"/text x=\"71\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(187 294.125)\"RefinedAbstraction/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M191 120q0-4 4-4h128q4 0 4 4v51q0 4-4 4H195q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M191 146h136\"/path fill=\"none\" d=\"M191 116h136v59H191z\"/text x=\"57\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(201 121.625)\"Abstraction/texttext x=\"57\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(201 151.125)\"operation()/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M584.5 119.5q0-4 4-4h128q4 0 4 4v52q0 4-4 4h-128q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M584.5 145.5h136\"/path fill=\"none\" d=\"M584.5 115.5h136v60h-136z\"/text x=\"57\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(594.5 121.125)\"Implementor/texttext x=\"57\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(594.5 151.125)\"operationImp()/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M315 201h147l16 16v26H315v-42z\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M462 201v16h16\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M315 201h147l16 16v26H315v-42z\"/text x=\"70.5\" y=\"14.35\" fill=\"#323232\" font-size=\"14\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(325 213.25)\"imp.operationImp();/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M407.5 278q0-4 4-4H614q4 0 4 4v60q0 4-4 4H411.5q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M407.5 312H618\"/path fill=\"none\" d=\"M407.5 274H618v68H407.5z\"/text x=\"94.25\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(417.5 283.625)\"ConcreteImplementorA/texttext x=\"94.25\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(417.5 317.625)\"operationImp()/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M686.25 278q0-4 4-4h207q4 0 4 4v60q0 4-4 4h-207q-4 0-4-4z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M686.25 304h215\"/path fill=\"none\" d=\"M686.25 274h215v68h-215z\"/text x=\"96.5\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(696.25 279.625)\"ConcreteImplementorB/texttext x=\"96.5\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(696.25 313.625)\"operationImp()/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M793.75 274v-49.25H652.5v-34.014\" marker-end=\"url(#a)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M512.75 274v-49.25H652.5v-34.014\" marker-end=\"url(#b)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M345.305 145.5h223.96\" marker-start=\"url(#c)\" marker-end=\"url(#d)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M305 170v51.5h17v.5\" marker-start=\"url(#e)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M259 284v-93.764\" marker-end=\"url(#f)\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M91 85q0-4 4-4h60q4 0 4 4v26.5q0 4-4 4H95q-4 0-4-4z\"/text x=\"23\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(101 88.875)\"Client/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M125 115.5v30h50.764\" marker-end=\"url(#g)\"//svg\r\n{%endraw%}\r\n\r\n参与者\r\nAbstraction: 定义抽象接口的类；维护一个指向Implementor类型对象的指针\r\nRefinedAbstraction: 扩充Abstraction 定义的接口\r\nImplementor: 定义实现类的接口，该接口不一定要与Abstraction接口完全一致；一般来讲，Implementor接口仅提供基本操作，而Abstraction则定义了基于这些操作的较高层次的操作\r\nConcreteImplementor: 实现Implementor接口并定义了它的具体实现。\r\n\r\n 效果\r\nBridge模式有以下优点：\r\n分离接口及其实现部分。一个实现未必不变地绑定在一个接口上。抽象类的实现可以在运行时刻进行配置，一个对象甚至可以在运行时刻改变它的实现。将Abstraction与Implementor分离有助于降低对实现部分编译时刻的依赖，当改变实现类时，并不需要重新编译Abstraction类和它的客户程序。为了保证一个类库的不同版本之间的兼容性，一定要有这个性质\r\n提高可扩充性。可以独立地对Abstraction与Implementor进行扩充\r\n实现细节对客户透明。\r\nBridge模式要求正确识别出系统中两个独立变化的维度。因此其使用范围具有一定的局限性。\r\n\r\n实现\r\n仅有一个Implementor。在仅有一个实现时，没必要创建一个抽象的Implementor，这是Bridge退化的情况。这时，Abstraction和Implementor是一一对应的，但是当改变一个类的实现不会影响已有的客户程序，模式分离的机制还是有用的\r\n创建正确的Implementor对象。当Abstraction知道所有的ConcreteImplementor类，它就可以在构造器中对其中的一个类进行实例化，可以通过传递参数给构造器确定实例化哪个类；还可以选择一个缺省实现，然后根据需要改变这个实现；还可以代理给一个对象，由它决定，比如Abstract Factory。\r\n共享Implementor对象。\r\n\r\n 相关模式\r\nAbstract Factory模式可以用来创建和配置一个特定的Bridge模式\r\nAdapter模式用来 帮助无关的类协同工作，它通常在系统设计完成后才会被使用。然而，Bridge模式则是在系统开始时使用，它使得抽象接口和实现部分可以独立进行改变。\r\n\r\n部分整体递归组合 —— Composite\r\n将对象组合成树形结构以表示 “部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性。\r\n\r\n 适用性\r\n以下情况适用于Composite模式：\r\n想表示对象的部分-整体层次结构\r\n希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象\r\n\r\n结构\r\n\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"processonSvg1000\" viewBox=\"48.62962962962963 58.518518518518505 670.3703703703703 349.4814814814815\" width=\"100%\" height=\"100%\"defs id=\"ProcessOnDefs1001\"marker id=\"ProcessOnMarker1037\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1038\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"323232\" stroke-width=\"2.0\" fill=\"#fff\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1041\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1042\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1045\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.609529741924973\" markerHeight=\"10.888175666885001\" viewBox=\"-2.3047648709624866 -1.5914908829822711 20.609529741924973 10.888175666885001\" refX=\"16.0\" refY=\"3.8525969504602293\"path id=\"ProcessOnPath1046\" d=\"M0 3.8525969504602293L8.0 0L16.0 3.8525969504602293L8.0 7.705193900920459Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\"//markermarker id=\"ProcessOnMarker1047\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1048\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#323232\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1062\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10.0\" markerHeight=\"10.0\" viewBox=\"-1.0 -1.0 10.0 10.0\" refX=\"8.0\" refY=\"4.0\"path id=\"ProcessOnPath1063\" d=\"M0 4.0A4.0 4.0 0 0 1 4.0 0A4.0 4.0 0 1 1 0 4.0\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\"//markermarker id=\"ProcessOnMarker1070\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1071\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#323232\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//marker/defsg id=\"ProcessOnG1002\"path id=\"ProcessOnPath1003\" d=\"M48.62962962962963 58.518518518518505H719.0V408.0H48.629629629629676V58.518518518518476Z\" fill=\"none\"/g id=\"ProcessOnG1004\"g id=\"ProcessOnG1005\" transform=\"matrix(1.0,0.0,0.0,1.0,203.37037037037038,84.05212620027436)\" opacity=\"1.0\"path id=\"ProcessOnPath1006\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L179.0 0.0Q183.0 0.0 183.0 4.0L183.0 117.0Q183.0 121.0 179.0 121.0L4.0 121.0Q0.0 121.0 0.0 117.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1007\" d=\"M0.0 30.0L183.0 30.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1008\" d=\"M0.0 0.0L183.0 0.0L183.0 121.0L0.0 121.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1009\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1010\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"          Component/text/gg id=\"ProcessOnG1011\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,38.0)\"text id=\"ProcessOnText1012\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"operation()/texttext id=\"ProcessOnText1013\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"34.125\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"add(Component c)/texttext id=\"ProcessOnText1014\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"52.875\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"remove(Component c)/texttext id=\"ProcessOnText1015\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"71.625\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"getChild(int i)/text/g/gg id=\"ProcessOnG1016\" transform=\"matrix(1.0,0.0,0.0,1.0,138.0,264.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1017\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L114.0 0.0Q118.0 0.0 118.0 4.0L118.0 58.0Q118.0 62.0 114.0 62.0L4.0 62.0Q0.0 62.0 0.0 58.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1018\" d=\"M0.0 30.0L118.0 30.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1019\" d=\"M0.0 0.0L118.0 0.0L118.0 62.0L0.0 62.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1020\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1021\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"       Leaf/text/gg id=\"ProcessOnG1022\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,36.625)\"text id=\"ProcessOnText1023\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"operation()/text/g/gg id=\"ProcessOnG1024\" transform=\"matrix(1.0,0.0,0.0,1.0,306.5,264.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1025\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L186.0 0.0Q190.0 0.0 190.0 4.0L190.0 120.0Q190.0 124.0 186.0 124.0L4.0 124.0Q0.0 124.0 0.0 120.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1026\" d=\"M0.0 30.0L190.0 30.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1027\" d=\"M0.0 0.0L190.0 0.0L190.0 124.0L0.0 124.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1028\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1029\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"            Composite/text/gg id=\"ProcessOnG1030\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,39.5)\"text id=\"ProcessOnText1031\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"operation()/texttext id=\"ProcessOnText1032\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"34.125\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"add(Component c)/texttext id=\"ProcessOnText1033\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"52.875\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"remove(Component c)/texttext id=\"ProcessOnText1034\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"71.625\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"getChild(int i)/text/g/gg id=\"ProcessOnG1035\"path id=\"ProcessOnPath1036\" d=\"M401.5 264.0L401.5 234.52606310013715L294.8703703703704 234.52606310013715L294.8703703703704 220.28819417777413\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1037)\"//gg id=\"ProcessOnG1039\"path id=\"ProcessOnPath1040\" d=\"M197.0 264.0L197.0 234.52606310013715L294.8703703703704 234.52606310013715L294.8703703703704 220.28819417777413\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1041)\"//gg id=\"ProcessOnG1043\"path id=\"ProcessOnPath1044\" d=\"M514.3047648709625 286.0L582.1538461538457 286.0L582.1538461538457 102.59244878091951L401.60643834787015 102.59244878091951\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-start=\"url(#ProcessOnMarker1045)\" marker-end=\"url(#ProcessOnMarker1047)\"//gg id=\"ProcessOnG1049\" transform=\"matrix(1.0,0.0,0.0,1.0,68.62962962962963,78.5185185185185)\" opacity=\"1.0\"path id=\"ProcessOnPath1050\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L70.0 0.0Q74.0 0.0 74.0 4.0L74.0 37.0Q74.0 41.0 70.0 41.0L4.0 41.0Q0.0 41.0 0.0 37.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/g id=\"ProcessOnG1051\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,11.125)\"text id=\"ProcessOnText1052\" fill=\"#323232\" font-size=\"15\" x=\"26.0\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"middle\" size=\"15\"Client/text/g/gg id=\"ProcessOnG1053\" transform=\"matrix(1.0,0.0,0.0,1.0,559.0,296.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1054\" d=\"M0.0 0.0L124.0 0.0L140.0 16.0L140.0 54.0L0.0 54.0L0.0 0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1055\" d=\"M124.0 0.0L124.0 16.0L140.0 16.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1056\" d=\"M0.0 0.0L124.0 0.0L140.0 16.0L140.0 54.0L0.0 54.0L0.0 0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1057\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,8.25)\"text id=\"ProcessOnText1058\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"Arial\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"for g in children/texttext id=\"ProcessOnText1059\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"34.125\" font-family=\"Arial\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"start\" size=\"15\"    g.operation()/text/g/gg id=\"ProcessOnG1060\"path id=\"ProcessOnPath1061\" d=\"M451.0 311.0L500.5 311.0L500.5 311.0L559.0 311.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"2.0 3.0\" fill=\"none\" marker-start=\"url(#ProcessOnMarker1062)\"//gg id=\"ProcessOnG1064\" transform=\"matrix(1.0,0.0,0.0,1.0,453.0,247.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1065\" d=\"M0.0 0.0L160.0 0.0L160.0 40.0L0.0 40.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1066\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,10.625)\"text id=\"ProcessOnText1067\" fill=\"#323232\" font-size=\"15\" x=\"79.0\" y=\"15.375\" font-family=\"Arial\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"Arial\" text-anchor=\"middle\" size=\"15\"children/text/g/gg id=\"ProcessOnG1068\"path id=\"ProcessOnPath1069\" d=\"M142.62962962962962 99.0185185185185L173.0 99.0185185185185L173.0 99.05212620027436L188.13430239287058 99.05212620027436\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1070)\"//g/g/g/svg\r\n{%endraw%}\r\n\r\n参与者\r\nComponent: 为组合中的对象声明接口；在适当的情况下，实现所有类共有接口的缺省行为；声明一个接口用于访问和管理Component的子组件；在递归结构中定义一个接口，用于访问一个父部件\r\nLeaf: 在组合 中表示叶节点对象，叶节点没有子节点；在组合中定义图元对象的行为\r\nComposite: 定义有子部件的那些部件的行为；存储子部件；在Component接口中实现与子部件有关的操作\r\n\r\n 协作\r\n用户使用Component类接口与组合结构中的对象进行交互。不可接受接收者是一个叶节点，则直接处理请求。如果接收者是Composite，它通常将请求发送给它的子部件，在转发请求之前或之后可以执行一些辅助操作。\r\n\r\n效果\r\nComposite模式的效果如下：\r\n定义了包含基本对象和组合对象的类层次结构\r\n客户可以一致地使用组合结构和单个对象\r\n使得更容易增加新类型的组件。新定义的Composite或Leaf子类自动地与已有的结构和客户代码一起工作，客户程序不需要因新的Component类而改变\r\n使你的设计更加一般化。容易增加新组件也会产生一些问题，那就是很难限制组合中的组件。如果希望一个组合只能有某些特定的组件，不能依赖类型系统施加这些约束，而必须在运行时刻进行检查\r\n\r\n 实现\r\n我们在实现Composite模式进需要考虑以下问题：\r\n显式的父部件的引用。保持从子部件到父部件的引用能简化组合结构的遍历和管理。父部件引用可以简化结构的上移和组件的删除。\r\n共享组件。共享组件是比较有用的，比如它可买减少对存储空间的需求，但是当一个组件只用一个父部件时，很难共享组件\r\n最大化Component接口。Composite模式的目的之一是使得用户不知道他们正在使用的具体的Leaf和Composite类。因此，Composite类应为Leaf和Composite类尽可能多定义一些公共操作。Composite类通常为这些操作提供缺省的实现。\r\n在什么地方声明管理子部件的操作。我们是应该在Component中声明这些操作，并使这些操作对Leaf类有意义，还是只应该在Composite和它的子类中声明这些操作？这需要在安全性和透明性之间做出权衡选择：\r\n    类层次结构的根部，即在Components中定义节点管理接口的方法具有良好的透明性，但是会牺牲安全性。因为客户有可能会做一些无意义的操作\r\n    在Composite类中定义具有良好的安全性，但是Leaf和Composite具有不同的接口\r\n\r\n代码\r\n计算机和立体声组合音响这样的设备经常被组装成部分-整体层次结构或者是容器层次结构。例如，底盘可包含驱动装置和平面板，总线含有多个插件，机柜包括底盘、总线等。这种结构很自然地用Composite模式进行模拟。\r\n`java\r\n/**\r\n Equipment为 部分-整体 层次结构中的所有设备定义一个接口\r\n */\r\npublic abstract class EquipmentComponent {\r\n    private String name;\r\n\r\n    EquipmentComponent(String name) {\r\n        this.name = name;\r\n    }\r\n    public String getName() {return name;}\r\n    public abstract int netPrice();\r\n    public abstract int discountPrice();\r\n\r\n    public abstract void add(EquipmentComponent e);\r\n    public abstract void remove(EquipmentComponent e);\r\n    public abstract IteratorEquipmentComponent createIterator();\r\n}\r\n`\r\n\r\nEquipmentComposite 是包含其他设备的基类，也是 EquipmentComponent 的子类\r\n`java\r\npublic abstract class EquipmentComposite extends EquipmentComponent {\r\n    private ListEquipmentComponent equipments;\r\n    public EquipmentComposite (String name){\r\n        super(name);\r\n    }\r\n\r\n    @Override\r\n    public IteratorEquipmentComponent createIterator() {\r\n        return equipments.iterator();\r\n    }\r\n\r\n    @Override\r\n    public int netPrice() {\r\n        IteratorEquipmentComponent it = createIterator();\r\n        int total = 0;\r\n        while(it.hasNext()) {\r\n            total += it.next().netPrice();\r\n        }\r\n        return total;\r\n    }\r\n\r\n    @Override\r\n    public void add(EquipmentComponent e) {\r\n        equipments.add(e);\r\n    }\r\n    @Override\r\n    public void remove(EquipmentComponent e) {\r\n        equipments.remove(e);\r\n    }\r\n}\r\n`\r\n\r\n还有 Leaf 类：\r\n`java\r\npublic class FloppyDiskLeaf extends EquipmentComponent {\r\n    FloppyDiskLeaf(String name) {\r\n        super(name);\r\n    }\r\n    @Override\r\n    public int netPrice() { return 0; }\r\n    @Override\r\n    public int discountPrice() { return 0; }\r\n    @Override\r\n    public void add(EquipmentComponent e) { }\r\n    @Override\r\n    public void remove(EquipmentComponent e) {  }\r\n    @Override\r\n    public IteratorEquipmentComponent createIterator() {return null;}\r\n}\r\n`\r\n\r\n 相关模式\r\nDecorator模式经常与Composite模式一起使用，它们通常有一个公共的父类。\r\nFlyweight 让你共享组件，但不能引用它们的父部件 \r\nItertor 用来遍历 Composite\r\nVisitor 将本来应该分布在Composite和Leaf类中的扣件和行为局部化\r\n\r\n动态修改对象职责 -- Decorator\r\n动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。\r\n\r\n 适用性\r\n以下情况使用Decorator模式：\r\n不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责\r\n处理那些可以撤消的职责\r\n当不能采用生成子类的方法进行扩充时。可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。\r\n\r\n结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"processonSvg1000\" viewBox=\"81.0 64.05212620027436 730.5 449.94787379972564\" width=\"100%\" height=\"100%\"defs id=\"ProcessOnDefs1001\"marker id=\"ProcessOnMarker1031\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1032\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"323232\" stroke-width=\"2.0\" fill=\"#fff\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1035\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1036\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1039\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.609529741924973\" markerHeight=\"10.888175666885001\" viewBox=\"-2.3047648709624866 -1.5914908829822711 20.609529741924973 10.888175666885001\" refX=\"16.0\" refY=\"3.8525969504602293\"path id=\"ProcessOnPath1040\" d=\"M0 3.8525969504602293L8.0 0L16.0 3.8525969504602293L8.0 7.705193900920459Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\"//markermarker id=\"ProcessOnMarker1041\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1042\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#323232\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1051\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10.0\" markerHeight=\"10.0\" viewBox=\"-1.0 -1.0 10.0 10.0\" refX=\"8.0\" refY=\"4.0\"path id=\"ProcessOnPath1052\" d=\"M0 4.0A4.0 4.0 0 0 1 4.0 0A4.0 4.0 0 1 1 0 4.0\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\"//markermarker id=\"ProcessOnMarker1078\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1079\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1082\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1083\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1093\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10.0\" markerHeight=\"10.0\" viewBox=\"-1.0 -1.0 10.0 10.0\" refX=\"8.0\" refY=\"4.0\"path id=\"ProcessOnPath1094\" d=\"M0 4.0A4.0 4.0 0 0 1 4.0 0A4.0 4.0 0 1 1 0 4.0\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\"//marker/defsg id=\"ProcessOnG1002\"path id=\"ProcessOnPath1003\" d=\"M81.0 64.05212620027436H811.5V514.0H81.0V64.05212620027436Z\" fill=\"none\"/g id=\"ProcessOnG1004\"g id=\"ProcessOnG1005\" transform=\"matrix(1.0,0.0,0.0,1.0,203.37037037037038,84.05212620027436)\" opacity=\"1.0\"path id=\"ProcessOnPath1006\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L136.62962962962962 0.0Q140.62962962962962 0.0 140.62962962962962 4.0L140.62962962962962 56.0Q140.62962962962962 60.0 136.62962962962962 60.0L4.0 60.0Q0.0 60.0 0.0 56.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1007\" d=\"M0.0 30.0L140.62962962962962 30.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1008\" d=\"M0.0 0.0L140.62962962962962 0.0L140.62962962962962 60.0L0.0 60.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1009\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1010\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"Component/text/gg id=\"ProcessOnG1011\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,35.625)\"text id=\"ProcessOnText1012\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"operation()/text/g/gg id=\"ProcessOnG1013\" transform=\"matrix(1.0,0.0,0.0,1.0,101.0,264.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1014\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L178.0 0.0Q182.0 0.0 182.0 4.0L182.0 67.0Q182.0 71.0 178.0 71.0L4.0 71.0Q0.0 71.0 0.0 67.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1015\" d=\"M0.0 38.0L182.0 38.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1016\" d=\"M0.0 0.0L182.0 0.0L182.0 71.0L0.0 71.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1017\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,9.625)\"text id=\"ProcessOnText1018\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"ConcreteComponent/text/gg id=\"ProcessOnG1019\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,45.125)\"text id=\"ProcessOnText1020\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"operation()/text/g/gg id=\"ProcessOnG1021\" transform=\"matrix(1.0,0.0,0.0,1.0,337.5,264.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1022\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L118.5 0.0Q122.5 0.0 122.5 4.0L122.5 58.0Q122.5 62.0 118.5 62.0L4.0 62.0Q0.0 62.0 0.0 58.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1023\" d=\"M0.0 30.0L122.5 30.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1024\" d=\"M0.0 0.0L122.5 0.0L122.5 62.0L0.0 62.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1025\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1026\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"Decorator/text/gg id=\"ProcessOnG1027\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,36.625)\"text id=\"ProcessOnText1028\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"operation()/text/g/gg id=\"ProcessOnG1029\"path id=\"ProcessOnPath1030\" d=\"M398.75 264.0L398.75 204.02606310013718L273.6851851851852 204.02606310013718L273.6851851851852 159.28819417777416\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1031)\"//gg id=\"ProcessOnG1033\"path id=\"ProcessOnPath1034\" d=\"M192.0 264.0L192.0 204.02606310013718L273.6851851851852 204.02606310013718L273.6851851851852 159.28819417777416\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1035)\"//gg id=\"ProcessOnG1037\"path id=\"ProcessOnPath1038\" d=\"M477.98239644990986 286.73333333333335L601.6776315789474 286.73333333333335L601.6776315789474 108.5765761368931L359.2360679774998 108.5765761368931\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-start=\"url(#ProcessOnMarker1039)\" marker-end=\"url(#ProcessOnMarker1041)\"//gg id=\"ProcessOnG1043\" transform=\"matrix(1.0,0.0,0.0,1.0,559.0,296.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1044\" d=\"M0.0 0.0L196.0 0.0L212.0 16.0L212.0 42.0L0.0 42.0L0.0 0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1045\" d=\"M196.0 0.0L196.0 16.0L212.0 16.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1046\" d=\"M0.0 0.0L196.0 0.0L212.0 16.0L212.0 42.0L0.0 42.0L0.0 0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1047\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,11.625)\"text id=\"ProcessOnText1048\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"component.operation()/text/g/gg id=\"ProcessOnG1049\"path id=\"ProcessOnPath1050\" d=\"M451.0 311.0L500.5 311.0L500.5 311.0L559.0 311.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"2.0 3.0\" fill=\"none\" marker-start=\"url(#ProcessOnMarker1051)\"//gg id=\"ProcessOnG1053\" transform=\"matrix(1.0,0.0,0.0,1.0,490.0,248.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1054\" d=\"M0.0 0.0L160.0 0.0L160.0 40.0L0.0 40.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1055\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,10.625)\"text id=\"ProcessOnText1056\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"component/text/g/gg id=\"ProcessOnG1057\" transform=\"matrix(1.0,0.0,0.0,1.0,368.6851851851852,404.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1058\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L186.31481481481478 0.0Q190.31481481481478 0.0 190.31481481481478 4.0L190.31481481481478 86.0Q190.31481481481478 90.0 186.31481481481478 90.0L4.0 90.0Q0.0 90.0 0.0 86.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1059\" d=\"M0.0 30.0L190.31481481481478 30.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1060\" d=\"M0.0 0.0L190.31481481481478 0.0L190.31481481481478 90.0L0.0 90.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1061\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1062\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"ConcreteDecoratorA/text/gg id=\"ProcessOnG1063\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,41.25)\"text id=\"ProcessOnText1064\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"operation()/texttext id=\"ProcessOnText1065\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"34.125\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"addedBehavior()/text/g/gg id=\"ProcessOnG1066\" transform=\"matrix(1.0,0.0,0.0,1.0,137.0,404.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1067\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L177.0 0.0Q181.0 0.0 181.0 4.0L181.0 86.0Q181.0 90.0 177.0 90.0L4.0 90.0Q0.0 90.0 0.0 86.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1068\" d=\"M0.0 30.0L181.0 30.0M0.0 62.0L181.0 62.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1069\" d=\"M0.0 0.0L181.0 0.0L181.0 90.0L0.0 90.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1070\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1071\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"ConcreteDecoratorA/text/gg id=\"ProcessOnG1072\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,35.625)\"text id=\"ProcessOnText1073\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"addedState/text/gg id=\"ProcessOnG1074\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,67.625)\"text id=\"ProcessOnText1075\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"operation()/text/g/gg id=\"ProcessOnG1076\"path id=\"ProcessOnPath1077\" d=\"M227.5 404.0L227.5 365.0L398.75 365.0L398.75 341.2360679774998\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1078)\"//gg id=\"ProcessOnG1080\"path id=\"ProcessOnPath1081\" d=\"M463.8425925925926 404.0L463.8425925925926 365.0L398.75 365.0L398.75 341.2360679774998\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1082)\"//gg id=\"ProcessOnG1084\" transform=\"matrix(1.0,0.0,0.0,1.0,599.5,435.0)\" opacity=\"1.0\"path id=\"ProcessOnPath1085\" d=\"M0.0 0.0L176.0 0.0L192.0 16.0L192.0 44.0L0.0 44.0L0.0 0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1086\" d=\"M176.0 0.0L176.0 16.0L192.0 16.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1087\" d=\"M0.0 0.0L176.0 0.0L192.0 16.0L192.0 44.0L0.0 44.0L0.0 0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1088\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,3.25)\"text id=\"ProcessOnText1089\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"operation();/texttext id=\"ProcessOnText1090\" fill=\"#323232\" font-size=\"15\" x=\"0.0\" y=\"34.125\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"15\"addedBehavior();/text/g/gg id=\"ProcessOnG1091\"path id=\"ProcessOnPath1092\" d=\"M492.0 454.0L541.5 454.0L541.5 454.0L600.0 454.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"2.0 3.0\" fill=\"none\" marker-start=\"url(#ProcessOnMarker1093)\"//g/g/g/svg\r\n{%endraw%}\r\n\r\n参与者\r\nComponent: 定义一个对象接口，可以给这些对象动态地添加职责\r\nConcreteComponent: 定义一个对象，可以给这个对象添加一些职责\r\nDecorator: 维持一个指向Component对象的指针，并定义一个与Component接口一致的接口\r\nConcreteDecorator: 向组件添加职责\r\n\r\nDecorator 将请求转发给它的 Component 对象，并有可能在转发请求后执行一些附加动作\r\n\r\n 效果\r\nDecorator模式主要有如下优点：\r\n比静态继承更灵活\r\n避免在层次结构高层的类有太多的特征。 定义一个简单的类，并且用Decorator类给它逐渐添加功能，这样可以从简单的部件组合出复杂的功能。\r\n\r\nDecorator模式主要有如下缺点：\r\nDecorator与它的Component不一样。Decorator是一个透明的包装，如果我们从对象标识出发，一个被装饰了的组件与这个组件是有差别的，因此，使用装饰时不应该依赖对象标识\r\n有许多小对象。采用Decorator模式时，往往会产生许多看上去类似的小对象，这些对象仅仅在他们相互连接的方式上有所不同，而不是它们的类或是它们的属性值不同，造成这样的系统很难学习。\r\n\r\n实现\r\n实现Decorator模式时应该注意以下几点：\r\n接口的一致性。装饰对象的接口必须与它所装饰的Component的接口是一致的，因此，所有的ConcreteDecorator类必须有一个公共的父类。\r\n省略抽象的Decorator类。当仅需要一个职责时，可以把Decorator向Component转发请求的职责合并到ConcreteDecorator中\r\n保持Component类的简单性。因为Component是公共父类，它应定义接口而不是存储数据。赋予Component太多的功能也使得，具体的子类有一些它们并不需要的功能的可能性大大增加。\r\n改变对象外壳与改变对象内核。Decorator改变的是对象在外壳，Strategy模式改变的是对象在内核\r\n\r\n 代码示例\r\nComponent类如下：\r\n`java\r\npublic abstract class VisualComponent {\r\n    public VisualComponent(){}\r\n    public abstract void draw();\r\n    public abstract void resize();\r\n}\r\n`\r\n\r\n将生成Decorator的子类以获取不同的装饰，Decorator装饰由component实例变量引用的VisualComponent，这个实例变量在构造器中被初始化：\r\n`java\r\npublic class Decorator extends VisualComponent {\r\n    private VisualComponent component;\r\n    Decorator (VisualComponent component) {\r\n        this.component = component;\r\n    }\r\n    @Override\r\n    public void draw() {\r\n        component.draw();\r\n    }\r\n    @Override\r\n    public void resize() {\r\n        component.resize();\r\n    }\r\n}\r\n`\r\n\r\nBorderDecorator类为它所包含的组件添加了一个边框。BorderDecorator是Decorator的子类，它重定义Draw操作用于绘制边框：\r\n`java\r\npublic class BorderDecorator extends Decorator{\r\n    private int borderWidth;\r\n    public BorderDecorator(VisualComponent component, int borderWidth) {\r\n        super(component);\r\n        this.borderWidth = borderWidth;\r\n    }\r\n    @Override\r\n    public void draw() {\r\n        super.draw();\r\n        drawBorder();\r\n    }\r\n    private void drawBorder(){}\r\n}\r\n`\r\n\r\n可以用如下方式使用 Decorator：\r\n`java\r\nVisualComponent component = new BorderDecorator(new TextView(), 1);\r\n`\r\n\r\n相关模式\r\nAdapter模式：适配器给对象一个全新的接口\r\nComposite模式： 将装饰视为一个退化的、仅有一个组件的组合。然而，装饰仅给对象添加一些额外的职责，而不在于对象聚集\r\nStrategy模式：用一个装饰你可以改变对象的外表；Strategy模式使得你可以改变对象的内核。\r\n\r\n 封装复杂子系统接口 —— Facade\r\n为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\r\n\r\n适用性\r\n以下情况适用于Facade模式\r\n为一个复杂系统提供一个简单接口。Facade可以为一个复杂系统提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要更多功能的用户可以越过Facade层\r\n构建一个层次结构的子系统时，可以使用Facade模式定义子系统中每层的入口点。\r\n提高子系统的独立性和可移植性。\r\n\r\n 结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"121 94 688 314\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#fff\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//markermarker id=\"f\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"-1\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M12 3.9L0 7.797V0z\"//marker/defspath fill=\"none\" d=\"M121 94h688v314H121V94z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M141 140h648v248H141z\"/text y=\"34.125\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(151 140)\"子系统类/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M392 114h107v50H392z\"/text x=\"42.5\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(402 129.625)\"Facade/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M289 205h83v29h-83zm55 65.5h83v29h-83zm-150 57h83v29h-83zm0-78h83v29h-83zm402-40h83v29h-83zm-63 99h83v29h-83zm124 0h83v29h-83z\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M445.5 164v20.5h-115v5.264\" marker-end=\"url(#a)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M445.5 164v53.5H393v38.264\" marker-end=\"url(#b)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M445.5 164v178H292.236\" marker-end=\"url(#c)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M235.5 327.5v-33.764\" marker-end=\"url(#d)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M277 264h33.5v21H344m230.5 23.5v-35h63v-35\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M698.5 308.5v-35h-61v-19.764\" marker-end=\"url(#e)\"/path fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M445.5 164v159h72.264\" marker-end=\"url(#f)\"//svg\r\n{%endraw%}\r\n\r\n参与者\r\nFacade: 知道哪些子系统类负责处理请求；将客户的请求代理给适当的子系统对象\r\n子系统类： 实现子系统的功能；处理有Facade对象指派的任务；没有Facade的任何信息\r\n \r\n 协作\r\n客户程序通过发送请求给Facade的方式与子系统通讯，Facade将这些消息转发给适当的子系统对象。Facade模式本身需要将它的接口转换成子系统的接口\r\n\r\n效果\r\n屏蔽了子系统组件，减少了客户处理对象的数目并使子系统用起来更方便\r\n实现了子系统与客户之间的松耦合关系，而子系统内部的功能组件往往是紧耦合的\r\n\r\n 实现\r\n降低客户-子系统之间的耦合度。 用抽象类实现Facade，而它的具体子类对应于不同的子系统实现，可以进一步降低客户与子系统的耦合度。\r\n公共子系统类与私有子系统类。 子系统的公共接口包含所有的客户程序可以访问的类；私有接口仅用于对子系统进行扩充。Java中可以使用抽象类实现私有接口。\r\n\r\n相关模式\r\nAbstract Factory 模式可以与Facade模式一起使用以提供一个接口，这个接口可以用来以一种子系统独立的方式创建子系统对象，Abstract Factory也可以代替Facade模式隐藏那些与平台相关的类。\r\nMediator模式与Facade模式的相似之处是，它抽象了一些已有的类的功能。然而，Mediator的目的是对同事之间的任意通讯进行抽象，通常集中不属于单个对象的功能；Facade模式仅仅是对子系统对象的接口进行抽象，从而使它们更容易使用。\r\n\r\n 对象池 —— Flyweight\r\n运用共享技术有效地支持大量细粒度对象，适用于那些因为数量太大而难以用对象来表示的概念或实体进行建模\r\n\r\n适用性\r\nFlyweight 模式的有效性很大程度上取决于如何使用它以及在何处使用它:\r\n一个应用程序使用了大量的对象\r\n完全由于使用大量对象，造成很大的存储开销\r\n对象的大多数状态都可变为外部状态\r\n如果删除对象中的外部状态，那么可以用相对较少的共享对象取代很多组对象\r\n应用程序不依赖于对象标识，由于Flyweight对象可以被共享，对于概念上明显有别的对象，标识测试将返回真值\r\n\r\n 结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"processonSvg1000\" viewBox=\"66.47058823529416 287.9411764705881 963.0000000000003 381.00000000000006\" width=\"100%\" height=\"100%\"defs id=\"ProcessOnDefs1001\"marker id=\"ProcessOnMarker1023\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.609529741924973\" markerHeight=\"10.888175666885001\" viewBox=\"-2.3047648709624866 -1.5914908829822711 20.609529741924973 10.888175666885001\" refX=\"16.0\" refY=\"3.8525969504602293\"path id=\"ProcessOnPath1024\" d=\"M0 3.8525969504602293L8.0 0L16.0 3.8525969504602293L8.0 7.705193900920459Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\"//markermarker id=\"ProcessOnMarker1025\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1026\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#323232\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1049\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1050\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1053\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1054\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1061\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1062\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#323232\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1065\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1066\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#323232\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1069\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606797749979\" markerHeight=\"10.550836550532098\" viewBox=\"-1.0 -1.3763819204711736 16.23606797749979 10.550836550532098\" refX=\"-1.0\" refY=\"3.8990363547948754\"path id=\"ProcessOnPath1070\" d=\"M12.0 3.8990363547948754L0.0 7.798072709589751V0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#323232\" transform=\"matrix(1.0,0.0,0.0,1.0,0.0,0.0)\"//markermarker id=\"ProcessOnMarker1085\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10.0\" markerHeight=\"10.0\" viewBox=\"-1.0 -1.0 10.0 10.0\" refX=\"0.0\" refY=\"4.0\"path id=\"ProcessOnPath1086\" d=\"M0 4.0A4.0 4.0 0 0 1 4.0 0A4.0 4.0 0 1 1 0 4.0\" stroke=\"#323232\" stroke-width=\"2.0\" fill=\"#fff\"//marker/defsg id=\"ProcessOnG1002\"path id=\"ProcessOnPath1003\" d=\"M66.47058823529416 287.9411764705881H1029.4705882352946V668.9411764705882H66.47058823529426V287.9411764705881Z\" fill=\"none\"/g id=\"ProcessOnG1004\"g id=\"ProcessOnG1005\" transform=\"matrix(1.0,0.0,0.0,1.0,628.4705882352945,307.9411764705881)\" opacity=\"1.0\"path id=\"ProcessOnPath1006\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L213.0 0.0Q217.0 0.0 217.0 4.0L217.0 64.0Q217.0 68.0 213.0 68.0L4.0 68.0Q0.0 68.0 0.0 64.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1007\" d=\"M0.0 30.0L217.0 30.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1008\" d=\"M0.0 0.0L217.0 0.0L217.0 68.0L0.0 68.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1009\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1010\" fill=\"#323232\" font-size=\"15\" x=\"97.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"Flyweight/text/gg id=\"ProcessOnG1011\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,39.625)\"text id=\"ProcessOnText1012\" fill=\"#323232\" font-size=\"15\" x=\"97.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"operation(extrinsicState)/text/g/gg id=\"ProcessOnG1013\" transform=\"matrix(1.0,0.0,0.0,1.0,283.4705882352941,307.9411764705881)\" opacity=\"1.0\"path id=\"ProcessOnPath1014\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L217.0 0.0Q221.0 0.0 221.0 4.0L221.0 64.0Q221.0 68.0 217.0 68.0L4.0 68.0Q0.0 68.0 0.0 64.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1015\" d=\"M0.0 30.0L221.0 30.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1016\" d=\"M0.0 0.0L221.0 0.0L221.0 68.0L0.0 68.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1017\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1018\" fill=\"#323232\" font-size=\"15\" x=\"99.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"FlyweightFactory/text/gg id=\"ProcessOnG1019\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,39.625)\"text id=\"ProcessOnText1020\" fill=\"#323232\" font-size=\"15\" x=\"99.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"getFlyweight(key)/text/g/gg id=\"ProcessOnG1021\"path id=\"ProcessOnPath1022\" d=\"M522.7753531062566 341.9411764705881L566.4705882352945 341.9411764705881L566.4705882352945 341.9411764705881L613.2345202577947 341.9411764705881\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-start=\"url(#ProcessOnMarker1023)\" marker-end=\"url(#ProcessOnMarker1025)\"//gg id=\"ProcessOnG1027\" transform=\"matrix(1.0,0.0,0.0,1.0,445.47058823529403,473.9411764705881)\" opacity=\"1.0\"path id=\"ProcessOnPath1028\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L232.0 0.0Q236.0 0.0 236.0 4.0L236.0 95.0Q236.0 99.0 232.0 99.0L4.0 99.0Q0.0 99.0 0.0 95.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1029\" d=\"M0.0 30.0L236.0 30.0M0.0 60.0L236.0 60.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1030\" d=\"M0.0 0.0L236.0 0.0L236.0 99.0L0.0 99.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1031\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,5.625)\"text id=\"ProcessOnText1032\" fill=\"#323232\" font-size=\"15\" x=\"107.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"ConcreteFlyweight/text/gg id=\"ProcessOnG1033\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,35.625)\"text id=\"ProcessOnText1034\" fill=\"#323232\" font-size=\"15\" x=\"107.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"operation(extrinsicState)/text/gg id=\"ProcessOnG1035\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,65.625)\"text id=\"ProcessOnText1036\" fill=\"#323232\" font-size=\"15\" x=\"107.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"intrinsicState/text/g/gg id=\"ProcessOnG1037\" transform=\"matrix(1.0,0.0,0.0,1.0,758.9705882352945,473.9411764705881)\" opacity=\"1.0\"path id=\"ProcessOnPath1038\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L246.5 0.0Q250.5 0.0 250.5 4.0L250.5 95.0Q250.5 99.0 246.5 99.0L4.0 99.0Q0.0 99.0 0.0 95.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1039\" d=\"M0.0 38.0L250.5 38.0M0.0 68.0L250.5 68.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/path id=\"ProcessOnPath1040\" d=\"M0.0 0.0L250.5 0.0L250.5 99.0L0.0 99.0Z\" stroke=\"none\" stroke-width=\"0.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1041\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,9.625)\"text id=\"ProcessOnText1042\" fill=\"#323232\" font-size=\"15\" x=\"114.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"UnsharedConcreteFlyweight/text/gg id=\"ProcessOnG1043\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,43.625)\"text id=\"ProcessOnText1044\" fill=\"#323232\" font-size=\"15\" x=\"114.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"operation(extrinsicState)/text/gg id=\"ProcessOnG1045\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,73.625)\"text id=\"ProcessOnText1046\" fill=\"#323232\" font-size=\"15\" x=\"114.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"allState/text/g/gg id=\"ProcessOnG1047\"path id=\"ProcessOnPath1048\" d=\"M563.4705882352944 473.9411764705881L563.4705882352944 424.9411764705881L736.9705882352945 424.9411764705881L736.9705882352945 391.1772444480879\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1049)\"//gg id=\"ProcessOnG1051\"path id=\"ProcessOnPath1052\" d=\"M884.2205882352945 473.9411764705881L884.2205882352945 424.9411764705881L736.9705882352945 424.9411764705881L736.9705882352945 391.1772444480879\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1053)\"//gg id=\"ProcessOnG1055\" transform=\"matrix(1.0,0.0,0.0,1.0,287.4705882352941,578.9411764705882)\" opacity=\"1.0\"path id=\"ProcessOnPath1056\" d=\"M0.0 4.0Q0.0 0.0 4.0 0.0L96.0 0.0Q100.0 0.0 100.0 4.0L100.0 66.0Q100.0 70.0 96.0 70.0L4.0 70.0Q0.0 70.0 0.0 66.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/g id=\"ProcessOnG1057\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,25.625)\"text id=\"ProcessOnText1058\" fill=\"#323232\" font-size=\"15\" x=\"39.0\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"middle\" size=\"15\"Client/text/g/gg id=\"ProcessOnG1059\"path id=\"ProcessOnPath1060\" d=\"M337.47058823529403 578.9411764705882L337.47058823529403 477.4411764705881L337.47058823529403 477.4411764705881L337.47058823529403 391.1772444480879\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1061)\"//gg id=\"ProcessOnG1063\"path id=\"ProcessOnPath1064\" d=\"M387.47058823529403 613.9411764705882L416.47058823529403 613.9411764705882L416.47058823529403 493.9411764705881L430.23452025779426 493.9411764705881\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1065)\"//gg id=\"ProcessOnG1067\"path id=\"ProcessOnPath1068\" d=\"M387.47058823529403 613.9411764705882L719.4705882352945 613.9411764705882L719.4705882352945 496.9411764705881L744.2345202577947 496.9411764705881\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1069)\"//gg id=\"ProcessOnG1071\" transform=\"matrix(1.0,0.0,0.0,1.0,86.47058823529416,402.9411764705881)\" opacity=\"1.0\"path id=\"ProcessOnPath1072\" d=\"M0.0 0.0L205.0 0.0L221.0 16.0L221.0 148.0L0.0 148.0L0.0 0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1073\" d=\"M205.0 0.0L205.0 16.0L221.0 16.0\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"#f5927b\"/path id=\"ProcessOnPath1074\" d=\"M0.0 0.0L205.0 0.0L221.0 16.0L221.0 148.0L0.0 148.0L0.0 0.0Z\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"none\" fill=\"none\"/g id=\"ProcessOnG1075\" transform=\"matrix(1.0,0.0,0.0,1.0,10.0,12.75)\"text id=\"ProcessOnText1076\" fill=\"#323232\" font-size=\"14\" x=\"0.0\" y=\"14.350000000000001\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"14\"if (flyweight[key] exists {/texttext id=\"ProcessOnText1077\" fill=\"#323232\" font-size=\"14\" x=\"0.0\" y=\"31.85\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"14\"    return existing flyweight;/texttext id=\"ProcessOnText1078\" fill=\"#323232\" font-size=\"14\" x=\"0.0\" y=\"49.35\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"14\"} else {/texttext id=\"ProcessOnText1079\" fill=\"#323232\" font-size=\"14\" x=\"0.0\" y=\"66.85\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"14\"    create new flyweight;/texttext id=\"ProcessOnText1080\" fill=\"#323232\" font-size=\"14\" x=\"0.0\" y=\"84.35\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"14\"    add it to pool of flyweight;/texttext id=\"ProcessOnText1081\" fill=\"#323232\" font-size=\"14\" x=\"0.0\" y=\"101.85\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"14\"    return the new flyweight;/texttext id=\"ProcessOnText1082\" fill=\"#323232\" font-size=\"14\" x=\"0.0\" y=\"119.35\" font-family=\"微软雅黑\" font-weight=\"normal\" font-style=\"normal\" text-decoration=\"none\" family=\"微软雅黑\" text-anchor=\"start\" size=\"14\"}/text/g/gg id=\"ProcessOnG1083\"path id=\"ProcessOnPath1084\" d=\"M176.47058823529406 402.9411764705881L177.47058823529406 402.9411764705881L177.47058823529406 358.9411764705881L275.4705882352941 358.9411764705881\" stroke=\"#323232\" stroke-width=\"2.0\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-end=\"url(#ProcessOnMarker1085)\"//g/g/g/svg\r\n{%endraw%}\r\n下面的对象图说明了如何共享flyweight\r\n\r\n\r\n参与者\r\nFlyweight: 描述一个接口，通过这个接口Flyweight可以接受作用于外部状态\r\nConcreteFlyweight: 实现Flyweight接口，并为内部状态增加存储空间。 ConcreteFlyweight对象必须是可共享的，它存储的状态必须是内部的，必须独立于ConcreteFlyweight对象的场景\r\nUnsharedConcreteFlyweight: 并非所有的Flyweight子类都需要被共享，Flyweight对象结构的某些层次，UnsharedConcreteFlyweight对象通常将ConcreteFlyweight对象作为子节点\r\nFlyweightFactory: 创建并管理Flyweight对象；确保合理地共享flyweight\r\nClient: 维持一个对flyweight的引用；计算或存储一个或多个flyweight的外部状态\r\n\r\n 协作\r\nFlyweight执行时需要两种状态——内部的和外部的 内部状态存储于ConcreteFlyweight对象之中；外部状态则由Client对象存储或计算。\r\n用户只能从FlyweightFactory对象中得到ConcreteFlyweight对象 这样才能保证这些对象被适当地共享\r\n\r\n共享的Flyweight越多，存储节约也就越多。\r\n\r\n实现\r\n在使用Flyweight模式时，应该注意以下几点：\r\n删除外部状态。该模式的可用性在很大程度上取决于是否容易识别外部状态并将它从共享对象中删除。如果不同种类的外部状态和共享前对象的数目相同的话，删除外部状态不会降低存储消耗。理想的状况是，外部状态可以由一个单独的对象结构中计算得到，且该结构的存储要求非常小\r\n管理共享对象。因为对象是共享的，所以用户不能直接对它实例化。用户需要通过FlyweightFactory来操纵共享对象。而且若Flyweight对象数量多的话，还会涉及到引用计数和垃圾回收。\r\n\r\n 相关模式\r\nFlyweight模式通常和Composite模式结合起来，用共享叶结点的有向无环图实现一个逻辑上的层次结构。\r\n通常，最好使用Flyweight来实现State和Strategy对象。\r\n\r\nProxy\r\n为其他对象提供一种代理以控制对这个对象的访问。\r\n对一个对象进行访问控制的一个原因是为了在我们确实需要这个对象时，才对它进行创建和初始化。这种策略对于那种创建开销很大而且并不一定能用到的对象很适合。使用Proxy代替真正的对象，并且在需要的时候实例化这个图像的对象。\r\n\r\n 适用性\r\n在需要用比较通用和复杂的对象指针代替简单的指针的时候，使用Proxy模式：\r\n远程代理为一个对象在不同的地址空间提供局部代表\r\n虚代理根据需要创建开销很大的对象\r\n保护代理控制对原始对象的访问，适用于对象应该有不同的访问权限的时候\r\n智能指引取代了简单的指针，在访问对象时会执行一些附加操作，比如：\r\n    对指向实际对象的引用计数，当该对象没有引用时，可以自动释放它\r\n    第一次引用一个持久对象时，将它装入内存\r\n    在访问一个对象前，检查是否已经锁定了它，以确保其他对象不能改变它\r\n\r\n结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"123 71 625 253\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//marker/defspath d=\"M123 71h625v253H123V71z\" fill=\"none\"/path d=\"M378 95q0-4 4-4h109q4 0 4 4v53q0 4-4 4H382q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M378 121h117\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M378 91h117v61H378z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"47.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(388 96.625)\"Subject/texttext fill=\"#323232\" font-size=\"15\" x=\"47.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(388 127.125)\"request()/textpath d=\"M378 241.5q0-4 4-4h109q4 0 4 4v53q0 4-4 4H382q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M378 267.5h117\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M378 237.5h117v61H378z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"47.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(388 243.125)\"Proxy/texttext fill=\"#323232\" font-size=\"15\" x=\"47.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(388 273.625)\"request()/textpath d=\"M436.5 237.5v-70.26393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M143 241.5q0-4 4-4h109q4 0 4 4v53q0 4-4 4H147q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M143 267.5h117\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M143 237.5h117v61H143z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"47.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(153 243.125)\"RealSubject/texttext fill=\"#323232\" font-size=\"15\" x=\"47.5\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(153 273.625)\"request()/textpath d=\"M378 252H275.23606798\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"/path d=\"M201.5 237.5v-42.75h235v-27.51393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#c)\"/path d=\"M551 264h161l16 16v24H551v-40z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M712 264v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M551 264h161l16 16v24H551v-40z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"77.5\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(561 274.625)\"realSubject.request()/textpath d=\"M252 217h160v40H252z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"79\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(252 227.625)\"realSubject/textpath d=\"M484 285h66\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-start=\"url(#d)\"/path d=\"M156 104.75q0-4 4-4h83q4 0 4 4v33.5q0 4-4 4h-83q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"34.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(166 112.125)\"Client/textpath d=\"M247 121.5h115.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#e)\"//svg\r\n{%endraw%}\r\n\r\n参与者\r\nProxy: 保存一个引用使得代理可以访问实体。若RealSubject和Subject的接口相同，Proxy会应用Subject；提供一个与Subject的接口相同的接口，这样代理就可以用来代替实体\r\nSubject: 定义RealSubject和Proxy的共用接口，这样就在任何使用RealSubject的地方都可以使用Proxy\r\nRealSubject: 定义Proxy所代表的实体\r\n\r\n 效果\r\nProxy模式在访问对象时引入了一定程度的间接性。根据代理的类型，附加的间接性有很多种用途：\r\nRemote Proxy 可以隐藏一个对象存在于不同地址空间的事实\r\nVirtual Proxy 可以进行最优化，例如根据要求创建对象\r\nProtection Proxy 允许在访问一个对象时有些附加的任务处理\r\n\r\nProxy模式还可以实现copy-on-write方式的优化。在实现copy-on-write时必须对实体进行引用计数，拷贝代理仅增加引用计数，只有当用户请求修改该实体的操作时，代理才会真正拷贝该对象。\r\n\r\n代码示例\r\n定义一个Graphic接口：\r\n`java\r\npublic interface Graphic {\r\n    void draw();\r\n    void handleMouse();\r\n    void load();\r\n    void save();\r\n    String getExtent();\r\n}\r\n`\r\n\r\nImage 是实现了 Graphic 接口的类\r\n`java\r\npublic class Image implements Graphic {\r\n    @Override\r\n    public void draw() {\r\n    }\r\n    @Override\r\n    public void handleMouse() {\r\n    }\r\n    @Override\r\n    public void load() {\r\n    }\r\n    @Override\r\n    public void save() {\r\n    }\r\n    @Override\r\n    public String getExtent() {\r\n        return null;\r\n    }\r\n}\r\n`\r\n\r\nImageProxy 是对 Image 类的代理类：\r\n`java\r\n/**\r\n ImageProxy 同 Image 有相同的接口\r\n */\r\npublic class ImageProxy implements Graphic{\r\n    /** proxy 中需要保存对 Image 的引用 */\r\n    private Image image;\r\n    private String fileName;\r\n    private String extend;\r\n    private String imageAttr;\r\n    public ImageProxy(String fileName) {\r\n        this.fileName = fileName;\r\n    }\r\n    /** 延时实例化 image 对象 */\r\n    protected Image getImage() {\r\n        if (image == null) {\r\n            image = new Image();\r\n        }\r\n        return image;\r\n    }\r\n    /** 在代理中保存Image的某个属性 */\r\n    @Override\r\n    public String getExtent() {\r\n        if (extend == null) {\r\n            extend = getImage().getExtent();\r\n        }\r\n        return extend;\r\n    }\r\n\r\n    @Override\r\n    public void draw() {\r\n        getImage().draw();\r\n    }\r\n\r\n    @Override\r\n    public void handleMouse() {\r\n        getImage().handleMouse();\r\n    }\r\n\r\n    @Override\r\n    public void load() {\r\n    }\r\n\r\n    @Override\r\n    public void save() {\r\n    }\r\n}\r\n`\r\n\r\n 相关模式\r\nAdapter: 适配器模式为它所适配的对象听了一个不同的接口，而代理提供了与它实体相同的接口。用于访问保护的代理可能会拒绝执行实体会执行的操作，因此它的接口实际上可能只是实体接口的一个子集\r\nDecorator: 装饰者模式为对象添加一个或多个功能，而代理控制对象的访问\r\n\r\n结构型模式总结\r\n结构型模式之间具有相似性，尤其是它们的参与者和协作者之间。\r\n\r\n Adapter 与 Bridge\r\n这两个模式都是给另一个对象提供了一定程度上的间接性，有利于系统的灵活性，都是从自身以外的一个接口向这个对象转发请求。\r\n但是这两种模式的用途不同：\r\nAdapter模式主要是为了解决两个已有接口之间不匹配的问题，不考虑这些接口是怎么实现的，也不考虑它们各自可能会如何演化\r\nBridge模式对抽象接口与它的实现部分进行桥接，虽然它允许你修改实现它的类，它仍然为用户提供一个稳定的接口，Bridge也会在系统演化时适应新的实现\r\n\r\n由于两种模式的不同点，Adapter模式在类设计好后实施，Bridge在设计类之前实施\r\n\r\nComposite、Decorator与Proxy\r\nComposite模式同Decorator模式具有类似的结构图，这说明它们都 基于递归组合来组织可变数目的对象\r\nDecorator旨在使你能够不需要生成子类即可给对象添加职责，避免了静态实现所有功能组合，从而导致子类数量急剧增加。Composite则旨在构造类，使多个相关的独享能够以统一的方式处理，而多重对象可以被当作一个对象来处理，其重点不在于修饰，而在于表示。\r\n",
        "tags": []
    },
    {
        "uri": "/post/DesignPatterns/行为模式",
        "content": "---\r\ntitle: 行为模式\r\ndate: 2017-06-30 11:41:43\r\ntags: [\"设计模式\"]\r\ncategories: [\"设计模式\"]\r\n---\r\n\r\n行为模式设计到算法和对象间职责的分配，不仅描述对象或类的模式，还描述它们这间的通信模式。这些模式刻画了在运行时难以跟踪的复杂控制流。它们将你的注意从控制流转移到对象间的联系方式上来。\r\n行为类模式使用继承机制在类间分派行为。 Template Method 逐步地定义算法，每一步调用一个抽象操作或一个原语操作，子类定义抽象操作以具体实现该算法。Interpreter将一个文法表示为一个类层次，并实现一个解释器作为这些类的实例上的操作。\r\n行为对象模式使用对象复合而不是继承。 一些行为对象描述了一组对等的对象怎么相互协作以完成其中任一个对象都无法单独完成的任务。因此对等对象之间要了解对方，但那会增加它们的耦合度。Mediator在对等对象间引入一个mediator对象以避免出现这种情况，提供了所需的间接性。\r\nChain of Responsibility 提供更松的耦合，通过一条候选对象链隐式的向一个对象发送请求；Observer 模式定义并保持对象间的依赖关系，典型的例子是MVC；Stategy模式将算法封装在对象中，可以方便地指定和改变一个对象所使用的算法；Command模式将请求封装在对象中，这样它就可作为参数来传递，或者其他方式使用；State模式封装了一个对象的状态，使得当这个对象的状态改变时，该对象可以改变它的行为；Vistor封装分布于多个类这间的行为；Iterator抽象了访问和遍历一个集合中的对象的方式。\r\n\r\n传递请求 —— Chain of Responsibility\r\n使多个对象都有机会处理请求，从而避免请求的发送者和接收者这间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\r\n\r\n 适用性\r\n以下情况适用于Responsibility链：\r\n有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定\r\n在不明确指定接收者的情况下，向多个对象中的一个提交一个请求\r\n可处理一个请求的独享集合应被动态指定\r\n\r\n结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"136 41 465 282\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//marker/defspath d=\"M136 41h465v282H136V41z\" fill=\"none\"/path d=\"M317 95q0-4 4-4h137q4 0 4 4v60q0 4-4 4H321q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M317 121h145\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M317 91h145v68H317z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(327 96.625)\"Handler/texttext fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(327 130.625)\"handleRequest()/textpath d=\"M480.5 237.5v-39.25h-91v-24.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M288.75 237.5v-39.25H389.5v-24.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"/path d=\"M156 104.75q0-4 4-4h83q4 0 4 4v33.5q0 4-4 4h-83q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"34.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(166 112.125)\"Client/textpath d=\"M247 121.5h54.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#c)\"/path d=\"M462 114h77V61H430v14.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#d)\"/path d=\"M421 77h160v40H421z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"79\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(421 87.625)\"successor/textpath d=\"M399 241.5q0-4 4-4h155q4 0 4 4V299q0 4-4 4H403q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M399 267.5h163\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M399 237.5h163V303H399z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"70.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(409 243.125)\"ConcreteHandler2/texttext fill=\"#323232\" font-size=\"15\" x=\"70.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(409 275.875)\"handleRequest()/textpath d=\"M208 241.5q0-4 4-4h155q4 0 4 4V299q0 4-4 4H212q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M208 267.5h163\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M208 237.5h163V303H208z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"70.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(218 243.125)\"ConcreteHandler1/texttext fill=\"#323232\" font-size=\"15\" x=\"70.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(218 275.875)\"handleRequest()/text/svg\r\n{%endraw%}\r\n\r\n参与者\r\nHandler: 定义一个处理请求的接口；实现后继（可选）\r\nConcreteHandler: 如果可以处理请求，就处理；否则将该请求转发给它的后继者\r\nClient: 向链上的具体处理者对象提交请求\r\n\r\n 效果\r\n降低耦合度。职责链可简化对象相互连接，它们仅需保持一个指向后继者的引用，而不需保持它所有的候选者的引用\r\n增强了给对象指派职责的灵活性。可以通过在运行时刻对该链进行动态的增加或修改来增加或改变处理一个请求的那些职责。可以将这种机制与静态的特例化处理对象的继承机制结合起来使用。\r\n不保证被接受。 既然一个请求没有明确的接收者，那么就不能保证它一定会被处理。\r\n\r\n实现\r\n下面是责任链模式中要考虑的实现问题：\r\n实现后继者链：\r\n  定义新的链接（通常在Handler中定义，但也可由ConcreteHandlers来定义）\r\n  使用已有的链接。当已有的链接能够支持所需要的链时，完全可以使用这些链\r\n连接后继者。如果没有已有的引用可用，那么我们必须自己引入他们。这种情况下Handler不仅定义该请求的接口，通常也维护后继链接\r\n表示请求。有不同的方式可以表示请求：硬编码、以一个请求码为参数的函数、封装的对象，需要分析具体需求。\r\n\r\n 代码示例\r\nHelpHandler类定义了处理帮助请求的接口，维护一个帮助主题，并保持对帮助处理对象链中它的后继者的引用：\r\n`java\r\npublic class HelpHandler {\r\n\tpublic static int NOHELPTOPIC = -1;\r\n\tprivate HelpHandler successor;\r\n\tprivate int topic;\r\n\r\n\tpublic HelpHandler(HelpHandler successor, int topic) {\r\n\t\tthis.successor = successor;\r\n\t\tthis.topic = topic;\r\n\t}\r\n\r\n\tpublic boolean hasHelp() {\r\n\t\treturn topic != NOHELPTOPIC;\r\n\t}\r\n\r\n\tpublic void handleHelp() {\r\n\t\tSystem.out.println(\"HelpHandler help\");\r\n\t\tif (successor != null) {\r\n\t\t\tsuccessor.handleHelp();\r\n\t\t}\r\n\t}\r\n}\r\n`\r\n\r\n所有的窗口组件都是Widget类的子类。Widget是HelpHandler子类，因为所有的用户界面都可有相关帮助：\r\n`java\r\npublic class Widget extends HelpHandler {\r\n\tpublic Widget(HelpHandler successor, int topic) {\r\n\t\tsuper(successor, topic);\r\n\t}\r\n}\r\n`\r\n\r\nButton是Widget类的子类，Button构造函数有两个参数：对它的窗口组件的引用和自身的帮助主题：\r\n`java\r\npublic class Button extends Widget {\r\n\r\n\tpublic Button(HelpHandler successor, int topic) {\r\n\t\tsuper(successor, topic);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void handleHelp() {\r\n\t\tif (hasHelp()) {\r\n\t\t\tsuper.handleHelp();\r\n\t\t\t// handle button help\r\n\t\t} else {\r\n\t\t\tsuper.handleHelp();\r\n\t\t}\r\n\t}\r\n}\r\n`\r\n\r\nDialog实现了一个类似的策略，只不过它的后继者不是一个窗口组件而是任意的帮助请求处理对象：\r\n`java\r\npublic class Dialog extends  Widget {\r\n\tpublic Dialog(HelpHandler successor, int topic) {\r\n\t\tsuper(successor, topic);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void handleHelp() {\r\n\t\tSystem.out.println(\"Dialog help\");\r\n\t\tif (hasHelp()) {\r\n\t\t\t// handle help\r\n\t\t} else {\r\n\t\t\tsuper.handleHelp();\r\n\t\t}\r\n\t}\r\n}\r\n`\r\n\r\n链的末端是 Application 类的一个实例，当帮助请求传递到这一层时，该应用可以提供一般性信息：\r\n`java\r\npublic class Application extends HelpHandler {\r\n\tpublic Application(int topic) {\r\n\t\tthis(null, 1);\r\n\t}\r\n\tpublic Application(HelpHandler successor, int topic) {\r\n\t\tsuper(successor, topic);\r\n\t}\r\n\t@Override\r\n\tpublic void handleHelp() {\r\n\t\t// show a list of help\r\n\t}\r\n}\r\n`\r\n\r\n我们可用如下方式使用责任链模式：\r\n`java\r\nprivate static int PRINT_TOPIC = 1;\r\nprivate static int PAPERORIENTATIONTOPIC = 2;\r\nprivate static int APPLICATION_TOPIC = 3;\r\npublic static void main(String [] args) {\r\n\tApplication application = new Application(APPLICATION_TOPIC);\r\n\r\n\tDialog dialog = new Dialog(application, PRINT_TOPIC);\r\n\tButton button = new Button(dialog, PAPERORIENTATIONTOPIC);\r\n\tbutton.handleHelp();\r\n}\r\n`\r\n\r\n相关模式\r\n责任链模式常与Composite一起使用。这种情况下，一个构件的父构件可以作为它的后继\r\n\r\n Command\r\n将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消操作\r\n\r\n适用性\r\n以下情况使用Command模式：\r\n抽象出待执行的动作以参数化某对象。\r\n在不同时刻指定、排列和执行请求。\r\n支持取消操作。\r\n支持修改日志。\r\n用构建的原语操作上的高层操作构造一个系统\r\n\r\n 结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"147 79.25 759 257\" width=\"100%\" height=\"100%\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.60952974\" markerHeight=\"10.88817567\" viewBox=\"-2.30476487 -1.59149088 20.60952974 10.88817567\" refX=\"16\" refY=\"3.85259695\"path d=\"M0 3.85259695L8 0l8 3.85259695L8 7.7051939z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"f\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"g\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M147 79.25h759v257H147v-257z\" fill=\"none\"/path d=\"M167 103.25q0-4 4-4h83q4 0 4 4v33.5q0 4-4 4h-83q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"34.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(177 110.625)\"Client/textpath d=\"M232 140.5v88.75h58.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M306 200.5q0-4 4-4h101q4 0 4 4V258q0 4-4 4H310q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M306 226.5h109\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M306 196.5h109V262H306z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"43.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(316 202.125)\"Receiver/texttext fill=\"#323232\" font-size=\"15\" x=\"43.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(316 234.875)\"action()/textpath d=\"M518 103.25q0-4 4-4h155q4 0 4 4v52q0 4-4 4H522q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M518 129.25h163\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M518 99.25h163v60H518z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"70.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(528 104.875)\"Command/texttext fill=\"#323232\" font-size=\"15\" x=\"70.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(528 134.875)\"execute()/textpath d=\"M508.5 230.25q0-4 4-4h174q4 0 4 4v82q0 4-4 4h-174q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M508.5 256.25h182m-182 30h182\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M508.5 226.25h182v90h-182z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"80\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(518.5 231.875)\"ConcreteCommand/texttext fill=\"#323232\" font-size=\"15\" x=\"80\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(518.5 261.875)\"execute()/texttext fill=\"#323232\" font-size=\"15\" x=\"80\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(518.5 291.875)\"state/textpath d=\"M508.5 243h-78.26393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"/path d=\"M387 206h160v40H387z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"79\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(387 216.625)\"receive/textpath d=\"M733 255h137l16 16v31H733v-47z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M870 255v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M733 255h137l16 16v31H733v-47z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"65.5\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(743 269.125)\"receiver.action()/textpath d=\"M331 103.25q0-4 4-4h83q4 0 4 4v33.5q0 4-4 4h-83q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"34.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(341 110.625)\"Invoker/textpath d=\"M440.30476487 120h62.45916715\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-start=\"url(#c)\" marker-end=\"url(#d)\"/path d=\"M599.5 226.25v-51.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#e)\"/path d=\"M195 140.5V301h298.76393202\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-end=\"url(#f)\"/path d=\"M662 272h71\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-start=\"url(#g)\"//svg\r\n{%endraw%}\r\n\r\n参与者\r\nCommand: 声明执行操作的接口\r\nConcreteCommand: 将一个接收者对象绑定于一个动作；调用接收者相应的操作，以实现Execute\r\nClient: 创建一个具体命令对象并设定它的接收者\r\nInvoker: 要求该命令执行这个请求\r\nReceiver: 知道如何实施与执行一个请求相关的操作，任何类可能作为一个接收者\r\n\r\n 协作\r\nClient创建一个ConcreteCommand对象并指定它的Receiver对象\r\n某Invoker对象存储该ConcreteCommand对象\r\n该I女OK而通过调用Command对象的execute操作来提交一个请求，若该命令是可撤销的，ConcreteCommand就在执行execute操作之前存储当前状态以用于取消该命令\r\nConcreteCommand 对象对调用它的Receiver的一些操作以执行该请求\r\n\r\n效果\r\nCommand模式_有如下效果：\r\nCommand模式将调用操作的对象与知道如何实现该操作的对象解耦\r\nCommand是头等的对象，它们可像其他的对象一样被操控和扩展\r\n可将多个命令装配成一个符合命令。一般来说，复合命令是Composite模式的一个实例\r\n新增加Command很容易，无需改变已有的类\r\n\r\n 实现\r\n实现Command模式时需要考虑如下问题：\r\n一个命令对象应达到何种程度。命令对象的能力可大可小，一个极端是它仅能确定一个接收者和执行该请求的动作；另一个极端是它能自己实现所有功能，根本不需要额外的接收者对象。\r\n支持取消和重做。为了达到支持取消和重做的功能，ConcreteCommand类需要存储额外的状态信息：\r\n    接收者对象，它真正执行处理该请求的各种操作\r\n    如果处理请求的操作会改变接收者对象的某些值，那么这些值也必须先存储起来。接收者还必须提供一些操作，以使该命令可以将接收者恢复到它先前的状态\r\n    若应用支持取消操作，那么需要存储一个已被执行命令的历史列表，该列表的最大长度决定了取消和重做的次数。\r\n    有时可能不得不将一个可撤销的命令在它可以被放入历史列表中之前先拷贝下来，这是因为执行原来的请求的命令对象将在撤销后执行其他请求，例如删除操作\r\n避免取消操作过程中的错误积累。需要保证处理对象取消过程的原子性\r\n\r\n代码\r\n首先定义一个抽象的Command 类\r\n`java\r\npublic abstract class Command {\r\n    public abstract void execute();\r\n}\r\n`\r\n\r\nOpenCommand 打开一个名字由用户指定的文档：\r\n`java\r\n\r\npublic class OpenCommand extends Command {\r\n\r\n    private Application application;\r\n    String response;\r\n\r\n    public OpenCommand(Application application) {\r\n        this.application = application;\r\n    }\r\n\r\n    private String askUser() {\r\n        return \"answer\";\r\n    }\r\n\r\n    @Override\r\n    public void execute() {\r\n        String name = askUser();\r\n        // do some thing\r\n    }\r\n}\r\n`\r\n\r\nMacroCommand 管理一个子命令序列，提供了增加和删除子命令的操作：\r\n`java\r\npublic class MacroCommand extends Command {\r\n\r\n    private ListCommand cmds;\r\n\r\n    public void remove(Command c) {\r\n        cmds.remove(c);\r\n    }\r\n\r\n    public void add(Command c) {\r\n        cmds.add(c);\r\n    }\r\n\r\n    @Override\r\n    public void execute() {\r\n        for (Command command: cmds) {\r\n            command.execute();\r\n        }\r\n    }\r\n}\r\n`\r\n\r\n 相关模式\r\nMemento模式可以用来保持某个状态，命令用这一状态来取消它的效果\r\n\r\nInterpreter\r\n给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\r\n如果一种特定类型的问题发生的频率足够高，那么值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，通过解释这些句子来解决问题，比如正则表达式。\r\n解释器模式描述了如何为简单的语言定义一个文法，如何为简单语言定义一个文法，如何在语言中表示一个句子，以及如何解释这些句子。解释器模式使用类来表示每一条文法规则。\r\n\r\n 适用性\r\n当有一个语言需要解释执行，并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：\r\n该文法简单对于复杂的文法，文法的类层次变得庞大而无法管理。\r\n**解释器通常不是通过直接解释语法分析树实现的，而是首先将它们转换成另一种形式，比如状态机。\r\n\r\n结构\r\n{%raw%}\r\n(svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"129 78.25 548 327.25\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//marker/defspath d=\"M129 78.25h548V405.5H129V78.25z\" fill=\"none\"/path d=\"M343 172q0-4 4-4h182q4 0 4 4v60q0 4-4 4H347q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M343 206h190\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M343 168h190v68H343z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(353 177.625)\"AbstractExpression/texttext fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(353 211.625)\"interpret(context)/textpath d=\"M449.5 321.5q0-4 4-4H653q4 0 4 4v60q0 4-4 4H453.5q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M449.5 355.5H657\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M449.5 317.5H657v68H449.5z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"92.75\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(459.5 327.125)\"NonterminalExpression/texttext fill=\"#323232\" font-size=\"15\" x=\"92.75\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(459.5 361.125)\"interpret(context)/textpath d=\"M553.25 317.5v-40.75H438v-25.51393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M240 321.5q0-4 4-4h166.5q4 0 4 4v60q0 4-4 4H244q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M240 355.5h174.5\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M240 317.5h174.5v68H240z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"76.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(250 327.125)\"TerminalExpression/texttext fill=\"#323232\" font-size=\"15\" x=\"76.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(250 361.125)\"interpret(context)/textpath d=\"M327.25 317.5v-40.75H438v-25.51393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"/path d=\"M149 182.75q0-4 4-4h83q4 0 4 4v33.5q0 4-4 4h-83q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"34.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(159 190.125)\"Client/textpath d=\"M240 199.5h51.5v-.19736842h36.26393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#c)\"/path d=\"M343 102.25q0-4 4-4h83q4 0 4 4v33.5q0 4-4 4h-83q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"34.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(353 109.625)\"Context/textpath d=\"M194.5 178.75V119h133.26393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#d)\"//svg)\r\n{%endraw%}\r\n\r\n参与者\r\nAbstractExpression(抽象表达式): 声明一个抽象的解释操作，这个接口为抽象语法树中所有的节点所共享\r\nTerminalExpression(终结符表达式): 实现与文法中的终结符相关联的解释操作；一个句子中的每个终结符需要该类的一个实例\r\nNonterminalExpression(非终结符表达式)\r\nContext: 包含解释器之外的一些全局信息\r\nClient: 构建表示该文法定义的语言中一个特定的句子的抽象语法树。该抽象语法树由NonterminalExpression和TerminalExpression的实例装配而成\r\n\r\n 协作\r\nClient构建一个句子，由NonterminalExpression和TerminalExpression实例构建的一个语法树，然后初始化上下文并调用解释操作\r\n每一非终结符表达式节点定义相应子表达式的解释操作，而各终结符表达式的解释操作构成递归的基础\r\n每一节点的解释操作用上下文阿里存储和访问解释器的状态\r\n\r\n效果\r\n优点：\r\n易于改变和扩展文法。\r\n易于实现文法。\r\n增加了新的解释表达式的方式。\r\n\r\n缺点：\r\n复杂的文法难以维护。当包含许多规则的文法时，为每一条规则定义一个类，将会使项目难以管理和维护。可以用其他模式来缓解这一问题，或者其他的技术，如语法分析程序或编译器生成器。\r\n\r\n 实现\r\n创建抽象语法树。解释器模式不小腹语法分析，抽象语法树可用一个表驱动的语法分析程序来生成，也可以用手写（递归下降法）语法分析程序创建，或直接由Client提供\r\n定义解释操作。如果经常要创建一种新的解释器，那么Visitor模式将解释放入一个独立的访问者对象更好一些。比如类型检测、优化、代码生成等等。恰当的做法是使用一个访问者以避免在每一个类都定义这些操作\r\n与Flyweight模式共享终结符。\r\n\r\n迭代器\r\n提供一种顺序访问一个聚合对象中各个元素，而又不需要暴露该对象的内部表示的方法。\r\n\r\n 适用性\r\n迭代器模式可用来：\r\n访问一个聚合对象的内容而无需暴露它的内部表示\r\n支持对聚合对象的多种遍历\r\n为遍历不同的聚合结构提供一个统一的接口\r\n\r\n结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"3.75 71 552.75 337\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"f\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"g\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M3.75 71H556.5v337H3.75V71z\" fill=\"none\"/path d=\"M378 95q0-4 4-4h147q4 0 4 4v111q0 4-4 4H382q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M378 121h155\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M378 91h155v119H378z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" transform=\"translate(388 96.625)\"Iterator/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\"text y=\"15.375\" transform=\"translate(388 128)\"first()/texttext y=\"34.125\" transform=\"translate(388 128)\"next()/texttext y=\"52.875\" transform=\"translate(388 128)\"isDone()/texttext y=\"71.625\" transform=\"translate(388 128)\"currentItem()/text/gpath d=\"M455.5 249.25v-24.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M42 120.5q0-4 4-4h146q4 0 4 4v60q0 4-4 4H46q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M42 146.5h154\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M42 116.5h154v68H42z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"66\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(52 122.125)\"Aggregate/texttext fill=\"#323232\" font-size=\"15\" x=\"66\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(52 156.125)\"createIterator()/textpath d=\"M238 133.75q0-4 4-4h83q4 0 4 4v33.5q0 4-4 4h-83q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"34.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(248 141.125)\"Client/textpath d=\"M329 150.5h33.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"/path d=\"M238 150.5h-26.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#c)\"/path d=\"M23.75 241q0-4 4-4h182.5q4 0 4 4v68q0 4-4 4H27.75q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M23.75 275h190.5\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M23.75 237h190.5v76H23.75z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"84.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(33.75 246.625)\"ConcreteAggregate/texttext fill=\"#323232\" font-size=\"15\" x=\"84.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(33.75 284.625)\"createIterator()/textpath d=\"M374.5 253.25q0-4 4-4h154q4 0 4 4v43.5q0 4-4 4h-154q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"70\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(384.5 265.625)\"ConcreteIterator/textpath d=\"M375 265H229.23606798\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#d)\"/path d=\"M214 288h145.76393202\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-end=\"url(#e)\"/path d=\"M23.75 351h269l16 16v21h-285v-37z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M292.75 351v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M23.75 351h269l16 16v21h-285v-37z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"131.5\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(33.75 360.125)\"return new ConcreteIterator(this);/textpath d=\"M197.5 307v41\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-start=\"url(#f)\"/path d=\"M119 237v-37.26393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#g)\"//svg\r\n{%endraw%}\r\n\r\n参与者\r\nIterator: 迭代器定义访问和遍历元素的接口\r\nConcreteIterator: 具体迭代器实现接口；对该聚合遍历时跟踪当前位置\r\nAggregate: 聚合定义创建相应迭代器对象的接口\r\nConcreteAggregate: 具体聚合实现创建相应迭代器接口，该操作返回一个适当的ConcretIterator实例\r\n\r\n 效果\r\n迭代器模式有三个重要作用：\r\n它支持以不同的方式遍历一个集合。\r\n迭代器简化了聚合的接口。\r\n在同一个聚合上可以有多个遍历。每个迭代器保持它自己的遍历状态，可以同时进行多个遍历\r\n\r\n实现\r\n迭代器的实现上有许多变化和选择：\r\n谁控制迭代。迭代器根据是客户控制还是迭代器控制迭代可以分为：外部迭代器和内部迭代器。使用外部迭代器的客户必须主动推进遍历的步伐，显式地向迭代器请求下一个元素；而内部迭代器只需要向其提交一个待执行的操作，迭代器会对聚合中的每一个元素实施该操作\r\n谁定义遍历算法。有两种定义遍历算法的地方：聚合本身和迭代器。迭代器负责遍历算法，那么将易于在相同的聚合上使用不同的迭代算法，同时也易于在不同的聚合上重用相同的算法。但是遍历算法可能需要访问私有变量，破坏聚合的封装性\r\n迭代器健壮程度如何。一个健壮的迭代器要保证插入和删除操不会干扰遍历，且不需拷贝该聚合。大多数方法需要向这个聚合注册该迭代器，当插入或删除，该聚合 要么调整迭代器的内部状态，要么在内部的维护额外的信息以保证正确的遍历\r\n迭代器可有特权访问。迭代器可被看为创建它的聚合的一个扩展，同聚合紧密耦合。\r\n复合对象的迭代推荐使用内部迭代器。在Composite模式中的那些递归聚合结构上，外部迭代器难以实现。因为在该结构中不同对象处于嵌套聚合的多个不同层次，需要跟踪当前的对象必须存储一条纵贯该Composite的路径。\r\n空迭代器。空迭代器是一个退化的迭代器，有助于处理边界条件。\r\n\r\n 代码示例\r\n列表和迭代器接口\r\n`java\r\npublic class ListT {\r\n\tprivate ArrayListT list;\r\n\tprivate int size;\r\n\tList(int size) {\r\n\t\tlist = new ArrayList();\r\n\t\tthis.size = size;\r\n\t}\r\n\tint count() {\r\n\t\treturn this.size;\r\n\t}\r\n  int size() {\r\n    return this.list.size();\r\n  }\r\n\tT get(int index) {\r\n\t\treturn list.get(index);\r\n\t}\r\n\tvoid add(T item) {\r\n\t\tif (list.size() = this.size) { return ;}\r\n\t\tlist.add(item);\r\n\t}\r\n\t// ...\r\n}\r\n`\r\n迭代器接口：\r\n`java\r\npublic interface IteratorT {\r\n\tvoid first();\r\n\tvoid next();\r\n\tboolean isDone();\r\n\tT currentItem();\r\n}\r\n`\r\n迭代器子类实现：\r\n`java\r\npublic class ListIteratorT implements IteratorT {\r\n\tprivate ListT list;\r\n    private int current;\r\n\r\n\tListIterator(ListT aList) {\r\n\t\tthis.list = aList;\r\n\t\tcurrent = 0;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void first() {\r\n\t\tcurrent = 0;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void next() {\r\n\t\tcurrent ++;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean isDone() {\r\n\t\treturn current = list.size();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic T currentItem() {\r\n\t\tif (isDone()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn list.get(current);\r\n\t}\r\n}\r\n`\r\n使用迭代器：\r\n`java\r\nListString names = new List(4);\r\nnames.add(\"First name\");\r\nnames.add(\"Last name\");\r\n\r\nIteratorString iterator = new ListIterator(names);\r\nfor (iterator.first(); !iterator.isDone(); iterator.next()) {\r\n\tSystem.out.println(iterator.currentItem());\r\n}\r\n`\r\n\r\n避免限定于一种特定的列表实现，我们可以在List类中增加如下方法，这样继承List的类可以返回合适的迭代器：\r\n`java\r\nIteratorT createIterator() {\r\n  return new ListIteratorT(this);\r\n}\r\n`\r\n\r\n使用内部的ListIterator，其方式是通过迭代器控制迭代，并对列表中的每一个元素施行同一个操作：\r\n首先定义一个函数式接口：\r\n`java\r\n@FunctionalInterface\r\npublic interface ProcessInterfaceT {\r\n\tpublic void doWork(T t);\r\n}\r\n`\r\n定义一个迭代器：\r\n`java\r\npublic class ListTraverserT {\r\n\tprivate ListIteratorT iterator;\r\n\tListTraverser(ListT aList) {\r\n\t\tthis.iterator = new ListIterator(aList);\r\n\t}\r\n\tpublic void processItem(ProcessInterfaceT process) {\r\n\t\tfor (iterator.first();!iterator.isDone();iterator.next()) {\r\n\t\t\tprocess.doWork(iterator.currentItem());\r\n\t\t}\r\n\t}\r\n}\r\n`\r\n使用方式如下：\r\n`java\r\nListTraverserString traverser = new ListTraverser(names);\r\ntraverser.processItem((item)- System.out.println(\"name:\" + item));\r\n`\r\n\r\n相关模式\r\nComposite：迭代器长被应用到对象复合这样的递归结构上\r\nFactory Method：多态迭代器依靠Factory Method来实例化适当的迭代器子类\r\nMemento：常与迭代器模式一起使用。迭代器可使用Memento捕获一个迭代状态，迭代器在其内部存储Memento实例。\r\n\r\n 解耦复杂通信关系对象——Mediator\r\n用一个中介对象来封装一系列的对象交互，中介者使各个对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\r\n面向对象设计鼓励将行为分布到各个对象中，这种分布可能会导致对象间有许多链接。最坏的情况下，每个对象都知道其他所有对象，使得对象间的相互连接大大增加，导致维护困难。我们可以通过将集体行为封装到一个单独的中介者对象来避免这个问题。中介者对象负责控制和协调一组对象间的交互，使得组中的对象不再相互显示引用，降低耦合性。\r\n\r\n适用性\r\n以下情况适用于中介者模式：\r\n一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解\r\n一个对象引用其它很多对象并且直接与这些对象通信，导致难以复用\r\n想定制一个分布在多个类中的行为，而又不想生成太多子类。\r\n\r\n 结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"177.25 91 661.75 259\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"f\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//marker/defspath d=\"M177.25 91H839v259H177.25V91z\" fill=\"none\"/path d=\"M238 133.75q0-4 4-4h83q4 0 4 4v33.5q0 4-4 4h-83q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"34.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(248 141.125)\"Mediator/textpath d=\"M552 131.5q0-4 4-4h121q4 0 4 4v38q0 4-4 4H556q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"53.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(562 141.125)\"Colleague/textpath d=\"M197.25 256.125q0-4 4-4h164.5q4 0 4 4v36.75q0 4-4 4h-164.5q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"75.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(207.25 265.125)\"ConcreteMediator/textpath d=\"M630 255.5q0-4 4-4h181q4 0 4 4v41q0 4-4 4H634q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"83.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(640 266.625)\"ConcreteColleague2/textpath d=\"M426 255.5q0-4 4-4h171q4 0 4 4v38q0 4-4 4H430q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"78.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(436 265.125)\"ConcreteColleague1/textpath d=\"M515.5 251.5v-39h101v-23.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M724.5 251.5v-39h-108v-23.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"/path d=\"M283.5 252.125v-65.63893202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#c)\"/path d=\"M369.75 274.5h41.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#d)\"/path d=\"M351 296v34h314v-14.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#e)\"/path d=\"M552 150.5H344.23606798\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#f)\"/path d=\"M430.5 111h160v40h-160z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"79\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(430.5 121.625)\"mediator/text/svg\r\n{%endraw%}\r\n\r\n参与者\r\nMediator(中介者): 中介者定义一个接口用于与各同事对象通信\r\nConcreteMediator(具体中介者): 具体中介者通过协调各同事对象实现协作行为；了解并维护它的各个同事\r\nColleague(同事类): 每一个同事类都知道它的中介者对象；每一个同事对象在需与其他同事通信时，与它的中介者通信\r\n\r\n 效果\r\n中介者模式有忙不优点和缺点：\r\n减少了子类生成。Mediator将原本分布于多个对象间的行为集中在一起，改变这些行为只需生成Meditator的子类即可\r\n它将各Colleague解耦。\r\n它简化了对象协议。一对多的关系更易于理解、维护和扩展。\r\n它对对象如何协作进行了抽象。将中介作为一个独立的概念并将其封装在一个对象中，使你将注意从对象各自的行为转移到它们的交互上来。\r\n它使控制集中化\r\n\r\n实现\r\n当一个感兴趣的事发生时，Colleague必须与其Mediator通信。\r\n一种实现方法是使用Observer模式，将Mediator实现为一个Observer，各Colleagues作为Subject；另一种方式是在Mediator中定义一个特殊的通知接口，各Colleagues在通信时直接调用该接口，并将自身作为参数传递给Mediator。\r\n\r\n 代码示例\r\n抽象类DialogDirector定义了一个接口:\r\n`java\r\npublic abstract class DialogDirector {\r\n\tpublic abstract void showDialog();\r\n\tpublic abstract void widgetChanged(Widget widget);\r\n\tprotected abstract void createWidgets();\r\n}\r\n`\r\n\r\nWidget是窗口组件的抽象基类：\r\n`java\r\npublic class Widget {\r\n\tprivate DialogDirector director;\r\n\tpublic Widget(DialogDirector d) {\r\n\t\tthis.director = d;\r\n\t}\r\n  // 调用中介者的 widgetChanged() 方法，通知中介者某个事件发生了\r\n\tpublic void changed() {\r\n\t\tthis.director.widgetChanged(this);\r\n\t}\r\n}\r\n`\r\n\r\nListBox, EntryField 和 Button是 Widget 的子类：\r\n`java\r\npublic class ListBox extends Widget {\r\n\tpublic ListBox(DialogDirector d) {\r\n\t\tsuper(d);\r\n\t}\r\n}\r\n\r\npublic class EntryField extends Widget {\r\n\tpublic EntryField(DialogDirector d) {\r\n\t\tsuper(d);\r\n\t}\r\n\t// other method ...\r\n}\r\n\r\npublic class Button extends Widget {\r\n\tpublic Button(DialogDirector d) {\r\n\t\tsuper(d);\r\n\t}\r\n\tvoid handleMouse () {\r\n\t\t//...\r\n\t\t// 调用通信接口\r\n\t\tchanged();\r\n\t}\r\n}\r\n`\r\n\r\nFontDialogDirectator 类在对话框中的窗口组件间进行中介：\r\n`java\r\npublic class FontDialogDirectator extends DialogDirector {\r\n\r\n\tprivate Button ok;\r\n\tprivate Button cancel;\r\n\tprivate ListBox fontList;\r\n\tprivate EntryField fontName;\r\n\t@Override\r\n\tpublic void showDialog() {\r\n\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void widgetChanged(Widget widget) {\r\n\t\tif (widget == ok) {\r\n\t\t\t// apply something change\r\n\t\t} else if (widget == cancel) {\r\n\t\t\t// apply cancel widget\r\n\t\t} else if (widget == fontList) {\r\n    } else if (widget == fontName) { \t}\r\n\r\n\t}\r\n\t@Override\r\n\tprotected void createWidgets() {\r\n\t\tok = new Button(this);\r\n\t\tcancel = new Button(this);\r\n\t\tfontList = new ListBox(this);\r\n\t\tfontName = new EntryField(this);\r\n\t}\r\n}\r\n`\r\n\r\nwidgetChanged方法的复杂度随对话框的复杂度增加而增加。大对话框不受欢迎的一个重要原因是中介者的复杂性可能会抵消该模式在其他方面带来的好处。\r\n\r\n相关模式\r\nFacade与中介者的不同之处在于它是对一个对象子系统进行抽象，从而提供一个更为方便的接口，它的协议是单向的，而Mediator的协议是多向的。\r\nColeague可使用Observer模式与Mediator通信。\r\n\r\n\r\n 记录对象内部状态——Memento\r\n在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。\r\n一个备忘录是一个对象，它存储了另一个对象在某个瞬间的内部状态，而后者成为备忘录的原发器。当需要设置原发器的检查点时，取消操作机制会向原发器请求一个备忘录。原发器用描述当前状态的信息初始化该备忘录。只有原发器可以向备忘录中存取信息，备忘录对其他对象不可见。\r\n\r\n适用性\r\n一下情况使用备忘录：\r\n必须保存一个对象在某一个时刻的状态，这样以后需要它时才能恢复到先前的状态。\r\n如果一个用接口来让其它对象直接得到这些状态，将会暴露对象在实现细节并破坏对象的封装性。\r\n\r\n 结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"125 52.30769231 657.30769231 148.79458042\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.60952974\" markerHeight=\"10.88817567\" viewBox=\"-2.30476487 -1.59149088 20.60952974 10.88817567\" refX=\"16\" refY=\"3.85259695\"path d=\"M0 3.85259695L8 0l8 3.85259695L8 7.7051939z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//marker/defspath d=\"M125 52.3076923h657.3076923v148.79458043H125V52.3076923z\" fill=\"none\"/path d=\"M145 87.10227273q0-4 4-4h237.76923077q4 0 4 4v90q0 4-4 4H149q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M145 113.10227273h245.76923077m-245.76923077 38h245.76923077\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M145 83.10227273h245.76923077v98H145z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"111.88461538\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(155 88.72727273)\"Originator/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"111.88461538\" y=\"15.375\" transform=\"translate(155 113.35227273)\"setMemento(Memento m)/texttext x=\"111.88461538\" y=\"34.125\" transform=\"translate(155 113.35227273)\"createMemento()/text/gtext fill=\"#323232\" font-size=\"15\" x=\"111.88461538\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(155 156.72727273)\"state/textpath d=\"M450.45454545 87.10227273q0-4 4-4h97.90909091q4 0 4 4v90q0 4-4 4h-97.9090909q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M450.45454545 113.10227273h105.90909091m-105.9090909 38h105.9090909\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M450.45454545 83.10227273h105.90909091v98h-105.9090909z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"41.95454545\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(460.45454545 88.72727273)\"Memento/textg fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"41.95454545\" y=\"15.375\" transform=\"translate(460.45454545 113.35227273)\"getState()/texttext x=\"41.95454545\" y=\"34.125\" transform=\"translate(460.45454545 113.35227273)\"setState()/text/gtext fill=\"#323232\" font-size=\"15\" x=\"41.95454545\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(460.45454545 156.72727273)\"state/textpath d=\"M653.42657343 88.24414438q0-4 4-4H758.3076923q4 0 4 4v34.20805181q0 4-4 4H657.42657343q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"43.44055944\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(663.42657343 95.97317029)\"Caretaker/textpath d=\"M390.76923077 105.45454545h44.90379217\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M635.12180856 105.34817029h-30.33159877v.0364451h-33.40029566\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-start=\"url(#b)\" marker-end=\"url(#c)\"/path d=\"M535.38461538 72.3076923h160v40h-160z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"79\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(535.38461538 82.9326923)\"memento/text/svg\r\n{%endraw%}\r\n\r\n参与者\r\nMemento(备忘录): 备忘录存储原发器对象的内部状态；防止原发器以外的其他对象访问备忘录。备忘录有两个接口：窄接口的宽接口。管理者(caretaker)只能看到窄接口，将备忘录传递给其他对象。原发器能够看到宽接口，允许它访问先前状态所需的所有数据。\r\nOriginator(原发器): 原发器创建一个备忘录，用心记录当前时刻它的内部状态；使用备忘录恢复内部状态。\r\nCaretaker(负责人): 负责保存好备忘录的内容进行扣件或检查\r\n\r\n 效果\r\n备忘录模式有以下一些效果：\r\n保持封装边界。 使用备忘录可以避免暴露一些只应由原发器管理却又必须存储在原发器之外的信息。\r\n它简化了原了器。 在其他保持封装性的设计中，Originator负责保持客户请求的内部状态版本。\r\n使用备忘录可能代价很高。 如果原发器在生成备忘录时必须拷贝并存储大量的信息，或者客户非常频繁地创建备忘录和恢复原发器状态，可能会导致非常大的开销。\r\n定义窄接口和宽接口。 在一些语言中可能 难以保证只有原发器可访问备忘录的状态\r\n维护备忘录的潜在代价。 管理器负责删除它所维护的备忘录。然而，管理器不知道备忘录中有多少状态，因此一个本来很小的管理器，可能 会产生大量的存储开销。\r\n\r\n实现\r\n当实现备忘录模式时应该考虑以下两个问题：\r\n语言支持。 备忘录有两个接口：一个为原发器使用的宽接口；一个为其他对象使用的窄接口。Java中对此支持并不好，只能采用protected来支持宽接口。\r\n存储增量式改变。如果备忘录的创建及其返回的顺序是可预测的，备忘录可以仅存储原发器内部状态的增量改变。\r\n\r\n 代码示例\r\n我们使用MoveCommand命令对象来执行/取消一个图形对象从一个位置到另一个位置的移动变换。命令对象存储它的目标、移动距离和一个ConstraintSolverMemento的实例，它是一个包含约束解释器状态的备忘录。\r\n`Java\r\n/**\r\n ConstraintSolver 用操作将自身状态存储在外部的一个ConstraintSolverMemento实例中。\r\n */\r\npublic class ConstraintSolver {\r\n\r\n\tprivate ConstraintSolver(){}\r\n\tpublic void solve() {}\r\n\tpublic void addConstraint (Graphic s, Graphic e) {}\r\n\tpublic void removeConstraint(Graphic s, Graphic e) {}\r\n\tpublic ConstraintSolverMemento createMemento() {\r\n\t\treturn new ConstraintSolverMemento();\r\n\t}\r\n\tpublic void setMemento(ConstraintSolverMemento memento) {}\r\n\r\n\tpublic static ConstraintSolver getInstance() {\r\n\t\treturn new ConstraintSolver();\r\n\t}\r\n}\r\n\r\n/**\r\n execute 在移动图形前先获取一个 ConstraintSolverMemento 备忘录，Unexecute 先将图形移回，再将约束解释器设回原来的状态，并让约束解释器解释这些约束。\r\n */\r\npublic class MoveCommand {\r\n\r\n\tprivate ConstraintSolverMemento state;\r\n\tprivate Point delta;\r\n\tprivate Graphic target;\r\n\tpublic MoveCommand(Graphic t, Point delta) {\r\n\t\tthis.delta = delta;\r\n\t\tthis.target = t;\r\n\t}\r\n\r\n\tvoid execute () {\r\n\t\tConstraintSolver solver = ConstraintSolver.getInstance();\r\n\t\t// 存储当前的状态\r\n\t\tstate = solver.createMemento();\r\n\t\ttarget.move(delta);\r\n\t\tsolver.solve();\r\n\t}\r\n\tvoid unexecute() {\r\n\t\tConstraintSolver solver = ConstraintSolver.getInstance();\r\n\t\ttarget.move(delta);\r\n\t\tsolver.setMemento(state);\r\n\t\t// 重新建立约束\r\n\t\tsolver.solve();\r\n\t}\r\n}\r\n\r\npublic class ConstraintSolverMemento {\r\n\t// private constraint solver state\r\n}\r\n`\r\n\r\n相关模式\r\nCommand: 命令可使用备忘录来为可撤消的操作维护状态\r\nIterator: 备忘录可用于迭代\r\n  `Java\r\n  CollectionItemType aCollection;\r\n  IteratioinState state;\r\n  state = aCollection.createInitialState();\r\n  while (!aCollection.isDone(state)) {\r\n    aCollection.currentItem(state).process();\r\n    aCollection.next();\r\n  }\r\n  `\r\n\r\n 多个对象依赖于一个对象的状态 —— Observer\r\n定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。\r\n将一个系统分割成一系列相互协作的类有一个常见的副作用：需要维护它们的一致性。我们不希望为了维持一致性而使各类紧密耦合，因为这样降低了它们的可用性。\r\n\r\n适用性\r\n以下情况下可以使用观察者模式：\r\n当一个抽象模型有两个方面，其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。\r\n当一个对象的改变需要同时改变其它对象，而不知道具体有多少对象有待改变。\r\n当一个对象必须通知其它对象，而它又不能假定其它对象是谁。\r\n\r\n 结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"122.5 31 736.5 380.10227273\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"f\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M122.5 31H859v380.10227273H122.5V31z\" fill=\"none\"/path d=\"M142.5 289.10227273q0-4 4-4h151q4 0 4 4v98q0 4-4 4h-151q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M142.5 315.10227273h159m-159 40h159\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M142.5 285.10227273h159v106h-159z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"68.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(152.5 290.72727273)\"ConcreteSubject/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"68.5\" y=\"15.375\" transform=\"translate(152.5 315.35227273)\"setState()/texttext x=\"68.5\" y=\"34.125\" transform=\"translate(152.5 315.35227273)\"getState()/text/gtext fill=\"#323232\" font-size=\"15\" x=\"68.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(152.5 364.72727273)\"subjectState/textpath d=\"M446.0909091 260.10227273q0-4 4-4h160.8181818q4 0 4 4v90q0 4-4 4H450.0909091q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M446.0909091 294.10227273h168.8181818m-168.8181818 30h168.8181818\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M446.0909091 256.10227273h168.8181818v98H446.0909091z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"73.40909091\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(456.0909091 265.72727273)\"ConcreteObserver/texttext fill=\"#323232\" font-size=\"15\" x=\"73.40909091\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(456.0909091 299.72727273)\"update()/texttext fill=\"#323232\" font-size=\"15\" x=\"73.40909091\" y=\"15.375\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(456.0909091 329.72727273)\"observerState/textpath d=\"M144 69q0-4 4-4h148q4 0 4 4v97q0 4-4 4H148q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M144 95h156\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M144 65h156v105H144z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"67\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(154 70.625)\"Subject/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"67\" y=\"15.375\" transform=\"translate(154 104.375)\"attach(Observer)/texttext x=\"67\" y=\"34.125\" transform=\"translate(154 104.375)\"detach(Observer)/texttext x=\"67\" y=\"52.875\" transform=\"translate(154 104.375)\"notify()/text/gpath d=\"M478.25 69q0-4 4-4h96.5q4 0 4 4v49q0 4-4 4h-96.5q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M478.25 95h104.5\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M478.25 65h104.5v57h-104.5z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"41.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(488.25 70.625)\"Observer/texttext fill=\"#323232\" font-size=\"15\" x=\"41.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(488.25 99.125)\"update()/textpath d=\"M222 285.10227273v-99.86620475\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M530.5 256.10227273V137.23606798\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"/path d=\"M300 84h163.76393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#c)\"/path d=\"M261 51h160v40H261z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"79\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(261 61.625)\"observers/textpath d=\"M446.0909091 305.10227273h-72.54545455V305h-57.30938657\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#d)\"/path d=\"M323.5 271h160v40h-160z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"79\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(323.5 281.625)\"subject/textpath d=\"M675 280h148l16 16v42H675v-58z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M823 280v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M675 280h148l16 16v42H675v-58z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/g fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\"text y=\"15.375\" transform=\"translate(685 290.25)\"observerState=/texttext y=\"34.125\" transform=\"translate(685 290.25)\"subject.getState()/text/gpath d=\"M604.45454545 308H675\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-start=\"url(#e)\"/path d=\"M327.5 139H479l16 16v57H327.5v-73z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M479 139v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M327.5 139H479l16 16v57H327.5v-73z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/g fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\"text y=\"15.375\" transform=\"translate(337.5 147.375)\"for o in observers {/texttext y=\"34.125\" transform=\"translate(337.5 147.375)\"o.update();/texttext y=\"52.875\" transform=\"translate(337.5 147.375)\"}/text/gpath d=\"M274.72727273 155H327.5\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-start=\"url(#f)\"//svg\r\n{%endraw%}\r\n\r\n参与者\r\nSubject: 目标知道它的观察者，可以有任意多个观察者观察同一目标；提供注册和删除观察者对象的接口\r\nObserver: 为那些在目标发生改变时需获得通知的对象定义一个更新接口\r\nConcreteSubject: 将有关状态存入各ConcreteObserver对象；当它的状态发生改变时，向它的各个观察者发出通知。\r\nConcreteObserver: 维护一个指向ConcreteSubject对象的引用；存储有关状态，这些状态应与目标的状态保持一致；实现Observer的更新接口以使自身状态与目标的状态保持一致。\r\n\r\n 效果\r\nObserver模式允许我们独立地改变目标和观察者。以下是观察者模式的一些优缺点：\r\n目标和观察者间的抽象耦合。 一个目标仅仅知道它有一系列的观察者，每个都符合抽象的Observer类的简单接口，这样目标和观察者之间的耦合是抽象的和最小的。\r\n支持广播通信。 通知被自动广播给所有已向该目标对象登记的有关对象。\r\n意外的更新。因为一个观察者并不知道其它观察者的存在，它可能对改变目标的最终代价一无所知。在目标上一个看似无害的操作可能会引起一系列对观察者以及依赖于这些观察者的那些对象的更新。此外，如果依赖准则的定义或维护不当，常常会引起错误的更新。\r\n\r\n实现\r\n创建目标到其观察者之间的映射。\r\n观察多个目标。 在某些情况下，一个观察者依赖于多个目标是有意义的。目标对象可以简单地将自己作为update操作的一个参数，让观察者知道应去检查哪一个目标。\r\n谁触发更新。 目标和它的观察者依赖于通知机制来保持一致，但哪一个对象调用notify来触发更新？有两个选择：\r\n    由目标对象的状态设定操作在改变目标对象的状态后生动调用notify。这种方法的优点是客户不需要记住要在目标对象上调用notify，缺点是多个连续的操作会产生多次连续的更新，可能效率较低\r\n    主客户负责在适当的时候调用notify。这样做的优点是客户可以在一系列的状态改变写成后再上次性触发更新，避免了不必要的中间更新，缺点是给客户增加了负担。\r\n对已删除的目标悬挂引用。 一种避免悬挂引用的方法是，当一个目标被删除时，让它通知它的观察者将对该目标的引用复位。\r\n在发出通知前确保目标的状态自身是一致的。 当Subject的子类调用继承的该项操作时，很容易无意中违反这条自身一致的准则：\r\n    `java\r\n    void operation(int newValue) {\r\n       super.operation(newValue);\r\n       super.update();\r\n       instVar += newValue;\r\n    }\r\n    `\r\n    我们可以用抽象的Subject类中的模板方法来发送通知以避免这种错误。\r\n避免特定于观察者的更新协议——推/拉模型。\r\n    推模型：目标向观察者发送关于改变的详细信息，不管它们是否需要，其假定目标知道一些观察者需要的信息，该模型使得观察者相对难以复用，因为目标对观察者的假定并不一定正确。\r\n    拉模型：目标除最小通知外什么也不管，由观察者显式地向目标询问，拉模型可能效率较差，因为观察者对象需在没有目标对象帮助不确定什么改变了。\r\n显式地指定感兴趣的改变。 可以扩展目标的注册接口，让各观察者注册为仅对特定的事感兴趣，以提高效率。\r\n封装复杂的更新语义。 当目标和观察者间的依赖关系特别复杂时，可能需要一个维护这些关系的对象。其目的是尽量减少观察者反映其目标状态变化所需的工作量。\r\n结合目标类和观察者类。 将目标类和观察者类结合到一个类中，这就允许我们定义一个既是目标又是观察者的对象，而不需要多重继承。\r\n\r\n 代码示例\r\n定义一个Observer接口和一个Subject类：\r\n`java\r\npublic interface Observer {\r\n\tvoid update(Subject subject);\r\n}\r\n\r\npublic class Subject {\r\n\tprivate ListObserver os;\r\n\r\n\tpublic Subject() {\r\n\t\tos = new ArrayList();\r\n\t}\r\n\r\n\tpublic void attach(Observer observer) {\r\n\t\tos.add(observer);\r\n\t}\r\n\r\n\tpublic void remove(Observer observer) {\r\n\t\tos.remove(observer);\r\n\t}\r\n\r\n\tpublic void notifyObservers () {\r\n\t\tfor (Observer o: os) {\r\n\t\t\to.update(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n`\r\n\r\nClockTimer是一个用于存储和维护一天时间的具体目标：\r\n`java\r\npublic class ClockTimer extends Subject {\r\n\r\n\tprivate LocalDateTime time = LocalDateTime.now();\r\n\tpublic int getHour() {\r\n\t\treturn time.getHour();\r\n\t}\r\n\tpublic int getMinute() {\r\n\t\treturn time.getMinute();\r\n\t}\r\n\tpublic int getSecond () {\r\n\t\treturn time.getSecond();\r\n\t}\r\n\tpublic void tick () {\r\n\t\ttime = LocalDateTime.now();\r\n\t\tnotifyObservers();\r\n\t}\r\n}\r\n`\r\n\r\n我们可以定义两个观察者：\r\n`java\r\npublic class DigitalClock implements Observer {\r\n\r\n\tprivate ClockTimer timer ;\r\n\r\n\tpublic DigitalClock(ClockTimer timer) {\r\n\t\tthis.timer = timer;\r\n\t\ttimer.attach(this);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void update (Subject subject) {\r\n\t\tif (this.timer == subject) {\r\n\t\t\t// do something\r\n\t\t\tSystem.out.println(\"DigitalClock update:\" + timer.getHour() + \":\" + timer.getMinute() + \":\" + timer.getSecond());\r\n\t\t}\r\n\t}\r\n}\r\n\r\npublic class AnalogClock implements Observer {\r\n\r\n\tprivate ClockTimer timer ;\r\n\r\n\tpublic AnalogClock(ClockTimer timer) {\r\n\t\tthis.timer = timer;\r\n\t\ttimer.attach(this);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void update (Subject subject) {\r\n\t\tif (this.timer == subject) {\r\n\t\t\t// do something\r\n\t\t\tSystem.out.println(\"AnalogClock update:\" + timer.getHour() + \":\" + timer.getMinute() + \":\" + timer.getSecond());\r\n\t\t}\r\n\t}\r\n}\r\n`\r\n\r\n可以如下调用：\r\n`java\r\npublic static void main(String [] args) throws InterruptedException {\r\n\t\tClockTimer timer = new ClockTimer();\r\n\t\tAnalogClock analogClock = new AnalogClock(timer);\r\n\t\tDigitalClock digitalClock = new DigitalClock(timer);\r\n\t\twhile (true) {\r\n\t\t\tThread.sleep(1000);\r\n\t\t\ttimer.tick();\r\n\t\t}\r\n}\r\n`\r\n\r\n相关模式\r\nMediator: 通过封装复杂的更新语义，充当目标和观察者之间的中介者\r\nSingleton: 中介者可使用Singleton模式来保证它是唯一的并且是可全局访问的。\r\n\r\n 不同状态间解耦 —— State\r\n允许一个对象在其内部状态改变时，改变它的行为。对象看起来修改了它的类。\r\n\r\n适用性\r\n以下两种情况可以使用State模式：\r\n一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为\r\n一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。这个状态通常用一个或多个枚举常量表示。State模式将每一个条件分支放入一个独立的类中，这使得你可以根据自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。\r\n\r\n 结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"124 30 546.375 287\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.60952974\" markerHeight=\"10.88817567\" viewBox=\"-2.30476487 -1.59149088 20.60952974 10.88817567\" refX=\"16\" refY=\"3.85259695\"path d=\"M0 3.85259695L8 0l8 3.85259695L8 7.7051939z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M124 30h546.375v287H124V30z\" fill=\"none\"/path d=\"M144 69q0-4 4-4h148q4 0 4 4v52q0 4-4 4H148q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M144 95h156\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M144 65h156v60H144z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"67\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(154 70.625)\"Context/texttext fill=\"#323232\" font-size=\"15\" x=\"67\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(154 100.625)\"request()/textpath d=\"M434.25 69q0-4 4-4h96.5q4 0 4 4v52q0 4-4 4h-96.5q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M434.25 95h104.5\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M434.25 65h104.5v60h-104.5z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"41.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(444.25 70.625)\"State/texttext fill=\"#323232\" font-size=\"15\" x=\"41.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(444.25 100.625)\"handle()/textpath d=\"M392.5 233.5v-54.25h94v-39.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M318.30476487 84h101.45916715\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-start=\"url(#b)\" marker-end=\"url(#c)\"/path d=\"M268 50h160v40H268z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"79\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(268 60.625)\"state/textpath d=\"M146.5 171H296l16 16v31H146.5v-47z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M296 171v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M146.5 171H296l16 16v31H146.5v-47z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" transform=\"translate(156.5 185.125)\"state.handle()/textpath d=\"M274.72727273 116v57\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-start=\"url(#d)\"/path d=\"M576.5 233.5v-54.25h-90v-39.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#e)\"/path d=\"M502.625 237.5q0-4 4-4h139.75q4 0 4 4V293q0 4-4 4h-139.75q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M502.625 263.5h147.75\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M502.625 233.5h147.75V297h-147.75z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"62.875\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(512.625 239.125)\"ConcreteStateB/texttext fill=\"#323232\" font-size=\"15\" x=\"62.875\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(512.625 270.875)\"update()/textpath d=\"M318.625 237.5q0-4 4-4h139.75q4 0 4 4V293q0 4-4 4h-139.75q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M318.625 263.5h147.75\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M318.625 233.5h147.75V297h-147.75z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"62.875\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(328.625 239.125)\"ConcreteStateA/texttext fill=\"#323232\" font-size=\"15\" x=\"62.875\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(328.625 270.875)\"update()/text/svg\r\n{%endraw%}\r\n\r\n参与者\r\nContext(环境): 定义客户感兴趣的接口；维护一个ConcreateState子类，这个实例定义当前状态。\r\nState(状态): 定义一个接口以封装与Context的特定状态相关的行为。\r\nConcreteState(具体子类): 每一个子类实现一个与Context的一个状态相关的行为\r\n\r\n 协作\r\nContext将与状态相关的请求委托给当前的ConcreteState对象处理\r\nContext可将自身一个参数传递给处理该请求的状态对象，这样状态对象在必要时可访问Context\r\nContext是客户使用的主要接口。客户可用状态对象来配置一个Context，一旦一个Context配置完毕，它的客户不再地需要直接与状态对象打交道\r\n\r\n效果\r\n它将与特定状态的相关行为局部化，并且将一同状态的行为分割开来。 State模式将所有与一个特定的状态相关的行为都放入一个对象中。因为所有与状态相关的代码都存在于某一个State子类中，所以通过定义新的子类可以很容易的新的状态和转换。State避免了巨大的条件语句所带来的问题，但该模式瘵不同的行为分布在多个State子类中，增加了子类的数目，相对于单个类来说不够紧凑。\r\n它使得状态转换显式化。 而且State对象可保证Context不会发生内部状态不一致的情况，因为状态转换是原子的。\r\nState对象可以被共享。如果State对象没有实例变量，即它们表示的状态完全以它们的类型来编码。那么各Context对象可以共享一个State对象。\r\n\r\n 实现\r\n谁定义状态转换。State模式不指定哪一个参与者转换准则。如果该准则是固定的，那么它们可在Context中完全实现。然而若让State子类自身指定它们的后继状态以及何时进行转换，通常更灵活更合适。\r\n基于表的另一种方法。 我们可以使用表将输入映射状态转换。对每一个状态，一张表将每一个可能的输入映射到一个后继状态。这种方法将条件代码映射为一介查找表。但是查找表有一些缺点：\r\n    用统一的、表格的形式表示转换逻辑使得转换准则变得不够明确而难以理解。\r\n    通常难以加入伴随状态转换的一些动作。\r\n    State模式对与状态相关的行为进行建模，而表驱动的方法着重于定义状态转换。\r\n创建和销毁State对象. 如果对象存储大量的信息时，仅当需要State时才创建它们并随后销毁它们比较好；如果状态改变频繁，提前创建它们并始终不销毁它们比较好。\r\n\r\n代码示例\r\n我们定义类TCPConnection，它提供了一个传送数据的接口并修理改变状态的请求：\r\n`java\r\npublic class TCPConnection {\r\n\tprivate TCPState state;\r\n\r\n\tpublic TCPConnection() {\r\n\t}\r\n\r\n\tpublic void passiveOpen(TCPConnection tcpConnection) {\r\n\t\tstate.passiveOpen(tcpConnection);\r\n\t}\r\n\r\n\tpublic void close(TCPConnection tcpConnection) {\r\n\t\tstate.close(tcpConnection);\r\n\t}\r\n\r\n\tpublic void send(TCPConnection tcpConnection) {\r\n\t\tstate.send(tcpConnection);\r\n\t}\r\n\r\n\tprotected void changeState(TCPState state) {\r\n\t\tthis.state = state;\r\n\t}\r\n}\r\n`\r\n\r\nTCPConnection在state中保持一个TCPState类的实例，TCPState定义了一个状态和接口，TCPEstablished, TCPListen和TCPClosed定义了几个状态：\r\n`java\r\npublic class TCPEstablished extends TCPState {\r\n\r\n\tprivate static TCPState established = new TCPEstablished();\r\n\r\n\tpublic static TCPState getInstance() {\r\n\t\treturn established;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void transmit(TCPConnection tcpConnection) {\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void passiveOpen(TCPConnection tcpConnection) {\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void close(TCPConnection tcpConnection) {\r\n\t\tchangeState(tcpConnection, TCPClosed.getInstance());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void send(TCPConnection tcpConnection) {\r\n\t}\r\n}\r\n\r\npublic class TCPListen extends TCPState {\r\n\r\n\tprivate static TCPState listen = new TCPEstablished();\r\n\r\n\tpublic static TCPState getInstance() {\r\n\t\treturn listen;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void transmit(TCPConnection tcpConnection) {\r\n\t}\r\n\r\n\r\n\t@Override\r\n\tpublic void passiveOpen(TCPConnection tcpConnection) {\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void close(TCPConnection tcpConnection) {\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void send(TCPConnection tcpConnection) {\r\n\t\tchangeState(tcpConnection, TCPEstablished.getInstance());\r\n\t}\r\n}\r\n\r\npublic class TCPClosed extends TCPState {\r\n\tprivate static TCPState closed = new TCPClosed();\r\n\r\n\tpublic static TCPState getInstance() {\r\n\t\treturn closed;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void transmit(TCPConnection tcpConnection) {\r\n\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void passiveOpen(TCPConnection tcpConnection) {\r\n\t\tchangeState(tcpConnection, TCPListen.getInstance());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void close(TCPConnection tcpConnection) {\r\n\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void send(TCPConnection tcpConnection) {\r\n\r\n\t}\r\n}\r\n`\r\n在完成相关工作后，这些操作调用changeState来改变TCPConnection的状态。\r\n\r\n 相关模式\r\nFlyweight模式解释了何时以及怎样共享状态对象\r\n状态对象通常是Singleton\r\n\r\n一系列算法中取一个 —— Strategy\r\n定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于它的客户而变化。\r\n\r\n 适用性\r\nStrategy模式适用于以下情况：\r\n许多相关的类仅仅是行为有异。“策略”提供了一种用多个行为中的一个来配置一个类的方法\r\n需要使用一个算法的不同变体。当这些变体实现为一个算法的类层次时，可使用策略模式\r\n算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构\r\n一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现。将相关的条件分支移入它们各自的Strategy类中以代替这些条件语句。\r\n\r\n结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"169 31 715 278.5\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"20.60952974\" markerHeight=\"10.88817567\" viewBox=\"-2.30476487 -1.59149088 20.60952974 10.88817567\" refX=\"16\" refY=\"3.85259695\"path d=\"M0 3.85259695L8 0l8 3.85259695L8 7.7051939z\" stroke=\"323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M169 31h715v278.5H169V31z\" fill=\"none\"/path d=\"M189 69q0-4 4-4h148q4 0 4 4v52q0 4-4 4H193q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M189 95h156\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M189 65h156v60H189z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"67\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(199 70.625)\"Context/texttext fill=\"#323232\" font-size=\"15\" x=\"67\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(199 100.625)\"contextInterface()/textpath d=\"M483.5 69q0-4 4-4H647q4 0 4 4v59q0 4-4 4H487.5q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M483.5 95H651\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M483.5 65H651v67H483.5z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"72.75\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(493.5 70.625)\"Strategy/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"72.75\" y=\"15.375\" transform=\"translate(493.5 94.75)\"algorithmlInterface(/texttext x=\"72.75\" y=\"34.125\" transform=\"translate(493.5 94.75)\")/text/gpath d=\"M363.30476487 84h51.54631169v-.27941176h54.61500857\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-start=\"url(#a)\" marker-end=\"url(#b)\"/path d=\"M310 51h160v40H310z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"79\" y=\"15.375\" font-family=\"微软雅黑\" text-anchor=\"middle\" transform=\"translate(310 61.625)\"strategy/textpath d=\"M680.375 226.5q0-4 4-4H860q4 0 4 4v59q0 4-4 4H684.375q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M680.375 252.5H864\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M680.375 222.5H864v67H680.375z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"80.8125\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(690.375 228.125)\"ConcreteStrategyC/texttext fill=\"#323232\" font-size=\"15\" x=\"80.8125\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(690.375 261.625)\"algorithmlInterface()/textpath d=\"M475 226.5q0-4 4-4h176.5q4 0 4 4v59q0 4-4 4H479q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M475 252.5h184.5\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M475 222.5h184.5v67H475z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"81.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(485 228.125)\"ConcreteStrategyB/texttext fill=\"#323232\" font-size=\"15\" x=\"81.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(485 261.625)\"algorithmlInterface()/textpath d=\"M273 226.5q0-4 4-4h184.125q4 0 4 4v59q0 4-4 4H277q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M273 252.5h192.125\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M273 222.5h192.125v67H273z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"85.0625\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(283 228.125)\"ConcreteStrategyA/texttext fill=\"#323232\" font-size=\"15\" x=\"85.0625\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(283 261.625)\"algorithmlInterface()/textpath d=\"M369.0625 222.5v-45.25H567.25v-30.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#c)\"/path d=\"M567.25 222.5v-75.26393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#d)\"/path d=\"M772.1875 222.5v-45.25H567.25v-30.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#e)\"//svg\r\n{%endraw%}\r\n\r\n参与者\r\nStrategy(策略): 定义所有支持的算法的公共接口。Context使用这个接口来调用某ConcreteStrategy定义的算法\r\nConcreteStrategy(具体策略): 以Strategy接口实现某具体算法\r\nContext(上下文): 用一个ConcreteStrategy对象来配置；维护一个队Strategy对象的引用；可定义一个接口来让Strategy访问它的数据\r\n\r\n 效果\r\nStrategy模式有下面的一些优点和缺点：\r\n相关算法系列。\r\n一个替换继承的方法。 继承提供了另一种支持多种算法或行为的方法，可以直接生成一个Context类的子类，从而给它以不同的行为。但这样会将行为硬编码到Context中，而将算法的实现与Context混合起来，使Context难以理解、难以维护和扩展。\r\n消除了一些条件语句\r\n客户有较大的选择空间，但是必须了解不同的Strategy\r\n增加了对象数目\r\n\r\n实现\r\n定义Strategy和Context接口：\r\n  Context将数据放在参数中传递给Strategy，可以将Strategy和Context解耦，但是参数中可能会有些不需要的数据\r\n  将Context作为参数传递给Strategy，Strategy再显示地向Context请求数据。这时需要Context定义一个更精确的接口，这也将Strategy和Context更紧密地耦合在一起。\r\n将Strategy作为泛型参数。 这需要满足两个条件：在编译时选择Strategy；不需要在运行时改变。\r\nStrategy对象可选。 如果Strategy并不是必须的，可在Context中定义缺省实现。\r\n\r\n 代码示例\r\nComposition类定义了一个上下文环境：\r\n`java\r\npublic class Composition {\r\n\tprivate Compositor compositor;\r\n\tpublic Composition(Compositor compositor) {\r\n\t\tthis.compositor = compositor;\r\n\t}\r\n\tpublic void repair() {\r\n\t\t// do some action\r\n\t\tcompositor.Compose();\r\n\t\t// do other thing\r\n\t}\r\n\tpublic void setCompositor(Compositor compositor) {\r\n\t\tthis.compositor = compositor;\r\n\t}\r\n}\r\n`\r\n算法策略如下：\r\n`java\r\n/**\r\n Compositor 接口需要经过仔细设计，以支持子类可能实现的各种算法，不希望在生成一个新的子类就不得不修改这个接口\r\n */\r\npublic interface Compositor {\r\n\tint Compose();\r\n}\r\n\r\npublic class SimpleCompositor implements Compositor {\r\n\t@Override\r\n\tpublic int Compose() {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\npublic class TexCompositor implements Compositor {\r\n\t@Override\r\n\tpublic int Compose() {\r\n\t\treturn 1;\r\n\t}\r\n}\r\n`\r\n\r\n相关模式\r\nFlyweight： Strategy对象常常是很好的轻量级对象\r\n\r\n Template Method\r\n定义一个算法的骨架，将一些步骤延迟到子类中。TemplateMethod使得子类可以不改变一个算法的结构就可重定义该算法的某些特定步骤。\r\n\r\n适用性\r\n模板方法适用于如下情况：\r\n一次性实现一个算法的不变部分，并将可变的行为留给子类来实现\r\n各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复\r\n控制子类扩展，模板方法只在特定点调用“hook”操作。\r\n\r\n 结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"120.5 62 482.5 269\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M120.5 62H603v269H120.5V62z\" fill=\"none\"/path d=\"M140.5 86q0-4 4-4H342q4 0 4 4v90q0 4-4 4H144.5q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M140.5 112H346\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M140.5 82H346v98H140.5z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"91.75\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(150.5 87.625)\"AbstractClass/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"91.75\" y=\"15.375\" transform=\"translate(150.5 117.875)\"templateMethod()/texttext x=\"91.75\" y=\"34.125\" transform=\"translate(150.5 117.875)\"primitiveOperation1()/texttext x=\"91.75\" y=\"52.875\" transform=\"translate(150.5 117.875)\"primitiveOperation2()/text/gpath d=\"M143.125 243.5q0-4 4-4h192.25q4 0 4 4V307q0 4-4 4h-192.25q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M143.125 269.5h200.25\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M143.125 239.5h200.25V311h-200.25z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"89.125\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(153.125 245.125)\"ConcreteClass/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"89.125\" y=\"15.375\" transform=\"translate(153.125 271.5)\"primitiveOperation1()/texttext x=\"89.125\" y=\"34.125\" transform=\"translate(153.125 271.5)\"primitiveOperation2()/text/gpath d=\"M243.25 239.5v-44.26393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M386 111h181l16 16v71H386v-87z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M567 111v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M386 111h181l16 16v71H386v-87z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/g fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\"text y=\"15.375\" transform=\"translate(396 117)\"primitiveOperation1()/texttext y=\"34.125\" transform=\"translate(396 117)\".../texttext y=\"52.875\" transform=\"translate(396 117)\"primitiveOperation2()/texttext y=\"71.625\" transform=\"translate(396 117)\".../text/gpath d=\"M329 126h57\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-start=\"url(#b)\"//svg\r\n{%endraw%}\r\n\r\n参与者\r\nAbstractClass(抽象类): 定义抽象的原语操作，具体子类将重定义它们以实现一个算法的各个步骤；实现一个模板方法，定义一个算法的骨架，该模板方法不仅调用原语操作，也调用定义在AbstractClass或其他对象中的操作。\r\nConcreteClass(具体类): 实现原语操作以完成算法中与特定子类相关的步骤\r\n\r\nConcreteClass靠AbstractClass来实现算法中不变的步骤。\r\n\r\n 效果\r\n模板方法是一种代码复用的基本技术。它在类库中尤为重要，它提取了类库中的公共行为。\r\n模板方法也导致一种反向控制结构，一个父类调用一个子类的操作，而不是相反。\r\n模板方法调用下列类型的操作：\r\n具体的操作（ConcreteClass或对客户类的操作）\r\n具体的AbstractClass的操作（通常对子类有用的操作）\r\n原语操作\r\nFactory Method\r\n钩子操作: 提供缺省操作，子类可以在必要时进行扩展，一个钩子操作在缺省操作通常是一个空操作。\r\n\r\n模板方法应该指明那些操作是钩子操作（可以被重定义），哪些是抽象操作（必须重定义）。一般是在父类中调用钩子操作，子类重定义这个钩子操作。\r\n\r\n实现\r\n有三个问题值得注意：\r\n使用访问控制 一个模板方法调用的原始原语操作可以被定义为保护成员，这保证它们只被模板方法调用。\r\n尽量减少原语操作 定义模板方法的一个重要目的是尽量减少一个子类具体实现该算法时必须重定义的那些原语操作的数目。\r\n命名约定 可以给应被重定义的那些操作的名字上加一个前缀以识别它们。\r\n\r\n 代码示例\r\nView 中定义了两个操作，doDisplay钩子操作实施真正的功能：\r\n`java\r\npublic class View {\r\n\r\n\tpublic void display () {\r\n\t\tsetFocus();\r\n\t\tdoDisplay();\r\n\t\tresetFocus();\r\n\t}\r\n\tvoid setFocus() {}\r\n  /* 定义一个缺省操作 */\r\n\tvoid doDisplay() {}\r\n\tvoid resetFocus() {}\r\n}\r\n`\r\n\r\nMyView 重新定义了 doDisplay 操作:\r\n`java\r\npublic class MyView extends View {\r\n\t@Override\r\n\tprotected void doDisplay() {\r\n\t\t// render the view's contents\r\n\t}\r\n}\r\n`\r\n\r\n相关模式\r\nFactory Method 模式常被模板方法调用。\r\nStrategy: 模板方法使用继承来改变算法的一部分，Strategy使用委托来改变整个算法。\r\n\r\n Visitor\r\n表示一个作用于某对象结果中的各元素的操作，使你可以不改变各元素的类的前提下定义作用于这些元素的新操作。\r\n使用Visitor模式，必须定义两个类层次：一个对应于接受操作的元素（Node层次），另一个对应于定义对元素操作的访问者（NodeVisitor层次）。\r\n\r\n适用性\r\n下列情况使用Visitor:\r\n一个对象结构包含很多类对象，他们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作。\r\n需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而你想避免让这些操作“污染”这些对象的类。Visitor使得你可以将相关的操作集中起来定义在一个类中。当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作。\r\n定义对象结构的类很少改变，但经常需要在此结构上定义新的操作。改变对象结构类需要重定义所有访问者的接口，这三只熊需要很大的代价。如果对象结构类经常改变，那么可能还是在这些类中定义这些操作较好。\r\n\r\n 结构\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"26 44 825 644\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"d\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"e\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"f\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"g\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.23606798\" markerHeight=\"10.55083655\" viewBox=\"-1 -1.37638192 16.23606798 10.55083655\" refX=\"-1\" refY=\"3.89903635\"path d=\"M12 3.89903635L0 7.79807271V0z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#323232\"//markermarker id=\"h\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//markermarker id=\"i\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"10\" markerHeight=\"10\" viewBox=\"-1 -1 10 10\" refX=\"8\" refY=\"4\"path d=\"M0 4a4 4 0 0 1 4-4 4 4 0 1 1-4 4\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#fff\"//marker/defspath d=\"M26 44h825v644H26V44z\" fill=\"none\"/path d=\"M304.5 68q0-4 4-4H643q4 0 4 4v73q0 4-4 4H308.5q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M304.5 94H647\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M304.5 64H647v81H304.5z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"160.25\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(314.5 69.625)\"Visitor/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"160.25\" y=\"15.375\" transform=\"translate(314.5 100.75)\"visitConcreteElementA(ConcreteElementA)/texttext x=\"160.25\" y=\"34.125\" transform=\"translate(314.5 100.75)\"visitConcreteElementB(ConcreteElementB)/text/gpath d=\"M120 229.5q0-4 4-4h339q4 0 4 4V309q0 4-4 4H124q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M120 255.5h347\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M120 225.5h347V313H120z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"162.5\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(130 231.125)\"ConcreteVisitor1/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"162.5\" y=\"15.375\" transform=\"translate(130 265.5)\"visitConcreteElementA(ConcreteElementA)/texttext x=\"162.5\" y=\"34.125\" transform=\"translate(130 265.5)\"visitConcreteElementB(ConcreteElementB)/text/gpath d=\"M293.5 225.5v-40.25h182.25v-25.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#a)\"/path d=\"M259 622h238l16 16v30H259v-46z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M497 622v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M259 622h238l16 16v30H259v-46z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" transform=\"translate(269 635.625)\"v.visitConcreteElementA(this)/textpath d=\"M485.0625 229.5q0-4 4-4H827q4 0 4 4V309q0 4-4 4H489.0625q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M485.0625 255.5H831\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M485.0625 225.5H831V313H485.0625z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"161.96875\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(495.0625 231.125)\"ConcreteVisitor2/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"161.96875\" y=\"15.375\" transform=\"translate(495.0625 265.5)\"visitConcreteElementA(ConcreteElementA)/texttext x=\"161.96875\" y=\"34.125\" transform=\"translate(495.0625 265.5)\"visitConcreteElementB(ConcreteElementB)/text/gpath d=\"M658.03125 225.5v-40.25H475.75v-25.01393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#b)\"/path d=\"M456.25 382.5q0-4 4-4H587q4 0 4 4V438q0 4-4 4H460.25q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M456.25 408.5H591\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M456.25 378.5H591V442H456.25z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"56.375\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(466.25 384.125)\"Element/texttext fill=\"#323232\" font-size=\"15\" x=\"56.375\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(466.25 415.875)\"accept(Visitor)/textpath d=\"M322.125 505.25q0-4 4-4H490q4 0 4 4V580q0 4-4 4H326.125q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M322.125 539.25H494\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M322.125 501.25H494V584H322.125z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"74.9375\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(332.125 510.875)\"ConcreteElementA/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"74.9375\" y=\"15.375\" transform=\"translate(332.125 542.875)\"accept(Visitor v)/texttext x=\"74.9375\" y=\"34.125\" transform=\"translate(332.125 542.875)\"operationA()/text/gpath d=\"M542.125 505.25q0-4 4-4H712q4 0 4 4V580q0 4-4 4H546.125q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M542.125 531.25H716\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/path d=\"M542.125 501.25H716V584H542.125z\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" x=\"75.9375\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(552.125 506.875)\"ConcreteElementB/textg fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\"text x=\"75.9375\" y=\"15.375\" transform=\"translate(552.125 538.875)\"accept(Visitor v)/texttext x=\"75.9375\" y=\"34.125\" transform=\"translate(552.125 538.875)\"operationA()/text/gpath d=\"M408.0625 501.25v-29.625H523.625v-14.38893202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#c)\"/path d=\"M629.0625 501.25v-29.625H523.625v-14.38893202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#d)\"/path d=\"M225.5625 392q0-4 4-4h144q4 0 4 4v36.5q0 4-4 4h-144q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"65\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(235.5625 400.875)\"ObjectStructure/textpath d=\"M377.5625 410.25h63.45143202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#e)\"/path d=\"M46 89q0-4 4-4h88q4 0 4 4v31q0 4-4 4H50q-4 0-4-4z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/text fill=\"#323232\" font-size=\"15\" x=\"37\" y=\"15.375\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(56 95.125)\"Client/textpath d=\"M142 104.5h147.26393202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#f)\"/path d=\"M94 124v286.25h116.32643202\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#g)\"/path d=\"M546 622h226l16 16v30H546v-46z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M772 622v16h16\" stroke=\"#323232\" stroke-width=\"2\" fill=\"#f5927b\"/path d=\"M546 622h226l16 16v30H546v-46z\" stroke=\"#323232\" stroke-width=\"2\" fill=\"none\"/text fill=\"#323232\" font-size=\"15\" y=\"15.375\" font-family=\"微软雅黑\" transform=\"translate(556 635.625)\"v.visitConcreteElementB(this)/textpath d=\"M478.5 558.5v62\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-start=\"url(#h)\"/path d=\"M697 558v64\" stroke=\"#323232\" stroke-width=\"2\" stroke-dasharray=\"10.0 4.0\" fill=\"none\" marker-start=\"url(#i)\"//svg\r\n{%endraw%}\r\n\r\n参与者\r\nVistor(访问者): 为对象结构中的ConcreteElement的每一个类声明一个Visit操作。该操作的名字和特征标识了发送Visit请求给该访问者的那个类。这使得访问者可以确定正被访问元素的具体的类。这样访问者就可以通过该元素的特定接口直接访问它。\r\nConcreteVisitor(具体访问者): 实现每个由Visitor声明的操作。每个操作实现本算法的一部分，而该算法片段乃是对应于结构中对象的类。ConcreteVisitor为该算法提供了上下文并存储它的局部状态。这一状态常常在遍历该结构的过程中累积结果\r\nElement(元素): 定义一个accept操作\r\nConcreteElement(具体元素): 实现accept操作\r\nObjectStructure(对象结构): 能枚举它的元素；可以提供一个高层的接口，允许访问者访问它的元素；可以是一个复合或是一个集合。\r\n\r\n 效果\r\n访问者模式使得易于增加新的操作\r\n访问者集中相关的操作而分离无关的操作 相关行为不是分布定义在该对象结构的各个类上，而是集中在一个访问者中。无关行为却被分别放在它们各自的访问者子类中。\r\n增加新的ConcreteElement类很困难 每新增一个ConcreteElement类都要在Visitor中添加一个新的抽象操作，并在每一个ConcreteVistor类中实现相应的操作。Element类层次是稳定的，才适合用访问者模式\r\n可以访问不具有相同父类的对象\r\n累积状态 当访问者访问对象结构中的每一个元素时，它可能会累积状态。\r\n破坏封装 访问者方法假定ConcreteElement接口提供足够的功能，常常会迫使你提供访问元素内部状态的公共操作。\r\n\r\n实现\r\n谁负责遍历对象结构 我们可以使用一下三个中的任一个遍历对象：对象结构中，访问者中，一个独立的迭代器对象中。\r\n通常由对象结构复杂迭代。一个集合只需对它的元素进行迭代，并对每一个元素调用accept。复合对象通常让accept操作遍历该元素的各子构建并对它们中的每一个递归地调用accept。\r\n\r\n 代码示例\r\n`java\r\npublic abstract class Equipment {\r\n\r\n\tprivate String name;\r\n\r\n\tpublic Equipment(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic abstract void accept(EquipmentVisitor visitor);\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n}\r\n\r\npublic class FloppyDisk extends Equipment {\r\n\r\n\tpublic FloppyDisk(String name) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void accept(EquipmentVisitor visitor) {\r\n\t\tvisitor.visitFloppyDisk(this);\r\n\t}\r\n\r\n\tpublic int netPrice() {\r\n\t\treturn new Random().nextInt();\r\n\t}\r\n}\r\n\r\npublic class Chassis extends Equipment {\r\n\r\n\tprivate ListEquipment  equipments;\r\n\r\n\tpublic Chassis(String name) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\tpublic int discountPrice() {\r\n\t\treturn new Random().nextInt();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void accept(EquipmentVisitor visitor) {\r\n\t\tfor (Equipment equipment: equipments) {\r\n\t\t\tequipment.accept(visitor);\r\n\t\t}\r\n\t}\r\n}\r\n`\r\n\r\n`java\r\npublic interface EquipmentVisitor {\r\n\r\n\tvoid visitFloppyDisk(FloppyDisk f);\r\n\tvoid visitChassis(Chassis c);\r\n}\r\n\r\npublic class PricingVisitor implements EquipmentVisitor {\r\n\r\n\tprivate int total = 0;\r\n\t@Override\r\n\tpublic void visitFloppyDisk(FloppyDisk f) {\r\n\t\ttotal += f.netPrice();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void visitChassis(Chassis c) {\r\n\t\ttotal += c.discountPrice();\r\n\t}\r\n}\r\n`\r\n\r\n相关模式\r\nComposite: 访问者可以用对一个由Composite模式定义的对象结构进行操作\r\nInterpreter: 访问者可以用于解释器\r\n\r\n 总结\r\n封装变化是许多行为模式的主题。当一个程序的某个方面的特征经常发生改变时，这些模式就定义一个封装这个方面的对象。\r\nStrategy 对象封装一个算法\r\nState 对象封装一个与状态相关的行为\r\nMediator 对象封装对象间的协议\r\nIterator 对象封装访问和遍历一个聚集对象的各个构件的方法。\r\n\r\n解耦发送者和接收者 解耦是设计中永恒的主题。\r\nCommand 对象提供一个提交请求的简单接口，将发送者和接收者解耦\r\nObserver 通过一个接口来通知目标中发生的改变，从而将发送者与接收者解耦\r\nMediator 让对象通过一个Mediator对象间接的互相引用，从而对它们解耦\r\n职责链模式通过沿一个潜在的接收者链传递请求而将发送者与接收者解耦\r\n\r\n模式组合 除了少数例外情况，各个行为设计模式之间是相互补充和相互加强的关系。\r\n一个职责链中的类可能包括至少一个Template Method的应用。该模板方法可使用原语操作确定该对象是否应处理该请求并选择应转发的对象。\r\n职责链使用Command模式将请求表示为对象。\r\n\r\n\r\n\r\nddf\r\n\r\n\r\n\r\n--\r\n",
        "tags": []
    },
    {
        "uri": "/post/DesignPatterns/设计模式",
        "content": "---\r\ntitle: 设计模式\r\n---\r\n\r\n曾经多少次有过这种感觉：你已经解决过一个问题但就是不能确切知道不在什么地方或怎么解决的，如果你能记起以前问题的细节和怎么解决的，你就可以利用之前的经验而不需要重新发现它。所以我们需要将解决问题的经验记录下来。\r\n设计模式使人们可以更加简单地复用成功的设计和体系结构。每个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。\r\n一个模式有四个基本要素：\r\n模式名称: 一个助记名，有一两个词来描述模式的问题、解决方案和效果；\r\n问题： 描述了应该在何时使用何种模式；\r\n解决方案： 描述了设计的组成成分，它们之间的相互关系及各自的职责和协作方式；\r\n效果： 描述了模式应用的效果及使用模式应权衡的问题\r\n\r\n设计模式在编目\r\n\r\n根据模式的目的，可以将模式分为：创建型（与对象的创建有关）、结构型（处理类或对象的组合）、行为型（对类或对象怎样交互和怎样分配职责进行描述）\r\n根据模式的范围，可以将模式分为：类（处理类和子类之间的关系，这些关系通过继承建立，是静态的）、对象（处理对象间的关系，这些关系在运行时刻是变化的，是动态的）\r\n\r\n 创建型模式\r\n随着系统演化越来越依赖于对象复合而不是类继承，创建型模式变得更为重要。创建型模式有两个重要作用：将系统使用哪些具体的类的信息封装起来；隐藏了这些类的实例是如何被创建和放在一起的。整个系统对于这些对象所知道的是由抽象类所定义的接口\r\n\r\n名称  | 目的 | 范围 | 描述 \r\n:-----|:----|:----|:----\r\nAbstract Factory (抽象工厂)| 创建型 | 对象 | 提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类\r\nFactory Method| 创建型 | 类| 定义一个用于创建对象的接口，让子类决定将哪一个类实例化。Factory Method将一个类的实例化延迟到子类中\r\nSingleton | 创建型 | 对象 | 保证一个类只有一个实例，并提供一个访问它的全局访问点\r\nPrototype| 创建型 | 对象 | 用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象\r\nAdapter (适配器)        | 结构型 | 类 |  将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作\r\nBridge (桥接模式)       | 结构型 | 对象| 将抽象部分与它的实现部分分离，使它们都可以独立地变化\r\nBuilder ()            | 结构型 | 对象 |将一个复杂对象构建与它的表示分离，使得同样的构建过程可以创建不同的表示\r\nComposite            | 结构型 | 对象|将对象组合成树形以表示“部分-整体”的层次结构。Composite使得客户对单个对象和复合对象的使用具有一致性\r\nDecorator           | 结构型 | 对象 | 动态地给一个对象添加一些额外的职责。就扩展功能而言，Decorator模式比生成子类方式更为灵活\r\nFacade        | 结构型 | 对象 | 为子系统中的一组接口提供一个一致的界面， Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用\r\nFlyweight   | 结构型 | 对象 | 运用共享技术有效地支持大量细粒度的对象\r\nInterpreter | 行为型 | 类| 给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语句中的句子\r\nIterator    | 行为型 | 对象 | 提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示\r\nMediator  | 行为型 | 对象 | 用一个中介对象来封装一系列的对象交互，中介者使各个对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互\r\nMemento   | 行为型 | 对象 | 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态\r\nObserver  | 行为型 | 对象 | 定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖他的对象都得到通知并自动刷新\r\nProxy     | 结构型 | 对象 | 为其他对象提供一个代理以控制对这个对象的访问\r\nState     | 行为型 | 对象 | 允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它所属的类\r\nStrategy  | 行为型 | 对象 | 定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换。本模式使算法的变化可独立于使用它的用户\r\nTemplate Method | 行为型 | 类 | 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。本模式使得子类可以不改变一个算法的结构就可以重新定义该算法的某些特定的步骤\r\nVisitor | 行为型 | 对象 | 表示一个作用于某对象结构中的各元素的操作。可以在不改变各元素的类的前提下定义作用于这些元素的新操作\r\nChain of Responsibility  | 行为型| 对象 | 为解除请求的发送者和接受者之间的耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它\r\nCommand (命令模式)    |  行为型| 对象 | 将请求封装成一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作\r\n\r\n对象\r\n面向对象设计最困难的部分是将系统分解成对象集合。因为要考虑许多因素：封装、粒度、依赖关系、灵活性、性能、演化、复用等等，他们都影响着系统的分解，并且这些因素通常还是相互冲突的。\r\n面向对象设计方法学支持许多设计方法。可以写出一个问题描述，挑出名词和动词，进而创建相应的类和方法；或者可以关注于系统的写作和职责关系；或者可以对现实世界建模，再将分析时发现的对象转化至设计中。\r\n\r\n对象的类定义了对象是怎样实现的，同时也定义了独享的内部状态和操作的实现；\r\n对象的类型只与它的接口有关，接口即对象能响应的请求的集合。\r\n当我们说一个对象是一个类的实例的时候，指的是该对象支持类所定义的接口。\r\n类继承根据一个对象的实现定义了另一个对象的实现；接口继承描述了一个对象什么时候能被用来替代另一个对象。\r\n\r\n面向对象编程中，一个比较重要的法则就是：对接口编程，而不是对实现编程。具体含义就是不讲变量声明为某个特定的具体类的实例对象，而是让它遵从抽象类所定义的接口。创建型模式就是确保系统时采用针对接口编写的，而不是针对实现编写的。\r\n\r\n 类继承 和 对象组合\r\n对象组合是类继承之外的另一种复用选择，新的更复杂的功能可以通过组装或组合对象来获得。对象组合要求被组合的对象具有良好定义的接口。\r\n类继承是在编译时刻静态定义的，且可直接使用，因为程序设计语言直接支持类继承。当一个子类重定义一些而不是全部操作时，它也能影响它所继承的操作，只要在这些操作中调用了被重定义的操作。\r\n对象组合是通过获得对其他对象的引用而在运行时刻动态定义的。组合要求对象遵循彼此的接口约定，进而要求更仔细地定义接口。因为对象只能通过接口访问，所以我们并不破坏封装性；只要类型一致，运行时刻还可以用一个对象来代替另一个对象；而且因为对象的实现是基于接口写的，所以实现上存在较少的依赖关系。\r\n对象组合在设计上还有另外一个作用：即优先使用对象组合有助于你保持每个类被封装，并被集中在单个任务上。这样 类和继承 层次会保持较小规模，并且不大可能增长为不可控的庞然大物。而且给予对象组合的设计会有更多的对象，较少的类，且系统的行为将依赖于对象间的关系而不是被定义在某个类中。\r\n对象设计的另一个原则： 优先使用对象组合，而不是类继承\r\n\r\n委托\r\n委托是一种组合方法，它使组合具有与继承同样的复用能力。在委托方式下，有两个对象参与处理一个请求，接受请求的对象将操作委托给它的代理者。\r\n委托的主要优点在于它便于运行时刻组合独享操作以及改变这些操作的组合方式。其主要缺点是 动态的、高度参数化的软件比静态软件更难以理解。\r\n\r\n 参数化类型 -- Java中的泛型\r\n参数化类型给我们提供除了类继承和对象组合外的第三种方法来组合对象的行为。\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/post/front/_vue",
        "content": "-----\r\ntitle: vue.js\r\ndraft: true\r\n-----\r\n\r\n环境搭建\r\n\r\n`\r\n 安装cnpm\r\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\r\n安装vue\r\ncnpm install -g vue-cli\r\n 初始化一个项目\r\nvue init webpack my-project\r\n下载依赖\r\ncnpm install \r\n`\r\n\r\n\r\nVue中重要的组件部分\r\n`\r\nnew Vue({\r\n\tdata: {\r\n\t\ta: 1,\r\n\t\tb: []\r\n\t}\r\n\tmethods: {\r\n\t\tdoSomething: function() {\r\n\t\t\tthis.a++;\r\n\t\t}\r\n\t},\r\n\twatch: {\r\n\t\t'a': function(val, oldVal) {\r\n\t\t\tconsole.log(val, oldVal);\r\n\t\t}\r\n\t}\r\n})\r\n`\r\n\r\n`\r\n对html内容进行转义\r\np v-text=\"a\"/p\r\n 保留html格式\r\np v-html=\"a\"/p\r\n`",
        "tags": []
    },
    {
        "uri": "/post/front/_vue学习笔记",
        "content": "---\r\ntitle : vue 学习笔记\r\ndate: 2017-06-17 19:42:25\r\ntags: [\"javascript\"]\r\ncategories: [\"javascript\"]\r\ndraft: true\r\n---\r\n\r\n属性和方法\r\n每个vue实例都会代理其data对象的所有属性\r\n`vue\r\nvar data = { a: 1 }\r\nvar vm = new Vue({\r\n  data: data\r\n})\r\nvm.a === data.a // - true\r\n// setting the property also affects original data\r\nvm.a = 2\r\ndata.a // - 2\r\n// ... and vice-versa\r\ndata.a = 3\r\nvm.a // - 3\r\n`\r\n!-- more --\r\n在vue中只有被代理的属性才会被监控，如果在创建Vue后，再data中新添加属性，是不会被监控的，也就是更新值没有任何响应。可以通过$watch方法加入响应 。\r\nVue中自带一些以$开头的属性和方法：\r\n`vue\r\nvar data = { a: 1 }\r\nvar vm = new Vue({\r\n  el: 'example',\r\n  data: data\r\n})\r\nvm.$data === data // - true\r\nvm.$el === document.getElementById('example') // - true\r\n// $watch is an instance method\r\nvm.$watch('a', function (newVal, oldVal) {\r\n  // this callback will be called when vm.a changes\r\n})\r\n`\r\n\r\n实例的生命周期\r\n下面的图是vue实例的整个生命周期。\r\n\r\n在vue实例创建的过程中，有一些hook会被调用。我们可以通过修改这些hook来执行自定义的操作。 hook有created, mounted, updated, destroyed.\r\n`vue\r\nvar vm = new Vue({\r\n  data: {\r\n    a: 1\r\n  },\r\n  created: function () {\r\n    // this points to the vm instance\r\n    console.log('a is: ' + this.a)\r\n  }\r\n})\r\n// - \"a is: 1\"\r\n`\r\n 模板语法\r\n所有的vue模板都是有效的HTML代码。Vue通过模板引擎将Vue的模板编译成虚拟DOM渲染函数。结合响应系统，Vue能够智能地找出重新渲染的最小代价，并将其重新渲染到DOM上。\r\n如果喜欢使用原生的JavaScript，可以使用JSX语法直接写渲染函数。\r\n\r\n插值\r\n 文本\r\n数据绑定最常见的形式就是使用两个大括号（Mustache）括起来的文本形式\r\n`\r\nspanMessage: {{msg}} /span\r\n`\r\n括号中的msg将会被数据对象的msg属性替换掉。绑定的数据对象上msg属性发生了改变，插值处的内容都会更新。\r\n使用v-once指令可以只执行一次插值，后续数据对象的msg属性发生变化，插值处的内容也不会更改\r\n`vue\r\nspan v-onceThis will never change: {{msg}}/span\r\n`\r\n纯HTML\r\n使用Mustache语法的文本数据将会被解释为纯文本，如果想要输出HTML，需要使用v-html指令：\r\n`\r\ndiv v-html=\"rawHtml\"/div\r\n`\r\n使用该方式插入的HTML数据绑定会被忽略。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。\r\n动态渲染的任意 HTML 会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容插值。\r\n 属性\r\n在HTML的属性上使用v-bind指令，而不是Mustache\r\n`\r\ndiv v-bind:id=\"dynamicId\"/div\r\n`\r\n如果绑定的数据类型是boolean类型，如果值为false，该属性将会被移除\r\n使用JavaScript表达式\r\n可以在Mustache中使用JavaScript表达式\r\n`\r\n{{number+1}}\r\n{{ok ? 'yes':'no}}\r\n{{msg.split('').reverse().join('')}}\r\ndiv v-bind:id=\"'list-'+id\"/div\r\n`\r\n模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如Math和Date。自定义的全局变量不能够被访问到。\r\n 指令\r\n指令是以vr-开头的属性，指令的属性值应该会是一个单独的JavaScript表达式。指令的功能是在其表达式的值改变时将其对应的DOM进行重新渲染\r\n`\r\np v-if=\"seen\"Now you see me/p\r\n`\r\n参数 arguments\r\n有些指令能接收一个“参数”，在指令后以冒号指明。例如，v-bind指令被用来响应地更新 HTML 属性：\r\n`\r\na v-bind:href=\"url\"/a  缩写 a :href=\"url\"/a\r\na v-on:click=\"doSomething\"/a 缩写 a @click=\"doSomething\"/a\r\n`\r\n在这里href是参数，将该元素的href属性与url的值进行绑定\r\n 修饰符\r\n修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\r\n`\r\nform v-on:submit.prevent=\"onSubmit\"/form\r\n`\r\n过滤器\r\n过滤器可以用在Mustache插值和v-bind表达式中，由管道符号 |指定。过滤器的设计目的就是为了用于文本转换，如果需要使用复杂的数据变换，应该是使用计算属性。\r\n因为过滤器是JavaScript函数，因此可以向其传递参数。\r\n`\r\n{{msg | capitalize | filterA | filterB('arg1', 'arg2' }}\r\ndiv v-bind:id=\"rawId | formatId\"/div\r\n\r\nnew Vue({\r\n  // ...\r\n  filters: {\r\n    capitalize: function (value) {\r\n      if (!value) return ''\r\n      value = value.toString()\r\n      return value.charAt(0).toUpperCase() + value.slice(1)\r\n    }\r\n  }\r\n})\r\n`\r\n\r\n 计算属性和监控\r\n计算属性\r\n\r\n在模板内使用表达式是非常方斌啊的，但是他们只能用来做简单的计算。在模板中放入太多的逻辑会让模板过重且难以维护。例如：\r\n`javascript\r\ndiv id=\"example\"\r\n    {{message.split('').reverse().join('')}}\r\n/div\r\n`\r\n这种情况下模板不再是直观简洁的。当你想要在模板中多次反向显示message的时候，问题会变得更糟糕。\r\n因此，对于复杂逻辑，建议使用计算属性。\r\n 示例\r\n`html\r\ndiv id=\"example\"\r\n    pOriginal message: \"{{ message }}\"/p\r\n    pComputed reversed message: \"{{ reversedMessage }}\"/p\r\n/div\r\n`\r\n`javascript\r\nvar vm = new Vue({\r\n   el: \"#example\",\r\n    data: {\r\n        message: \"hello\"\r\n    },\r\n    computed: {\r\n        reversedMessage: function () {\r\n            // this 指向vm实例\r\n            return this.message.split('').reverse().join('');\r\n        }\r\n    }\r\n});\r\n`\r\n在上面的例子中，我们声明了一个计算属性reversedMessage，函数vm.reversedMessage作为属性reversedMessage的getter方法。\r\nvm.reversedMessage的值依赖于message的值，当message发生变化时，vm.reversedMessage的绑定也会更新。\r\n计算属性 vs 方法\r\n可以通过表达式调用方法来实现同样的效果。而计算属性是基于他们的依赖进行缓存的，计算属性只有在他依赖的发生改变时，才会重新求值。多次访问reversedMessage计算属性会立即返回之前计算的结果，而不会再重新计算。\r\n缓存是为了避免重复计算，尤其是性能开销比较大的计算。\r\n 计算属性 vs Watched属性\r\nVue 确实提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：watch 属性。当有些数据需要基于其他数据改变而改变时，可能会滥用watch。然而，使用计算属性比使用watch更好。如下例：\r\n`\r\ndiv id=\"demo\"{{ fullName }}/div\r\n`\r\n`javascript\r\nvar vm1 = new Vue({\r\n   el: '#demo',\r\n    data: {\r\n        firstName: 'Foo',\r\n        lastName: 'Bar',\r\n        fullName: 'Foo Bar'\r\n    },\r\n    watch: {\r\n        firstName: function (val) {\r\n            this.fullName = val + ' ' + this.lastName\r\n        },\r\n        lastName: function (val) {\r\n            this.fullName = this.firstName + ' ' + val\r\n        }\r\n    }\r\n});\r\n`\r\n上面的代码是命令式，重复的，与计算属性相比较：\r\n`javascript\r\nvar vm = new Vue({\r\n    el: '#demo',\r\n    data: {\r\n        firstName: 'Foo',\r\n        lastName: 'Bar'\r\n    },\r\n    computed: {\r\n        fullName: function () {\r\n            return this.firstName + ' ' + this.lastName\r\n        }\r\n    }\r\n})\r\n`\r\n计算属性的Setter\r\n计算属性默认只有getter方法，但是也可以根据需要定义setter\r\n`JavaScript\r\ncomputed: {\r\n    fullName: {\r\n        get: function () {\r\n            return this.firstName + ' ' + this.lastName\r\n        },\r\n        set: function (newValue) {\r\n            var names = newValue.split(' ');\r\n            this.firstName = names[0];\r\n            this.lastName = names[names.length - 1]\r\n        }\r\n    }\r\n}\r\n`\r\n当运行vm.fullName = 'John Doe'时，set方法会被调用，vm.firstName和vm.lastName的值也会更新。\r\n Watchers\r\n在大多数情况下，计算属性都比watch更合适。但是在执行异步操作或者开销较大时，watch更合适。\r\n`html\r\ndiv id=\"watch-example\"\r\n  p\r\n    Ask a yes/no question:\r\n    input v-model=\"question\"\r\n  /p\r\n  p{{ answer }}/p\r\n/div\r\n`\r\n`\r\n!-- Since there is already a rich ecosystem of ajax libraries    --\r\n!-- and collections of general-purpose utility methods, Vue core --\r\n!-- is able to remain small by not reinventing them. This also   --\r\n!-- gives you the freedom to just use what you're familiar with. --\r\nscript src=\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"/script\r\nscript src=\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"/script\r\nscript\r\nvar watchExampleVM = new Vue({\r\n  el: '#watch-example',\r\n  data: {\r\n    question: '',\r\n    answer: 'I cannot give you an answer until you ask a question!'\r\n  },\r\n  watch: {\r\n    // 如果 question 发生改变，这个函数就会运行\r\n    question: function (newQuestion) {\r\n      this.answer = 'Waiting for you to stop typing...'\r\n      this.getAnswer()\r\n    }\r\n  },\r\n  methods: {\r\n    // _.debounce 是一个通过 lodash 限制操作频率的函数。\r\n    // 在这个例子中，我们希望限制访问yesno.wtf/api的频率\r\n    // ajax请求直到用户输入完毕才会发出\r\n    // 学习更多关于 _.debounce function (and its cousin\r\n    // _.throttle), 参考: https://lodash.com/docs#debounce\r\n    getAnswer: _.debounce(\r\n      function () {\r\n        var vm = this\r\n        if (this.question.indexOf('?') === -1) {\r\n          vm.answer = 'Questions usually contain a question mark. ;-)'\r\n          return\r\n        }\r\n        vm.answer = 'Thinking...'\r\n        axios.get('https://yesno.wtf/api')\r\n          .then(function (response) {\r\n            vm.answer = _.capitalize(response.data.answer)\r\n          })\r\n          .catch(function (error) {\r\n            vm.answer = 'Error! Could not reach the API. ' + error\r\n          })\r\n      },\r\n      // 这是我们为用户停止输入等待的毫秒数\r\n      500\r\n    )\r\n  }\r\n})\r\n/script\r\n`\r\n\r\nClass与Style绑定\r\n因为元素的class和style都是属性，所以可以使用v-bind处理他们。但是由于字符串拼接容易出错，因此vue对此专门进行了加强。表达式的结果类型除了字符串外，还可以是对象或数组。\r\n 绑定class\r\n对象语法\r\n可以通过传给v-bind:class一个对象，动态地切换class。也可以在对象中传入更多属性用来动态切换多个class，v-bind:class指令可以与普通的class属性共存。。\r\n`\r\ndiv class=\"static\" v-bind:class=\"{ active:isActive, 'text-danger': hasError}/div\r\n`\r\n上面的语法表示 class active 的更新将取决于数据属性 isActive 是否为真值 。\r\n也可以绑定一个对象，也可以绑定返回对象的计算属性：\r\n`\r\ndiv v-bind:class=\"classObject\"/div\r\nscript\r\ndata: {\r\n    isActive: true,\r\n    error: null\r\n},\r\ncomputed: {\r\n    classObject: function () {\r\n        return {\r\n            active: this.isActive && !this.error,\r\n            'text-danger': this.error && this.error.type === 'fatal',\r\n        }\r\n    }\r\n}\r\n/script\r\n`\r\n\r\n 数组语法\r\n将一个数据传递给v-bind:class，以应用一个class列表\r\n`\r\ndiv v-bind:class=\"[activeClass, errorClass]\"\r\ndata: {\r\n    activeClass: 'active',\r\n    errorClass: 'text-danger'\r\n}\r\n`\r\n渲染为：\r\n`\r\ndiv class=\"active text-danger\"/div\r\n`\r\n如果要根据条件切换列表中的class，可以用三元表达式：\r\n`\r\ndiv v-bind:class=\"[isActive?activeClass:'', errorClass]\"\r\n`\r\nisActive为true时，才添加activeClass\r\n当有多个条件时，这样写比较繁琐。可以在数组语法中使用对象语法。\r\n\r\n用在组件上\r\n在一个定制的组件上用到class属性的时候，这些类将被添加到根元素上，这个元素上已经存在的类不会被覆盖。\r\n`\r\nVue.component('myComponent', {\r\n    template: 'p class=\"foo bar\"Hi/p'\r\n})\r\n`\r\n然后使用该组件渲染时，添加一下class：\r\n`\r\nmyComponent class=\"baz boo\"/myComponent\r\n`\r\nHTML最终将会被渲染为\r\n`\r\np class=\"foo bar baz boo\"Hi/p\r\n`\r\n自定义组件，同样可以绑定HTML class：\r\n`\r\nmyComponent class=\"baz boo\" v-bind:class=\"{active:isActive}\"/myComponent\r\n`\r\n 绑定内联样式\r\n对象语法\r\nv-bind:style的对象语法非常像CSS，CSS属性名可以用驼峰式（camelCase）或者短横分隔符命名(kabab-case):\r\n`\r\ndiv v-bind:style=\"{color:activeColor, fontSize:fontSize+'px'}\"/div\r\n`\r\n也可以直接绑定一个对象\r\n`\r\ndiv v-bind:style=\"styleObject\"/div\r\nscript\r\ndata:{\r\n    styleObject:{\r\n       color: 'red',\r\n       fontSize: '13px'\r\n    }\r\n}\r\n`\r\n 自动添加前缀\r\n当v-bind:style使用的属性需要添加特定前缀时，如transform，Vue会自动添加\r\n\r\n条件渲染\r\n v-if\r\n可以使用v-if来判断是否展示某个元素，当然也可以组合v-else，v-else元素必须紧跟在v-if或者v-else-if后边\r\n`\r\ndiv v-if=\"type === 'A'\"A/div\r\ndiv v-else-if=\"type === 'B'\"B/div\r\ndiv v-elseNot A/B/div\r\n`\r\n在template中使用v-if条件组\r\n如果想要切换多个元素，可以使用v-template元素来包装元素，并在上边使用v-if，最终渲染的HTML并不会包含template\r\n`\r\ntemplate v-if=\"ok\"\r\n   h1Title/h1\r\n   pParagraph 1/p\r\n/tempalte\r\n`\r\n 用key管理可复用的元素\r\nVue会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。例如，允许用户在不同的登录方式之间切换\r\n`\r\ntemplate v-if=\"loginType === 'username'\"\r\n  labelUsername/label\r\n  input placeholder=\"Enter your username\"\r\n/template\r\ntemplate v-else\r\n  labelEmail/label\r\n  input placeholder=\"Enter your email address\"\r\n/template\r\n`\r\n在上面两个切换时，不会清除用户已经输入的内容，两个模板使用了相同的元素，input不会被替换，只是替换了它的placehoder.\r\n如果这样不符合实际需求，可以使用key属性来表明元素不要复用\r\n`\r\ntemplate v-if=\"loginType === 'username'\"\r\n  labelUsername/label\r\n  input placeholder=\"Enter your username\" key=\"username-input\"\r\n/template\r\ntemplate v-else\r\n  labelEmail/label\r\n  input placeholder=\"Enter your email address\" key=\"email-input\"\r\n/template\r\n`\r\nv-show\r\nv-show也会根据条件展示元素：\r\n`\r\nh1 v-show=\"ok\"Hello!/h1\r\n`\r\n不同的是，v-show的元素会始终保留在渲染的DOM中。该指令只是简单地切换元素的CSS属性display，它不支持template语法\r\n v-if vs v-show\r\nv-if 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\r\nv-if也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\r\n相比之下，v-show就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。\r\n一般来说，v-if有更高的切换开销，而v-show有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用v-show较好；如果在运行时条件不太可能改变，则使用v-if较好。\r\n列表渲染\r\n v-for\r\n用v-for指令根据一组数组的选项列表进行渲染，v-for指令需要以item in items形式的特殊语法，items是源数据数组并且item是数组元素迭代的别名。\r\n基本用法\r\n在v-for块中，对副作用域属性具有完全访问权限，v-for还支持一个可选的第二个参数作为索引。\r\n可以用of 代替in.\r\n`\r\nul id=\"list_1\"\r\n    li v-for=\"(item,index) in/of items\"\r\n       {{ index }}. {{ item.message }}\r\n    /li\r\n/ul\r\n`\r\n其中数据为：\r\n`\r\nvar list_1 = new Vue({\r\n    el: 'list_1',\r\n    data: {\r\n        items: [\r\n            {message: 'Foo' },\r\n            {message: 'Bar' }\r\n        ]\r\n    }\r\n});\r\n`\r\nTemplate v-for\r\n可以在template标签中使用v-for来渲染多个模块。\r\n`\r\nul\r\n    template v-for=\"item in items\"\r\n        li{{item.message}}/li\r\n        liother info/li\r\n    /template\r\n/ul\r\n`\r\n 对象迭代v-for\r\n可以用v-for来迭代一个对象的属性。\r\n`\r\nul id=\"repeat-object\" class=\"demo\"\r\ndiv v-for=\"(value, key, index) in object\"\r\n  {{ index }}. {{ key }} : {{ value }}\r\n/div\r\n/ul\r\n`\r\n`\r\nvar object = new Vue({\r\n  el: '#repeat-object',\r\n  data: {\r\n    object: {\r\n      FirstName: 'John',\r\n      LastName: 'Doe',\r\n      Age: 30\r\n    }\r\n  }\r\n})\r\n`\r\n注意：使用v-for迭代数据或者对象属性时，修改属性时，可以这样： list_1.items.push({message:'data'});类型要与items中的类型一致。\r\n整数迭代v-for\r\n`\r\ndiv\r\n  span v-for=\"n in 10\"{{ n }}/span\r\n/div\r\n`\r\n上面的例子是从1开始的。\r\n 组件和v-for\r\n在自定义组件里，可以像使用任何普通元素一样使用v-for。组件中使用v-for不能自动将数据传递到数组里，因为组件有自己的作用域。为了传递数据到组件，需要用到props:\r\n`\r\nmyComponent v-for=\"item in items\" :key=\"item.id\"/myComponent\r\n<myComponent\r\n  v-for=\"(item, index) in items\"\r\n  v-bind:item=\"item\"\r\n  v-bind:index=\"index\"\r\n  v-bind:key=\"item.id\"\r\n/myComponent\r\n`\r\n下边是一个完整的例子：\r\n`\r\ndiv id=\"todo-list-example\"\r\n  <input\r\n    v-model=\"newTodoText\"\r\n    v-on:keyup.enter=\"addNewTodo\"\r\n    placeholder=\"Add a todo\"\r\n  \r\n  ul\r\n    <li\r\n      is=\"todo-item\"\r\n      v-for=\"(todo, index) in todos\"\r\n      v-bind:title=\"todo\"\r\n      v-on:remove=\"todos.splice(index, 1)\"\r\n    /li\r\n  /ul\r\n/div\r\nscript\r\nVue.component('todo-item', {\r\n  template: `\r\n    li\r\n      {{ title }}\r\n      button v-on:click=\"$emit('remove')\"X/button\r\n    /li\r\n  `,\r\n  props: ['title']\r\n});\r\nnew Vue({\r\n  el: '#todo-list-example',\r\n  data: {\r\n    newTodoText: '',\r\n    todos: [\r\n      'Do the dishes',\r\n      'Take out the trash',\r\n      'Mow the lawn'\r\n    ]\r\n  },\r\n  methods: {\r\n    addNewTodo: function () {\r\n      this.todos.push(this.newTodoText)\r\n      this.newTodoText = ''\r\n    }\r\n  }\r\n});\r\n/script\r\n`\r\nv-for与v-if一同使用\r\n当这两个指令在同一个节点时，v-for的优先级比v-if高。在每个v-for循环中，v-if都会运行。\r\n`\r\nli v-for=\"todo in todos\" v-if=\"!todo.isComplete\"{{todo}}/li\r\n`\r\n上边的代码只展示了isComplete为false的值。\r\n如果想根据条件判断是否执行循环，可以用template包裹元素v-if:\r\n`\r\nul v-if=\"shouldRenderTodos\"\r\n  li v-for=\"todo in todos\"\r\n    {{ todo }}\r\n  /li\r\n/ul\r\n`\r\n key\r\nv-for在更新已渲染过的元素列表时，它默认用“就地复用”的策略。如果数据项的顺序被改变，Vue不移动DOM元素来匹配数据顺序，而是简单复用每个元素，并确保它在特定索引下显示已经被渲染过的每个元素。\r\n这个默认的模式是有效的，但是只适用于不依赖子组件状态或临时 DOM 状态（例如：表单输入值）的列表渲染输出。\r\n为了能够跟踪每个节点，从而能重用和重排序现有元素，需要为每项提供一个唯一key属性。每个key值都有唯一id\r\n`\r\ndiv v-for=\"item in items\" :key=\"item.id\"\r\n  !-- 内容 --\r\n/div\r\n`\r\n数组更新检测\r\n 变异方法\r\nVue包含一组观察数组的变异方法，他们也会触发视图更新：\r\npush()\r\npop()\r\nshift()\r\nunshift()\r\nsplice()\r\nsort()\r\nreverse()\r\n重塑数组\r\n如果不是变异方法，那么不会触发视图更新，可以用新数组替换旧数组。Vue采用了一些智能启发式方式来最大化DOM元素重用，所以替换是一个相对高效的方式：\r\n`\r\nexample1.items = example1.items.filter(function (item) {\r\n  return item.message.match(/Foo/)\r\n})\r\n`\r\n 注意事项\r\n由于 JavaScript 的限制， Vue 不能检测以下变动的数组：\r\n利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue\r\n修改数组的长度时，例如：vm.items.length = newLength\r\n对于第一类问题，可以用一下方法触发更新：\r\n`\r\n// Vue.set\r\nVue.set(example1.items, indexOfItem, newValue)\r\n// Array.prototype.splice 变异方法\r\nexample1.items.splice(indexOfItem, 1, newValue)\r\n`\r\n对于第二类问题，可以使用splice\r\n`\r\nexample1.items.splice(newLength)\r\n`\r\n\r\n显示过滤/排序结果\r\n若果要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据。在这种情况下，可以创建返回过滤或排序数组的计算属性。\r\n`\r\nli v-for=\"n in evenNumbers\"{{ n }}/li\r\nscript\r\ndata: {\r\n  numbers: [ 1, 2, 3, 4, 5 ]\r\n},\r\ncomputed: {\r\n  evenNumbers: function () {\r\n    return this.numbers.filter(function (number) {\r\n      return number % 2 === 0\r\n    })\r\n  }\r\n}\r\n/script\r\n`\r\n若计算属性不使用，例如： 在嵌套v-for循环中，可以使用method方法\r\n`\r\nli v-for=\"n in even(numbers)\"{{ n }}/li\r\nscript\r\ndata: {\r\n  numbers: [ 1, 2, 3, 4, 5 ]\r\n},\r\nmethods: {\r\n  even: function (numbers) {\r\n    return numbers.filter(function (number) {\r\n      return number % 2 === 0\r\n    })\r\n  }\r\n}\r\n/script\r\n`\r\n\r\n 事件处理器\r\n监听事件\r\n可以用v-on指令监听DOM事件来触发事件：\r\n`\r\ndiv id=\"example-1\"\r\n  button v-on:click=\"counter += 1\"增加 1/button\r\n  p这个按钮被点击了 {{ counter }} 次。/p\r\n/div\r\nscript\r\nvar example1 = new Vue({\r\n  el: 'example-1',\r\n  data: {\r\n    counter: 0\r\n  }\r\n})\r\n/script\r\n`\r\n方法事件处理器\r\n对于复杂的事件处理逻辑，可以使用v-on来接收一个方法调用。\r\n`\r\ndiv id=\"example-2\"\r\n  !-- greet 是在下面定义的方法名 --\r\n  button v-on:click=\"greet\"Greet/button\r\n/div\r\nscript\r\nvar example2 = new Vue({\r\n  el: 'example-2',\r\n  data: {\r\n    name: 'Vue.js'\r\n  },\r\n  // 在 methods 对象中定义方法\r\n  methods: {\r\n    greet: function (event) {\r\n      // this 在方法里指当前 Vue 实例\r\n      alert('Hello ' + this.name + '!')\r\n      // event 是原生 DOM 事件\r\n      if (event) {\r\n        alert(event.target.tagName)\r\n      }\r\n    }\r\n  }\r\n})\r\n/script\r\n`\r\n内联处理器方法\r\n除了直接绑定到一个方法，也可以用内联的JavaScript语句，如果庶在内联语句中范文原生DOM事件event，可以将特殊变量$event传入方法中：\r\n`\r\ndiv id=\"example-3\"\r\n  button v-on:click=\"say('hi')\"Say hi/button\r\n  button v-on:click=\"say('what', $event)\"Say what/button\r\n/div\r\nscript\r\nnew Vue({\r\n  el: 'example-3',\r\n  methods: {\r\n    say: function (message, event) {\r\n      if (event) event.preventDefault();\r\n      alert(message);\r\n    }\r\n  }\r\n})\r\n/script\r\n`\r\n事件修饰符\r\n可以通过v-on的事件修饰符来调用event.preventDefault() 或 event.stopPropagation():\r\n.stop\r\n.prevent\r\n.capture\r\n.self\r\n.once\r\n`\r\n!-- 阻止单击事件冒泡 --\r\na v-on:click.stop=\"doThis\"/a\r\n!-- 提交事件不再重载页面 --\r\nform v-on:submit.prevent=\"onSubmit\"/form\r\n!-- 修饰符可以串联  --\r\na v-on:click.stop.prevent=\"doThat\"/a\r\n!-- 只有修饰符 --\r\nform v-on:submit.prevent/form\r\n!-- 添加事件侦听器时使用事件捕获模式 --\r\ndiv v-on:click.capture=\"doThis\".../div\r\n!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --\r\ndiv v-on:click.self=\"doThat\".../div\r\n!-- 点击事件将只会触发一次（2.1.4新增） --\r\na v-on:click.once=\"doThis\"/a\r\n`\r\n使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。用 @click.prevent.self 会阻止所有的点击，而 @click.self.prevent 只会阻止元素上的点击。\r\n 键值修饰符\r\n在监听键盘事件时，经常需要监测常见的键值。Vue中可以用v-on来监听键盘事件.\r\n`\r\n!-- 只有在 keyCode 是 13 时调用 vm.submit() --\r\ninput v-on:keyup.13=\"submit\"\r\n!-- 同上 --\r\ninput v-on:keyup.enter=\"submit\"\r\n!-- 缩写语法 --\r\ninput @keyup.enter=\"submit\"\r\n`\r\n全部的按键别名：\r\n.enter\r\n.tab\r\n.delete\r\n.esc\r\n.space\r\n.up\r\n.down\r\n.left\r\n.right\r\n除此之外，还可以用config.keyCodes\t对象自定义键值修饰符别名\r\n`\r\n// 可以使用 v-on:keyup.f1\r\nVue.config.keyCodes.f1 = 112\r\n`\r\n修饰健\r\n在2.1.0中，新增了鼠标和辅助健的监听事件\r\n.ctrl\r\n.alt\r\n.shift\r\n.meta\r\n`\r\n!-- Alt + C --\r\ninput @keyup.alt.67=\"clear\"\r\n!-- Ctrl + Click --\r\ndiv @click.ctrl=\"doSomething\"Do something/div\r\n`\r\n修饰键比正常的按键不同；修饰键和 keyup 事件一起用时，事件引发时必须按下正常的按键。换一种说法：如果要引发 keyup.ctrl，必须按下 ctrl 时释放其他的按键；单单释放 ctrl 不会引发事件。\r\n 鼠标监听\r\n在2.1.0中，可以监听鼠标的按键\r\n.left\r\n.right\r\n.middle\r\n在HTML中监听事件的好处\r\n你可能注意到这种事件监听的方式违背了关注点分离（separation of concern）传统理念。不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 v-on 有几个好处：\r\n扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。\r\n因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。\r\n当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。\r\n 表单控件绑定\r\n基础用法\r\nv-model指令可以在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。它是负责监听用户的输入事件以更新数据，并特别处理一些极端的例子的语法糖。\r\n对于要求 IME （如中文、 日语、 韩语等） 的语言，你会发现那v-model不会在 ime 构成中得到更新。如果你也想实现更新，请使用 input事件。\r\n 文本\r\n`\r\ninput v-model=\"message\" placeholder=\"edit me\"\r\npMessage is: {{ message }}/p\r\n`\r\n多行文本\r\n`\r\nspanMultiline message is:/span\r\np style=\"white-space: pre\"{{ message }}/p\r\nbr\r\ntextarea v-model=\"message\" placeholder=\"add multiple lines\"/textarea\r\n`\r\n在文本区域插值( textarea/textarea ) 并不会生效，应用 v-model 来代替\r\n 复选框\r\n单个勾选框，逻辑值\r\n`\r\ninput type=\"checkbox\" id=\"checkbox\" v-model=\"checked\"\r\nlabel for=\"checkbox\"{{ checked }}/label\r\n`\r\n多个勾选框，绑定到同一个数组\r\n`\r\ninput type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\"\r\nlabel for=\"jack\"Jack/label\r\ninput type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\"\r\nlabel for=\"john\"John/label\r\ninput type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\"\r\nlabel for=\"mike\"Mike/label\r\nbr\r\nspanChecked names: {{ checkedNames }}/span\r\nscript\r\nnew Vue({\r\n  el: '...',\r\n  data: {\r\n    checkedNames: []\r\n  }\r\n})\r\n/script\r\n`\r\n其他表单情况\r\n组件\r\n组件（Component）是Vue.js最强大的功能之一。组件可以扩展HTML元素，封装可重用的代码。组件是自定义的元素，Vue.js编译器为它添加特殊功能。在有些情况下，组件也可以是原生HTML元素的形式，以is特性扩展。\r\n 使用组件\r\n全局注册\r\n要注册一个全局组件，可以使用Vue.component(tagName, options)。\r\n`\r\nVue.component('my-component', {\r\n  // 选项\r\n})\r\n`\r\n组件在注册后，便可以在父实例的模块中自定义元素。要保证在初始化根实例之前注册了组件\r\n`\r\ndiv id=\"example\"\r\n  my-component/my-component\r\n/div\r\nscript\r\n// 注册\r\nVue.component('my-component', {\r\n  template: 'divA custom component!/div'\r\n})\r\n// 创建根实例\r\nnew Vue({\r\n  el: 'example'\r\n})\r\n/script\r\n`\r\n局部注册\r\n没有必要所有的组件都注册在全局中，可以通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用。这种封装也适用于其它可注册的 Vue 功能，如指令。\r\n`\r\nvar Child = {\r\n  template: 'divA custom component!/div'\r\n}\r\nnew Vue({\r\n  // ...\r\n  components: {\r\n    // my-component 将只在父模板可用\r\n    'my-component': Child\r\n  }\r\n})\r\n`\r\n DOM 模板解析说明\r\n使用DOM作为模板时，会受到HTML的一些限制。因为Vue只要在浏览器解析和标准化HTML之后才能获取模板内容。尤其是ul, ol, table, select限制了能被它包裹的元素。\r\n在自定义组件中使用这些首限制的元素时会导致一些问题：\r\n`\r\ntable\r\n    my-row.../my-row\r\n/table\r\n`\r\n自定义组件my-row被认为是无效的内容，在渲染的时候会出现问题。可以用下面的方法来绕过HTML的限制\r\n`\r\ntable\r\n  tr is=\"my-row\"/tr\r\n/table\r\n`\r\ndata必须是函数\r\n通过Vue构造器传入的各种选项大多数可以在组件里用。data是一个例外，他必须是函数。\r\n`\r\nVue.component('my-component', {\r\n  template: 'span{{ message }}/span',\r\n  data: {\r\n    message: 'hello'\r\n  }\r\n})\r\n`\r\n在上述代码中，Vue会停止运行，并在控制台报警。可以通过以下方式绕开Vue的警告\r\n`\r\ndiv id=\"example-2\"\r\n  simple-counter/simple-counter\r\n  simple-counter/simple-counter\r\n  simple-counter/simple-counter\r\n/div\r\nscript\r\nvar data = { counter: 0 }\r\nVue.component('simple-counter', {\r\n  template: 'button v-on:click=\"counter += 1\"{{ counter }}/button',\r\n  // 技术上 data 的确是一个函数了，因此 Vue 不会警告，\r\n  // 但是我们返回给每个组件的实例的却引用了同一个data对象\r\n  data: function () {\r\n    return data\r\n  }\r\n})\r\nnew Vue({\r\n  el: 'example-2'\r\n})\r\n/script\r\n`\r\n由于这三个组件共享了同一个data，因此增加一个counter会影响所有的组件。\r\n构成组件\r\n组件意味着协同工作，组件之间需要通讯。在Vue中，父子组件的关系可以总结为props down，eventsup。父组件通过props向下传递数据给子组件，子组件通过events给父组件发送消息。\r\n\r\n prop\r\n使用prop传递数据\r\n组件实例的作用域是孤立的，这意味着不能(也不应该)在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的props选项。\r\n子组件要显示地用props选项声明它期待获取的数据。\r\n`\r\nchild message=\"hello!\"/child\r\nscript\r\nVue.component('child', {\r\n  // 声明 props\r\n  props: ['message'],\r\n  // 就像 data 一样，prop 可以用在模板内\r\n  // 同样也可以在 vm 实例中像 “this.message” 这样使用\r\n  template: 'span{{ message }}/span'\r\n})\r\n/script\r\n`\r\n 驼峰式 vs 短划线式\r\nHTML特性是不区分大小写。所以，当不使用字符串模板，驼峰式命名的prop需要转换为相应的短划线式命名：\r\n`\r\n!-- kebab-case in HTML --\r\nchild my-message=\"hello!\"/child\r\nscript\r\nVue.component('child', {\r\n  // camelCase in JavaScript\r\n  props: ['myMessage'],\r\n  template: 'span{{ myMessage }}/span'\r\n})\r\n/script\r\n`\r\n动态prop\r\n在模板中，要动态绑定父组件的数据到子模板的props，与绑定到任何普通的HTML特性相似，用v-bind。当父组件的数据变化时，该变化也会传导给子组件：\r\n`\r\ndiv\r\n  input v-model=\"parentMsg\"\r\n  br\r\n  child v-bind:my-message=\"parentMsg\"/child\r\n/div\r\n`\r\n 单向数据流\r\nprop是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件修改父组件的状态。\r\n另外，每次父组件更新时，子组件的所有prop都会更新为最新值。这意味着你不应该在子组件内部改变prop。\r\n定义一个局部变量，并用 prop 的值初始化它：\r\n`\r\nprops: ['initialCounter'],\r\ndata: function () {\r\n  return { counter: this.initialCounter }\r\n}\r\n`\r\n定义一个计算属性，处理 prop 的值并返回。\r\n`\r\nprops: ['size'],\r\ncomputed: {\r\n  normalizedSize: function () {\r\n    return this.size.trim().toLowerCase()\r\n  }\r\n}\r\n`\r\nprop 验证\r\n可以为组件的props指定验证规格，如果传入的数据不符合规格，Vue会发出警告。\r\n要指定验证规格，需要用对象的形式，而不是字符串数组。\r\n`\r\nVue.component('example', {\r\n  props: {\r\n    // 基础类型检测 （null 意思是任何类型都可以）\r\n    propA: Number,\r\n    // 多种类型\r\n    propB: [String, Number],\r\n    // 必传且是字符串\r\n    propC: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // 数字，有默认值\r\n    propD: {\r\n      type: Number,\r\n      default: 100\r\n    },\r\n    // 数组／对象的默认值应当由一个工厂函数返回\r\n    propE: {\r\n      type: Object,\r\n      default: function () {\r\n        return { message: 'hello' }\r\n      }\r\n    },\r\n    // 自定义验证函数\r\n    propF: {\r\n      validator: function (value) {\r\n        return value  10\r\n      }\r\n    }\r\n  }\r\n})\r\n`\r\ntype可用的原生构造器有： String, Number, Boolean, Fucntion, Object, Array， type也可以是一个自定义构造函数，使用instanceof检测\r\n 自定义事件\r\n使用自定义事件将数据从子组件传递到父组件。绑定的事件是父组件的methods方法\r\n使用v-on绑定自定义事件\r\n使用$on(eventName)监听事件\r\n使用$emit(eventName) 触发事件\r\n`\r\ndiv id=\"counter-event-example\"\r\n  p{{ total }}/p\r\n  button-counter v-on:increment=\"incrementTotal\"/button-counter\r\n  button-counter v-on:increment=\"incrementTotal\"/button-counter\r\n/div\r\nscript\r\nVue.component('button-counter', {\r\n  template: 'button v-on:click=\"increment\"{{ counter }}/button',\r\n  data: function () {\r\n    return {\r\n      counter: 0\r\n    }\r\n  },\r\n  methods: {\r\n    increment: function () {\r\n      this.counter += 1\r\n      this.$emit('increment')\r\n    }\r\n  },\r\n})\r\nnew Vue({   // 父组件\r\n  el: 'counter-event-example',\r\n  data: {\r\n    total: 0\r\n  },\r\n  methods: {\r\n    incrementTotal: function () {\r\n      this.total += 1\r\n    }\r\n  }\r\n})\r\n/script\r\n`\r\n可以使用.native修饰v-on来在某个组件的根元素上监听一个原生事件。\r\n`\r\nmy-component v-on:click.native=\"doTheThing\"/my-component\r\n`\r\n使用自定义事件的表单输入组件\r\n自定义事件可以用来创建自定义的表单输入组件，使用v-model来进行数据双向绑定.\r\n`\r\ninput v-model=\"something\"\r\n`\r\n可以看做是以下实例的语法糖：\r\n`\r\ninput v-bind:value=\"something\" v-on:input=\"something = $event.target.value\"\r\n`\r\n所以要让组件的v-model生效，它必须：\r\n接收一个value属性\r\n在有新的value时触发input事件\r\n`\r\ndiv id=\"app\"\r\n  <currency-input \r\n    label=\"Price\" \r\n    v-model=\"price\"\r\n  /currency-input\r\n  <currency-input \r\n    label=\"Shipping\" \r\n    v-model=\"shipping\"\r\n  /currency-input\r\n  <currency-input \r\n    label=\"Handling\" \r\n    v-model=\"handling\"\r\n  /currency-input\r\n  <currency-input \r\n    label=\"Discount\" \r\n    v-model=\"discount\"\r\n  /currency-input\r\n  \r\n  pTotal: ${{ total }}/p\r\n/div\r\n`\r\n`\r\nVue.component('currency-input', {\r\n  template: '\\\r\n    div\\\r\n      label v-if=\"label\"{{ label }}/label\\\r\n      $\\\r\n      <input\\\r\n        ref=\"input\"\\\r\n        v-bind:value=\"value\"\\\r\n        v-on:input=\"updateValue($event.target.value)\"\\\r\n        v-on:focus=\"selectAll\"\\\r\n        v-on:blur=\"formatValue\"\\\r\n      \\\r\n    /div\\\r\n  ',\r\n  props: {\r\n    value: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    label: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  mounted: function () {\r\n    this.formatValue()\r\n  },\r\n  methods: {\r\n    updateValue: function (value) {\r\n      var result = currencyValidator.parse(value, this.value)\r\n      if (result.warning) {\r\n        this.$refs.input.value = result.value\r\n      }\r\n      this.$emit('input', result.value)\r\n    },\r\n    formatValue: function () {\r\n      this.$refs.input.value = currencyValidator.format(this.value)\r\n    },\r\n    selectAll: function (event) {\r\n      // Workaround for Safari bug\r\n      // http://stackoverflow.com/questions/1269722/selecting-text-on-focus-using-jquery-not-working-in-safari-and-chrome\r\n      setTimeout(function () {\r\n      \tevent.target.select()\r\n      }, 0)\r\n    }\r\n  }\r\n})\r\n\r\nnew Vue({\r\n  el: 'app',\r\n  data: {\r\n    price: 0,\r\n    shipping: 0,\r\n    handling: 0,\r\n    discount: 0\r\n  },\r\n  computed: {\r\n    total: function () {\r\n      return ((\r\n        this.price * 100 + \r\n        this.shipping * 100 + \r\n        this.handling * 100 - \r\n        this.discount * 100\r\n      ) / 100).toFixed(2)\r\n    }\r\n  }\r\n})\r\n`\r\n非父子组件通信\r\n如果两个组件不是父子关系，可以使用一个空的Vue实例作为中间通信。在复杂的情况下，我们应该考虑使用专门的 状态管理模式.\r\n`\r\nvar bus = new Vue();\r\n/ 触发组件 A 中的事件\r\nbus.$emit('id-selected', 1)\r\n// 在组件 B 创建的钩子中监听事件\r\nbus.$on('id-selected', function (id) {\r\n  // ...\r\n})\r\n`\r\n 使用slot分发内容\r\n在使用组件的时候，尝尝会像这样组合他们：\r\n`\r\napp\r\n  app-header/app-header\r\n  app-footer/app-footer\r\n/app\r\n`\r\napp组件不知道它会收到什么内容，这是由使用app的父组件决定的\r\napp组件可能有他自己的模板\r\n为了让组件可以组合，我们可以使用内容分发来混合父组件的内容和子组件自己的模板，使用slot元素作为原始内容的插槽。\r\n\r\n编译作用域\r\n我们需要先明确内容在哪个作用域里编译，假定模板为：\r\n`\r\nchild-component\r\n  {{ message }}\r\n/child-component\r\n`\r\nmessage绑定到的是父组件的数据。组件的作用域简单地说就是：\r\n父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\r\n一个常见错误是试图在父组件模板内将一个指令绑定到子组件的属性/方法：\r\n`\r\n!-- 无效 --\r\nchild-component v-show=\"someChildProperty\"/child-component\r\n`\r\n上例中，父组件不知道子组件的状态。\r\n如果要绑定作用域内的指令到一个组件的根节点，应当在组件自己的模板上做：\r\n`\r\nVue.component('child-component', {\r\n  // 有效，因为是在正确的作用域内\r\n  template: 'div v-show=\"someChildProperty\"Child/div',\r\n  data: function () {\r\n    return {\r\n      someChildProperty: true\r\n    }\r\n  }\r\n})\r\n`\r\n 单个slot\r\n如果子组件模板中不包含slot，父组件的内容才会被丢弃。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。\r\nslot 标签中的任何内容都被视为备用内容。只有在没有分发内容时，才会显示.\r\n假定my-component组件有下面模板：\r\n`\r\ndiv\r\n  h2我是子组件的标题/h2\r\n  slot\r\n    只有在没有要分发的内容时才会显示。\r\n  /slot\r\n/div\r\n`\r\n父组件模板：\r\n`\r\ndiv\r\n  h1我是父组件的标题/h1\r\n  my-component\r\n    p这是一些初始内容/p\r\n    p这是更多的初始内容/p\r\n  /my-component\r\n/div\r\n`\r\n渲染结果：\r\n`\r\ndiv\r\n  h1我是父组件的标题/h1\r\n  div\r\n    h2我是子组件的标题/h2\r\n    p这是一些初始内容/p\r\n    p这是更多的初始内容/p\r\n  /div\r\n/div\r\n`\r\n有名字的slot\r\nslot元素可以用一个特殊的属性name来配置如何分发内容。多个slot可以有不同的名字。具名slot将匹配内容片段中有对应slot特性的元素。\r\n仍然可以有一个匿名slot，它是默认slot，作为找不到匹配的内容片段的备用插槽。如果没有默认的slot，这些找不到匹配的内容片段将被抛弃。\r\n假如，有一个app-layout组件，它的模板为：\r\n`\r\napp-layout\r\n  h1 slot=\"header\"这里可能是一个页面标题/h1\r\n  p主要内容的一个段落。/p\r\n  p另一个主要段落。/p\r\n  p slot=\"footer\"这里有一些联系信息/p\r\n/app-layout\r\n\r\n`\r\n父组件模板：\r\n`\r\ndiv class=\"container\"\r\n  header\r\n    slot name=\"header\"/slot\r\n  /header\r\n  main\r\n    slot/slot\r\n  /main\r\n  footer\r\n    slot name=\"footer\"/slot\r\n  /footer\r\n/div\r\n`\r\n渲染结果为\r\n`\r\ndiv class=\"container\"\r\n  header\r\n    h1这里可能是一个页面标题/h1\r\n  /header\r\n  main\r\n    p主要内容的一个段落。/p\r\n    p另一个主要段落。/p\r\n  /main\r\n  footer\r\n    p这里有一些联系信息/p\r\n  /footer\r\n/div\r\n`",
        "tags": []
    },
    {
        "uri": "/post/front/apply和call的区别",
        "content": "---\r\ntitle: apply和call\r\ndate: 2017-06-17 19:48:32\r\ntags: [\"javascript\"]\r\ncategories: [\"javascript\"]\r\n---\r\n\r\nJavaScript中每个函数都包含两个非继承而来的方法：apply()和call().\r\napply()方法接收两个参数：运行调用函数的作用域；参数数组或者arguments对象。\r\ncall()方法同apply()不同之处在于除了第一个参数是函数运行的作用域，其余参数都是直接传递给函数的，因此使用call()方法时传递的参数必须全部列举出来。\r\n!-- more --\r\n\r\n`js\r\nfunction sum(num1, num2) {\r\n\tconsole.log(num1 + num2);\r\n}\r\n\r\nfunction timeoutCall(context, f) {\r\n\tvar len = arguments.length;\r\n\tvar args = [];\r\n\tfor (var i = 2; i < len; i++) {\r\n\t\targs.push(arguments[i]);\r\n\t}\r\n\treturn function() {\r\n\t\tf.apply(context, args);\r\n\t}\r\n}\r\n\r\ntimeoutCall(this, sum, 1,2);\r\n`\r\n上述方法可以用在setTimeout中，用来维持函数原有的作用域。",
        "tags": []
    },
    {
        "uri": "/post/front/css 动画",
        "content": "---\r\ntitle: css 动画\r\ndate: 2017-12-01 12:00:00\r\ntags: [\"javascript\"]\r\n---\r\n\r\nlink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\r\n\r\ntransitions\r\n可以通过设置 transitions 来实现过渡效果。其用法如下：\r\n`CSS\r\ntransition:  [ transition-property |\r\n               transition-duration |\r\n               transition-timing-function |\r\n               transition-delay ]\r\n`\r\n!-- more --\r\n{{ html }}\r\nstyle.wrapper{position:relative;border:1px aaa solid;width:500px;height:500px;margin:0 auto 10px;padding:10px}.shadow{-webkit-box-shadow:5px 5px 5px #aaa;-moz-box-shadow:5px 5px 5px #aaa;box-shadow:5px 5px 5px #aaa;margin-bottom:10px}.normal,.example2,.example3{width:100px;height:100px;position:absolute;top:210px;left:210px;border-radius:50px;background-color:red;text-align:center;transition:all 1s ease-in-out}.example2{background-color:blue;transition-property:top,left;transition-duration:1s,1s;transition-delay:0s,1s}.example3{background-color:purple;transition-property:top,left,border-radius,background-color;transition-duration:2s,1s,0.5s,0.5s;transition-delay:0s,0.5s,1s,1.5s}.wrapper:hover .normal{top:0;left:0}.wrapper:hover .example2{top:398px;left:398px}.wrapper:hover .example3{top:0;left:398px;border-radius:0}.wrapper p{line-height:70px;color:white;font-weight:bold;margin-left:0 0 10px}/stylediv class=\"wrapper shadow\"div class=\"normal shadow\"pNormal/p/divdiv class=\"example2\"pExample2/p/divdiv class=\"example3\"pExample3/p/div/div\r\n{{ /html }}\r\n\r\n\r\ntransforms\r\n可以通过 transforms 来实现变形效果。目前有2D变形和3D变形，不过3D变形只有新的浏览器中支持。其语法如下:\r\n`CSS\r\ntransform: none|transform-functions\r\n`\r\n它的属性值如下表\r\n\r\n值    | 含义\r\n:-----|:-----\r\nnone  |  定义不进行转换。\r\nmatrix(n,n,n,n,n,n) | 定义 2D 转换，使用六个值的矩阵。\r\nmatrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) |  定义 3D 转换，使用 16 个值的 4x4 矩阵。\r\ntranslate(x,y) | 定义 2D 转换。\r\ntranslate3d(x,y,z) | 定义 3D 转换。\r\ntranslateX(x)  | 定义转换，只是用 X 轴的值。\r\ntranslateY(y)  | 定义转换，只是用 Y 轴的值。\r\ntranslateZ(z)  | 定义 3D 转换，只是用 Z 轴的值。\r\nscale(x,y) | 定义 2D 缩放转换。\r\nscale3d(x,y,z) |  定义 3D 缩放转换。\r\nscaleX(x) |  通过设置 X 轴的值来定义缩放转换。\r\nscaleY(y)  | 通过设置 Y 轴的值来定义缩放转换。\r\nscaleZ(z)  | 通过设置 Z 轴的值来定义 3D 缩放转换。\r\nrotate(angle) |  定义 2D 旋转，在参数中规定角度。\r\nrotate3d(x,y,z,angle) |  定义 3D 旋转。\r\nrotateX(angle) | 定义沿着 X 轴的 3D 旋转。\r\nrotateY(angle) | 定义沿着 Y 轴的 3D 旋转。\r\nrotateZ(angle) | 定义沿着 Z 轴的 3D 旋转。\r\nskew(x-angle,y-angle) |  定义沿着 X 和 Y 轴的 2D 倾斜转换。\r\nskewX(angle)   | 定义沿着 X 轴的 2D 倾斜转换。\r\nskewY(angle)   | 定义沿着 Y 轴的 2D 倾斜转换。\r\nperspective(n) | 为 3D 转换元素定义透视视图\r\n\r\n可以将 transform 同 transition 结合使用，如下所示：\r\n{{ html }}\r\nstyle\r\ntransDemo div {\r\n    height: 120px;width: 120px; border: 1px blue solid; margin: 10px auto; padding:10px; text-align: center; transition: all 2s ease-in-out;\r\n}\r\ntransDemo .hover {cursor: pointer;}\r\ntransDemo div:hover {transform: rotate(720deg) scale(2,2);}\r\n/style\r\ndiv id=\"transDemo\"\r\ndiv class=\"hover\"  Hover and see what will happen/div\r\n/div\r\n{{ /html }}\r\n\r\n3D transform\r\n3D tranform 同 2D transform 相似，其基本属性为 translate3d, scale3d, rotateX, rotateY, rotateZ。如下列：\r\n{{ html }}\r\nstyle\r\ntransform3D div {\r\n  transition:all 2s ease-in-out;\r\n  perspective: 800px;\r\n  perspective-origin: 50% 100px;\r\n}\r\ntransform3D:hover rotateX {\r\n  transform:rotateX(180deg);\r\n}\r\ntransform3D:hover rotateY {\r\n  transform:rotateY(180deg);\r\n}\r\ntransform3D:hover rotateZ {\r\n  transform:rotateZ(180deg);\r\n}\r\n/style\r\n\r\ndiv id=\"transform3D\" class=\"shadow hover\"\r\n    div id=\"rotateX\"rotate x/div\r\n    div id=\"rotateY\"rotate y/div\r\n    div id=\"rotateZ\"rotate z/div\r\n/div\r\n{{ /html }}\r\n\r\n\r\n还可以实现一个 3d 的图片旋转\r\n{{ html }}\r\nstyle\r\ncubeCarousel {\r\n    -webkit-perspective: 800;\r\n    perspective: 800;\r\n    perspective-origin: 50% 100px;\r\n    margin: 100px auto 20px auto;\r\n    width: 450px;\r\n    height: 400px;\r\n}\r\ncubeCarousel #cubeSpinner {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    height: 281px;\r\n    width: 450px;\r\n    transform-style: preserve-3d;\r\n    transform-origin: 50% 100px 0;\r\n    transition: all 1.0s ease-in-out;\r\n}\r\ncubeCarousel .face {\r\n    position: absolute;\r\n    height: 220px;\r\n    width: 450px;\r\n    padding: 0px;\r\n    overflow: hidden;\r\n}\r\ncubeSpinner .one {\r\n    transform: translateZ(225px);\r\n}\r\ncubeSpinner .two {\r\n    transform: rotateY(90deg) translateZ(225px);\r\n}\r\n\r\ncubeSpinner .three {\r\n    transform: rotateY(180deg) translateZ(225px);\r\n}\r\ncubeSpinner .four {\r\n    transform: rotateY(-90deg) translateZ(225px);\r\n}\r\n span {\r\n    cursor: pointer;\r\n}\r\ncontrols .selected{\r\n    font-weight: bold;\r\n}\r\n.trans {\r\n    opacity: 0.5;\r\n}\r\n\r\n/style\r\ndiv id=\"cubeCarousel\"\r\n    div id=\"cubeSpinner\" style=\"\"\r\n      div class=\"face one\"\r\n        img src=\"http://img02.sogoucdn.com/app/a/100520024/71a9c49ed8a2693c43a50288b719ea67\"\r\n      /div\r\n      div class=\"face two\"\r\n        img src=\"http://img04.sogoucdn.com/app/a/100520024/a89685511fef9f796e70e63cb02d0c0f\"\r\n      /div\r\n      div class=\"face three\"\r\n        img src=\"http://img04.sogoucdn.com/app/a/100520024/83af06dcb64a1031737577a57dba95a9\"\r\n      /div\r\n      div class=\"face four\"\r\n        img src=\"http://img03.sogoucdn.com/app/a/100520024/02091b74ed63fe2784e98292861a6a7b\"\r\n      /div\r\n    /div\r\n    div id=\"controls\"\r\n        span class=\"selected\" id=\"controls_1\"Image 1/span\r\n        span class=\"\" id=\"controls_2\"Image 2/span\r\n        span class=\"\" id=\"controls_3\"Image 3/span\r\n        span class=\"\" id=\"controls_4\"Image 4/span\r\n        span id=\"toggleOpacity\"显示图片的旋转/span\r\n    /p\r\n  /div\r\n/div\r\nscript type=\"text/javascript\"\r\n    var controls = [];\r\n    controls.push(document.getElementById(\"controls_1\"));\r\n    controls.push(document.getElementById(\"controls_2\"));\r\n    controls.push(document.getElementById(\"controls_3\"));\r\n    controls.push(document.getElementById(\"controls_4\"));\r\n\r\n    controls.forEach(function(item, index) {\r\n        item.addEventListener(\"click\", function() {\r\n            controls.forEach(function(it){\r\n               it.className = \"\";\r\n            });\r\n            this.className = \"selected\";\r\n            document.getElementById(\"cubeSpinner\").style.transform = \"rotateY(\" + (-1 * (index * 90)) + \"deg)\";\r\n        });\r\n    });\r\n    document.getElementById(\"toggleOpacity\").addEventListener(\"click\", function() {\r\n        if (/selected/.test(this.className)) {\r\n            this.className = '';\r\n        } else {\r\n            this.className = \"selected\";\r\n        }\r\n        var images = document.getElementById(\"cubeSpinner\").getElementsByTagName(\"img\");\r\n        for (var position=0; position<images.length; position++) {\r\n            if (/trans/.test(images[position].className)) {\r\n                images[position].className = '';\r\n            } else {\r\n                images[position].className = \"trans\";\r\n            }\r\n        }\r\n    });\r\n/script\r\n{{ /html }}\r\n\r\n animation\r\n在CSS中使用动画，首先要为动画指定关键帧（\r\n元素在某些时候会有什么样式）。浏览器会为你添加相应的渐变效果。语法如下：\r\n`CSS\r\nanimation: name duration timing-function delay iteration-count direction;\r\n`\r\n\r\n其中 animation 的值有如下含义\r\n\r\n值         | 描述\r\n:----------|:---------\r\nanimation-name | 规定需要绑定到选择器的 keyframe名称\r\nanimation-duration| 规定完成动画所花费的时间，以秒或毫秒计数\r\nanimation-timing-function | 规定动画的速度曲线\r\nanimation-delay | 规定在动画开始之前的延迟\r\nanimation-iteration-count | 规定动画应该播放的次数\r\nanimation-direction | 规定是否应该轮流反向播放动画 (normal:默认值。动画应该正常播放; alternate    动画应该轮流反向播放)\r\n\r\n@keyframes 规则\r\n举例来说，将一个元素逐渐下移 200px :\r\n`CSS\r\n@keyframes move {\r\n    from {top: 0px;}\r\n    to {top: 200px;}\r\n}\r\n`\r\n\r\n从例子中可以看出，@keyframes 指定了动画的代码。动画的效果是从一个CSS样式渐变到另外一个CSS样式。在动画执行期间，我们可以多次更改CSS样式。\r\n样式可以设定百分比改变或者使用 \"from\" 和 \"to\"，\"from\" 相当于 0%，\"to\" 相当于 100%。\r\n为了获得最佳的浏览器支持，应该始终定义 0% 和 100% 选择器。\r\n@keyframes 的语法如下：\r\n`CSS\r\n@keyframes animation-name {keyfromes-selector {css-styles;}}\r\n`\r\n\r\n例如：\r\n`CSS\r\n@keyframes mymove {\r\n    0%   {top: 0px;}\r\n    25%  {top: 200px;}\r\n    50%  {top: 100px;}\r\n    75%  {top: 200px;}\r\n    100% {top: 0px;}\r\n}\r\n`\r\n\r\n Demo1\r\n{{ html }}\r\nstyle\r\n@keyframes resize {\r\n    0% {padding: 0;}\r\n    50% {padding: 0 40px; background-color: rgba(255,0,0,0.2);}\r\n    100% {padding: 0 150px; background-color: rgba(255,0,0, 0.9);}\r\n}\r\nanimationBox {\r\n    height: 50px;\r\n    width: 50px;\r\n    margin: 0 auto;\r\n    border: 1px red solid;\r\n    background-color: rgba(255,0,0,0.7);\r\n}\r\nanimationBox:hover {\r\n     animation: resize 1s infinite alternate\r\n}\r\n/style\r\ndiv id=\"animationBox\" class=\"shadow\"\r\n/div\r\n{{ /html }}\r\n\r\nDemo2\r\nanimation 动画适用于微妙、精美的动画，而不是那些特别复杂的动画。 WCAG规定，使用animation不应该包含每秒闪烁超过3次的内容。\r\n\r\n{{ html }}\r\nstyle\r\nanimationDemo2 {width: 255px; margin: 10px auto;}\r\nanimationDemo2 button {\r\n    width: 255px;\r\n    height: 35px;\r\n    background: cde;\r\n    border: 2px solid #ccc;\r\n    border-color: rgba(0,0,255,0.5);\r\n    font-size: 18px;\r\n    color: #000;\r\n    text-shadow: rgba(20, 20, 20, 0.5) 1px 1px 5px;\r\n    text-align: center;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 16px rgba(66, 140, 240, 0.5);\r\n}\r\nanimationDemo2 button:hover {\r\n    background-color: cce;\r\n    animation: glow 1s ease-in-out infinite alternate;\r\n}\r\n@keyframes glow {\r\n  0% {\r\n    box-shadow: 0 0 16px rgba(66, 140, 240, 0.5);\r\n    border-color: rgba(0,0,255,0.5);\r\n  }\r\n  100% {\r\n    box-shadow: 0 0 16px rgba(66, 140, 240, 1.0), 0 0 36px rgba(0, 140, 255, 1.0);\r\n    border-color: rgba(0,0,255,1.0);\r\n  }\r\n}\r\n/style\r\ndiv id=\"animationDemo2\"\r\n  button class=\"transition hover\"Hover to Pulsate/button\r\n/div\r\n{{ /html }}\r\n\r\nfilters\r\nCSS中的 filter 并不是官网标准，但是有很多浏览器支持filter样式。目前，filter 应用于整个元素和所有它的后代，不能只针对背景或边框。\r\n虽然CSS滤镜涵盖了许多可能性，但是最常用的还是调整色彩，像灰度，棕褐色，饱和度，色调旋转，反转，不透明度，亮度，对比度，模糊和阴影，如下：\r\n`CSS\r\n.thingyouwanttofilter {\r\n  /*\r\n    these are all default values, note that hue-rotate and blur have units.\r\n    You'll also need to include the vendor prefixes.\r\n  */\r\n  /* 灰度 */\r\n  filter: grayscale(0);\r\n   /* 棕褐色 */\r\n  filter: sepia(0);\r\n  /* 饱和度 */\r\n  filter: saturate(1);\r\n  /* 色调旋转 */\r\n  filter: hue-rotate(0deg);\r\n  /* 反转 */\r\n  filter: invert(0);\r\n  /* 不透明度 */\r\n  filter: opacity(1);\r\n  /* 亮度 */\r\n  filter: brightness(1);\r\n  /* 对比度 */\r\n  filter: contrast(1);\r\n  /* 模糊 */\r\n  filter: blur(0px);\r\n\r\n  /* Drop shadow has the same syntax as box-shadow – see below for why it's amazing! */\r\n  filter: drop-shadow(5px 5px 10px ccc);\r\n}\r\n`\r\n\r\n{{ html }}\r\nstyle\r\n    .filtered {\r\n        position:relative;\r\n        height:281px;\r\n        width:450px;\r\n        margin:0 auto 10px;\r\n    }\r\n    #controls {\r\n        width: 50%;\r\n        margin: 10px auto;\r\n    }\r\n /style\r\ndiv class=\"filtered shadow\"\r\n    img src=\"http://css3.bradshawenterprises.com/images/Turtle.jpg\"\r\n/div\r\ndiv id=\"controls\"\r\n    h4Play with the sliders…/h4\r\n    form class=\"form-horizontal\"\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"grayscale\"Grayscale/label\r\n            div class=\"controls\"\r\n                input type=\"range\" data-default=\"0\" value=\"0\" min=\"0\" max=\"1\" step=\"0.1\" id=\"grayscale\"\r\n                p id=\"grayscale_output\" class=\"pull-right\"grayscale(0.5)/p\r\n            /div\r\n        /div\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"sepia\"Sepia/label\r\n            div class=\"controls\"\r\n                input type=\"range\" data-default=\"0\" value=\"0\" min=\"0\" max=\"1\" step=\"0.1\" id=\"sepia\"\r\n                p id=\"sepia_output\" class=\"pull-right\"sepia(0)/p\r\n            /div\r\n        /div\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"saturate\"Saturate/label\r\n            div class=\"controls\"\r\n                input type=\"range\" data-default=\"1\" value=\"1\" min=\"0\" max=\"1\" step=\"0.1\" id=\"saturate\"\r\n                p id=\"saturate_output\" class=\"pull-right\"saturate(1)/p\r\n            /div\r\n        /div\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"hue-rotate\"Hue-rotate/label\r\n            div class=\"controls\"\r\n                input type=\"range\" data-default=\"0\" value=\"0\" min=\"0\" max=\"360\" step=\"1\" id=\"hue-rotate\"\r\n                p id=\"hue-rotate_output\" class=\"pull-right\"hue-rotate(0deg)/p\r\n            /div\r\n        /div\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"invert\"Invert/label\r\n            div class=\"controls\"\r\n                input type=\"range\" data-default=\"0\" value=\"0\" min=\"0\" max=\"1\" step=\"0.1\" id=\"invert\"\r\n                p id=\"invert_output\" class=\"pull-right\"invert(0)/p\r\n            /div\r\n        /div\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"opacity\"Opacity/label\r\n            div class=\"controls\"\r\n                input type=\"range\" data-default=\"1\" value=\"1\" min=\"0\" max=\"1\" step=\"0.1\" id=\"opacity\"\r\n                p id=\"opacity_output\" class=\"pull-right\"opacity(1)/p\r\n            /div\r\n        /div\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"brightness\"Brightness/label\r\n            div class=\"controls\"\r\n                input type=\"range\" data-default=\"1\" value=\"1\" min=\"0\" max=\"1\" step=\"0.1\" id=\"brightness\"\r\n                p id=\"brightness_output\" class=\"pull-right\"brightness(1)/p\r\n            /div\r\n        /div\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"contrast\"Contrast/label\r\n            div class=\"controls\"\r\n                input type=\"range\" data-default=\"1\" value=\"1\" min=\"0\" max=\"2\" step=\"0.1\" id=\"contrast\"\r\n                p id=\"contrast_output\" class=\"pull-right\"contrast(1)/p\r\n            /div\r\n        /div\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"blur\"Blur/label\r\n            div class=\"controls\"\r\n                input type=\"range\" data-default=\"0\" value=\"0\" min=\"0\" max=\"10\" step=\"1\" id=\"blur\"\r\n                p id=\"blur_output\" class=\"pull-right\"blur(0px)/p\r\n            /div\r\n        /div\r\n        div class=\"control-group\"\r\n            label class=\"control-label\" for=\"reset\"&nbsp;/label\r\n            div class=\"controls\"\r\n                a href=\"#\" id=\"reset\" class=\"btn btn-info\"Reset to defaults/a\r\n            /div\r\n        /div\r\n    /form\r\n/div\r\n script\r\n        $(document).ready(function() {\r\n            var controls_input = $(\"#controls input\"),\r\n            image = $(\".filtered img\");\r\n\r\n            function updateDisplay() {\r\n                var newCSS = '';\r\n                controls_input.each(function(){\r\n                    var units = '';\r\n\r\n                    if ($(this).attr('id') == 'blur') {\r\n                        units = 'px';\r\n                    } else if ($(this).attr('id') == 'hue-rotate') {\r\n                        units = 'deg';\r\n                    }\r\n                    newCSS += $(this).attr('id')+\"(\"+$(this).val()+units+\") \";\r\n                    $(\"#\"+$(this).attr('id')+\"_output\").text($(this).attr('id')+\"(\"+$(this).val()+units+\")\");\r\n                })\r\n                image.css(\"-webkit-filter\", newCSS);\r\n                image.css(\"-moz-filter\", newCSS);\r\n                image.css(\"-ms-filter\", newCSS);\r\n                image.css(\"-o-filter\", newCSS);\r\n                image.css(\"filter\", newCSS);\r\n            }\r\n            updateDisplay();\r\n\r\n            controls_input.change(updateDisplay);\r\n\r\n            $(\"#reset\").click(function(){\r\n                controls_input.each(function(){\r\n                    $(this).val($(this).attr('data-default'));\r\n                });\r\n                updateDisplay();\r\n                return false;\r\n            });\r\n        });\r\n        /script\r\n{{ /html }}\r\n\r\n\r\n示例\r\n{{ html }}\r\nstyle\r\n.shadow {\r\n    -webkit-box-shadow: 5px 5px 5px aaa;\r\n    -moz-box-shadow: 5px 5px 5px #aaa;\r\n    box-shadow: 5px 5px 5px #aaa;\r\n    margin-bottom: 10px;\r\n}\r\ncf4 {\r\n    position: relative;\r\n    height: 281px;\r\n    width: 450px;\r\n    margin: 0 auto;\r\n}\r\ncf4 img {\r\n    position: absolute;\r\n    left: 0;\r\n    transition: all 1s ease-in-out;\r\n}\r\ncf4 img.top {\r\n    transform: scale(0, 0);\r\n    opacity: 0;\r\n}\r\n\r\ncf4:hover img.top {\r\n    opacity: 1;\r\n    transform: scale(1, 1);\r\n    transform-origin: top right;\r\n}\r\n\r\ncf4:hover img.bottom {\r\n    transform: scale(0,0);\r\n    transform-origin: bottom left;\r\n}\r\n/style\r\ndiv id=\"cf4\" class=\"hover\"\r\n    img class=\"top shadow\" src=\"http://css3.bradshawenterprises.com/images/Birdman.jpg\"\r\n    img class=\"bottom shadow\" src=\"http://css3.bradshawenterprises.com/images/Rainbow%20Worm.jpg\"\r\n/div\r\nstyle type=\"text/css\"\r\n    cf5 {\r\n        position: relative;\r\n        height: 281px;\r\n        width: 450px;\r\n        margin: 10px auto;\r\n    }\r\n    #cf5 img{\r\n        position: absolute;\r\n        left: 0;\r\n        transition: all 1s ease-in-out;\r\n    }\r\n\r\n    #cf5 img.top {\r\n        transform: scale(1,0);\r\n        filter: alpha(opacity=0);\r\n        opacity: 0;\r\n    }\r\n\r\n    #cf5:hover img.top {\r\n        transform: scale(1,1);\r\n        opacity: 1;\r\n    }\r\n\r\n    #cf5:hover img.bottom {\r\n        filter: alpha(opacity=0);\r\n        transform: rotate(360deg) scale(0,0);\r\n    }\r\n\r\n\r\n/style\r\ndiv id=\"cf5\" class=\"hover\"\r\n    img class=\"bottom shadow\" src=\"http://css3.bradshawenterprises.com/images/Turtle.jpg\"\r\n    img class=\"top shadow\" src=\"http://css3.bradshawenterprises.com/images/Rainbow%20Worm.jpg\"\r\n /div\r\n {{ /html }}\r\n\r\n参考网站\r\nCSS3 Transitions, Transforms, Animation, Filters and more!\r\n",
        "tags": []
    },
    {
        "uri": "/post/front/HTML标签",
        "content": "---\r\ntitle: HTML 标签\r\n---\r\n\r\nvideo 标签\r\nvideo标签是HTML5的新标签，其属性如下：\r\n\r\n属性     |  值      | 描述\r\n:-------| :--------|:-------------------\r\nautoplay| autoplay | 视频就绪后马上播放\r\ncontrols| controls | 向用户展示控件，比如播放按钮等\r\nheight  | pixels | 视频播放器的高度\r\nwidth   | pixels | 视频播放器的宽度\r\nloop    | loop     | 当媒介文件完成播放后再次开始播放\r\nmuted   | muted    | 规定视频的音频输出应该被静音\r\nposter  | url    | 规定视频下载时显示的图像，或者用户在点击播放按钮前显示的图像\r\npreload | preload  | 视频在页面加载时进行加载，并预备播放\r\nsrc     | url    | 要播放视频的url\r\n\r\n video 对象\r\nvideo 对象是HTML5 中的新对象，video对象表示HTML video 元素。\r\n获取video元素: var video = document.getElementById(\"videoId\");\r\n创建video对象: var video = docuemnt.createElement(\"video\");\r\n\r\nvideo 对象有如下属性：\r\n\r\n属性          |  描述\r\n:------------| :-------------\r\naudioTracks  | 返回表示可用音频轨道的 AudioTrackList 对象。\r\nautoplay     | 设置或返回是否在就绪（加载完成）后随即播放视频。\r\nbuffered     | 返回表示视频已缓冲部分的 TimeRanges 对象。\r\ncontroller   | 返回表示视频当前媒体控制器的 MediaController 对象。\r\ncontrols     | 设置或返回视频是否应该显示控件（比如播放/暂停等）。\r\ncrossOrigin  | 设置或返回视频的 CORS 设置。\r\ncurrentSrc   | 返回当前视频的 URL。\r\ncurrentTime  | 设置或返回视频中的当前播放位置（以秒计）。\r\ndefaultMuted |   设置或返回视频默认是否静音。\r\ndefaultPlaybackRate | 设置或返回视频的默认播放速度。\r\nduration     | 返回视频的长度（以秒计）。\r\nended        | 返回视频的播放是否已结束。\r\nerror        | 返回表示视频错误状态的 MediaError 对象。\r\nheight       | 设置或返回视频的 height 属性的值。\r\nloop         | 设置或返回视频是否应在结束时再次播放。\r\nmediaGroup   | 设置或返回视频所属媒介组合的名称。\r\nmuted        | 设置或返回是否关闭声音。\r\nnetworkState | 返回视频的当前网络状态。\r\npaused       | 设置或返回视频是否暂停。\r\nplaybackRate | 设置或返回视频播放的速度。\r\nplayed       | 返回表示视频已播放部分的 TimeRanges 对象。\r\nposter       | 设置或返回视频的 poster 属性的值。\r\npreload      | 设置或返回视频的 preload 属性的值。\r\nreadyState   | 返回视频当前的就绪状态。\r\nseekable     | 返回表示视频可寻址部分的 TimeRanges 对象。\r\nseeking      | 返回用户当前是否正在视频中进行查找。\r\nsrc          | 设置或返回视频的 src 属性的值。\r\nstartDate    | 返回表示当前时间偏移的 Date 对象。\r\ntextTracks   | 返回表示可用文本轨道的 TextTrackList 对象。\r\nvideoTracks  | 返回表示可用视频轨道的 VideoTrackList 对象。\r\nvolume       | 设置或返回视频的音量。\r\nwidth        | 设置或返回视频的 width 属性的值。\r\n\r\nvideo 坑\r\n在手机端，各个浏览器厂商对 video 标签有不同的实现或商业调整。比如，QQ浏览器播放视频暂停时有广告，UC浏览器播放结束后有相关推荐。形成各种各样的坑。\r\n对于QQ浏览器默认全屏的问题，可以指定video的宽高来解决。对于播放结束后有相关推荐的，可以在播放结束后删除video标签。",
        "tags": []
    },
    {
        "uri": "/post/front/javascript 常用技巧",
        "content": "---\r\ntitle: javascript 常用技巧\r\ndate: 2017-06-17 19:42:25\r\ntags: [\"javascript\"]\r\ncategories: [\"javascript\"]\r\n---\r\njavascript在使用中有各种各样的技巧：提高执行效率，降低执行频率等。\r\nWeb Storage 的使用\r\nWeb Storage的目的是克服由cookie带来的一些限制，当数据需要被严格控制在客户端，无须将数据返回到服务器时。\r\n!-- more --\r\n提供一种在cookie之外的存储会话数据的途径\r\n提供一种存储大量可以跨会话存在的数据机制\r\n有两种storage存储对象：\r\nsessionStorage: 存储特定于某个会话的数据，数据只保持到浏览器关闭\r\nlocalStorage: 页面必须来自同一个域名（子域名无效），使用同一种协议，在同一个端口上\r\nstorage提供的方法有如下几种：\r\nclear(): 清除所有值\r\ngetItem(name): 根据名字获取对应的值\r\nkey(index): 获取index位置处的值\r\nremoveItem(name): 删除由name 指定的键值对\r\nsetItem(name, value): 为指定的name设置一个对应的值\r\n获取localStorage的方法：\r\n`javascript\r\nvar WebStorage = {\r\n    getLocalStorage: function() {\r\n        if (typeof localStorage === 'object') {\r\n            return localStorage;\r\n        } else if (typeof globalStorage === 'object') {\r\n            return globalStorage;\r\n        } else {\r\n            throw new Error(\"Local Storage not available\");\r\n        }\r\n    }\r\n}\r\n`\r\n\r\n 使用外部变量时，超时调用\r\n在使用setTimeout进行超时调用时，其作用域是window，因此要注意其this的使用。\r\n`javascript\r\nfor (var i=0; i<10; i++) {\r\n   setTimeout( function () {\r\n        console.log(i);\r\n    }, 200);\r\n}\r\n`\r\n上例中，会取i的最终值10，正确的方法如下：\r\n`javascript\r\nfor (var i=0; i<10; i++) {\r\n    setTimeout(function(a) {\r\n        return function() {\r\n            console.log(a);\r\n        }    \r\n    }(i), 200);\r\n}\r\n`\r\n\r\n判断手机联网状态\r\n如果手机不支持如下属性，可以参考 github\r\n`javascript\r\n// 是否在线\r\nnavigator.onLine\r\n// 连接类型\r\nnavigator.connection.type\r\n// type值可能是: unknown, ethernet, wifi, 2g, 3g, 4g, none.\r\n// 下行最大比特率 downlinkMax\r\nnavigator.connection.downlinkMax\r\n\r\n`\r\n\r\n 问题\r\n对于含有小数的值，不用等于判断",
        "tags": []
    },
    {
        "uri": "/post/front/vuex",
        "content": "---\r\ntitle: vuex\r\ndate: 2017-08-30 19:42:25\r\ntag: [\"javascript\",\"vue\"]\r\ncategories: [\"javascript\",\"vue\"]\r\n---\r\n\r\nVuex 能做什么\r\nVuex将多个组件共享的状态从组件中抽离出来，，以一个全局单例的模式进行统一管理。\r\n解决问题\r\n多层嵌套组件间传参繁琐，且兄弟组件间的状态传递无能为力。\r\n父子组件直接引用或者通过事件来变更和同步状态的多份拷贝，这种方式非常脆弱，代码不易维护\r\n\r\n 核心概念\r\n单一状态树 -- state\r\n单一状态树是全局唯一的变量，唯一的数据源，每个应用仅包含一个store实例\r\n 在 Vue 组件中获得 Vuex 状态\r\nVuex 通过调用 Vue.use(Vuex) 将store注入到子组件中，子组件可以通过this.$store访问到store中的内容：\r\n`javascript\r\nconst Counter = {\r\n    template: div {{count}}/div,\r\n    computed: {\r\n        count() {\r\n            return this.$store.state.count\r\n        }\r\n    }\r\n}\r\nconst app = new Vue({\r\n  el: '#app',\r\n  // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件\r\n  store,\r\n  components: { Counter },\r\n  template: `\r\n    div class=\"app\"\r\n      counter/counter\r\n    /div\r\n  `\r\n})\r\n`\r\n\r\ngetter\r\n当我们需要从store中提取出一些状态，可以在computed中进行过滤计算。但是如果多个组件要使用该属性，那么就会导致代码冗余。可以在store中敌营getter来解决该问题。\r\n而且getter会将计算的值缓存起来，当其依赖的值发生改变才会被重新计算。\r\n`javascript\r\nconst store = new Vuex.Store({\r\n  state: {\r\n    todos: [\r\n      { id: 1, text: '...', done: true },\r\n      { id: 2, text: '...', done: false }\r\n    ]\r\n  },\r\n  getters: {\r\n      doneTodosCount: (state, getters) = {\r\n          return getters.doneTodos.length\r\n      }\r\n  }\r\n})\r\n// 在组件中使用\r\ncomputed: {\r\n    doneTodoCount() {\r\n        return this.$store.getters.doneTodosCount\r\n    }\r\n}\r\n`\r\n 更改store变量的值 -- 同步方式mutation\r\n更改 Vuex 的 store 中的状态的唯一方法是提交mutation：每个mutation都有一个字符串的事件类型和回调函数，该函数接受一个state作为第一个参数\r\n`javascript\r\nconst store = new Vuex.Store({\r\n    state: {\r\n        count: 1\r\n    },\r\n    mutations: {\r\n        increment (state) {\r\n            state.count++  // 变更状态\r\n        }\r\n    }\r\n})\r\n// 在组件中需要用如下方式调用：\r\nstore.commit(\"increment\")\r\n`\r\n如果提交的内容含有参数：\r\n`javascript\r\nmutations: {\r\n  increment (state, n) {\r\n    state.count += n\r\n  }\r\n}\r\n\r\nthis.$store.commit(\"increment\", 1)\r\n// 对象方式提交\r\nmutations: {\r\n  increment (state, payload) {\r\n    state.count += payload.amount\r\n  }\r\n}\r\nthis.$store.commit(\"increment\" {amount: 10})\r\nthis.$store.commit({\r\n    type: 'increment',\r\n    amount: 10\r\n})\r\n`\r\nmutations 遵循vue响应规则\r\n最好提前在你的 store 中初始化好所有所需属性。\r\n当需要在对象上添加新属性时，你应该\r\n    使用 Vue.set(obj, 'newProp', 123)\r\n    以新对象替换老对象 state.obj = { ...state.obj, newProp: 123 }\r\n 更改store变量的值 -- 异步方式actions\r\naction可以包含任意异步操作。\r\n定义action：\r\n`javascript\r\nconst store = new Vuex.Store({\r\n    state: {\r\n        count: 0\r\n    },\r\n    mutations: {\r\n        increment (state) {\r\n            state.count++\r\n        }\r\n    },\r\n    actions: {\r\n        increment (context) {\r\n            context.commit('increment')\r\n        },\r\n        incrementAsync ({ commit }) {\r\n            setTimeout(() = {\r\n                commit('increment')\r\n            }, 1000)\r\n        }\r\n    }\r\n})\r\n`\r\n调用actions\r\n`javascript\r\nstore.dispatch('increment')\r\n// 以载荷形式分发\r\nstore.dispatch('incrementAsync', {\r\n  amount: 10\r\n})\r\n\r\n// 以对象形式分发\r\nstore.dispatch({\r\n  type: 'incrementAsync',\r\n  amount: 10\r\n})\r\n`\r\n在组件中使用action，可以用this.$store.dispatch('xxx') 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用:\r\n`javascript\r\nimport { mapActions } from 'vuex'\r\n\r\nexport default {\r\n    methods: {\r\n        ...mapActions([\r\n            'increment' // 映射 this.increment() 为 this.$store.dispatch('increment')\r\n        ]),\r\n        ...mapActions({\r\n            add: 'increment' // 映射 this.add() 为 this.$store.dispatch('increment')\r\n        })\r\n    }\r\n}\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/post/front/vue学习笔记",
        "content": "---\r\ntitle : vue 学习笔记\r\ndate: 2017-01-21 12:00:00\r\ntags: [\"javascript\"]\r\ncategories: [\"javascript\"]\r\n---\r\n\r\n属性和方法\r\n每个vue实例都会代理其data对象的所有属性\r\n`vue\r\nvar data = { a: 1 }\r\nvar vm = new Vue({\r\n  data: data\r\n})\r\nvm.a === data.a // - true\r\n// setting the property also affects original data\r\nvm.a = 2\r\ndata.a // - 2\r\n// ... and vice-versa\r\ndata.a = 3\r\nvm.a // - 3\r\n`\r\n在vue中只有被代理的属性才会被监控，如果在创建Vue后，再data中新添加属性，是不会被监控的，也就是更新值没有任何响应。可以通过$watch方法加入响应 。\r\nVue中自带一些以$开头的属性和方法：\r\n`vue\r\nvar data = { a: 1 }\r\nvar vm = new Vue({\r\n  el: 'example',\r\n  data: data\r\n})\r\nvm.$data === data // - true\r\nvm.$el === document.getElementById('example') // - true\r\n// $watch is an instance method\r\nvm.$watch('a', function (newVal, oldVal) {\r\n  // this callback will be called when vm.a changes\r\n})\r\n`\r\n\r\n实例的生命周期\r\n下面的图是vue实例的整个生命周期。\r\n\r\n在vue实例创建的过程中，有一些hook会被调用。我们可以通过修改这些hook来执行自定义的操作。 hook有created, mounted, updated, destroyed.\r\n`vue\r\nvar vm = new Vue({\r\n  data: {\r\n    a: 1\r\n  },\r\n  created: function () {\r\n    // this points to the vm instance\r\n    console.log('a is: ' + this.a)\r\n  }\r\n})\r\n// - \"a is: 1\"\r\n`\r\n 模板语法\r\n所有的vue模板都是有效的HTML代码。Vue通过模板引擎将Vue的模板编译成虚拟DOM渲染函数。结合响应系统，Vue能够智能地找出重新渲染的最小代价，并将其重新渲染到DOM上。\r\n如果喜欢使用原生的JavaScript，可以使用JSX语法直接写渲染函数。\r\n\r\n插值\r\n 文本\r\n数据绑定最常见的形式就是使用两个大括号（Mustache）括起来的文本形式\r\n`\r\nspanMessage: {{msg}} /span\r\n`\r\n括号中的msg将会被数据对象的msg属性替换掉。绑定的数据对象上msg属性发生了改变，插值处的内容都会更新。\r\n使用v-once指令可以只执行一次插值，后续数据对象的msg属性发生变化，插值处的内容也不会更改\r\n`vue\r\nspan v-onceThis will never change: {{msg}}/span\r\n`\r\n纯HTML\r\n使用Mustache语法的文本数据将会被解释为纯文本，如果想要输出HTML，需要使用v-html指令：\r\n`\r\ndiv v-html=\"rawHtml\"/div\r\n`\r\n使用该方式插入的HTML数据绑定会被忽略。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。\r\n动态渲染的任意 HTML 会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容插值。\r\n 属性\r\n在HTML的属性上使用v-bind指令，而不是Mustache\r\n`\r\ndiv v-bind:id=\"dynamicId\"/div\r\n`\r\n如果绑定的数据类型是boolean类型，如果值为false，该属性将会被移除\r\n使用JavaScript表达式\r\n可以在Mustache中使用JavaScript表达式\r\n`\r\n{{number+1}}\r\n{{ok ? 'yes':'no}}\r\n{{msg.split('').reverse().join('')}}\r\ndiv v-bind:id=\"'list-'+id\"/div\r\n`\r\n模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如Math和Date。自定义的全局变量不能够被访问到。\r\n 指令\r\n指令是以vr-开头的属性，指令的属性值应该会是一个单独的JavaScript表达式。指令的功能是在其表达式的值改变时将其对应的DOM进行重新渲染\r\n`\r\np v-if=\"seen\"Now you see me/p\r\n`\r\n参数 arguments\r\n有些指令能接收一个“参数”，在指令后以冒号指明。例如，v-bind指令被用来响应地更新 HTML 属性：\r\n`\r\na v-bind:href=\"url\"/a  缩写 a :href=\"url\"/a\r\na v-on:click=\"doSomething\"/a 缩写 a @click=\"doSomething\"/a\r\n`\r\n在这里href是参数，将该元素的href属性与url的值进行绑定\r\n 修饰符\r\n修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\r\n`\r\nform v-on:submit.prevent=\"onSubmit\"/form\r\n`\r\n过滤器\r\n过滤器可以用在Mustache插值和v-bind表达式中，由管道符号 |指定。过滤器的设计目的就是为了用于文本转换，如果需要使用复杂的数据变换，应该是使用计算属性。\r\n因为过滤器是JavaScript函数，因此可以向其传递参数。\r\n`\r\n{{msg | capitalize | filterA | filterB('arg1', 'arg2' }}\r\ndiv v-bind:id=\"rawId | formatId\"/div\r\n\r\nnew Vue({\r\n  // ...\r\n  filters: {\r\n    capitalize: function (value) {\r\n      if (!value) return ''\r\n      value = value.toString()\r\n      return value.charAt(0).toUpperCase() + value.slice(1)\r\n    }\r\n  }\r\n})\r\n`\r\n\r\n 计算属性和监控\r\n计算属性\r\n\r\n在模板内使用表达式是非常方斌啊的，但是他们只能用来做简单的计算。在模板中放入太多的逻辑会让模板过重且难以维护。例如：\r\n`javascript\r\ndiv id=\"example\"\r\n    {{message.split('').reverse().join('')}}\r\n/div\r\n`\r\n这种情况下模板不再是直观简洁的。当你想要在模板中多次反向显示message的时候，问题会变得更糟糕。\r\n因此，对于复杂逻辑，建议使用计算属性。\r\n 示例\r\n`html\r\ndiv id=\"example\"\r\n    pOriginal message: \"{{ message }}\"/p\r\n    pComputed reversed message: \"{{ reversedMessage }}\"/p\r\n/div\r\n`\r\n`javascript\r\nvar vm = new Vue({\r\n   el: \"#example\",\r\n    data: {\r\n        message: \"hello\"\r\n    },\r\n    computed: {\r\n        reversedMessage: function () {\r\n            // this 指向vm实例\r\n            return this.message.split('').reverse().join('');\r\n        }\r\n    }\r\n});\r\n`\r\n在上面的例子中，我们声明了一个计算属性reversedMessage，函数vm.reversedMessage作为属性reversedMessage的getter方法。\r\nvm.reversedMessage的值依赖于message的值，当message发生变化时，vm.reversedMessage的绑定也会更新。\r\n计算属性 vs 方法\r\n可以通过表达式调用方法来实现同样的效果。而计算属性是基于他们的依赖进行缓存的，计算属性只有在他依赖的发生改变时，才会重新求值。多次访问reversedMessage计算属性会立即返回之前计算的结果，而不会再重新计算。\r\n缓存是为了避免重复计算，尤其是性能开销比较大的计算。\r\n 计算属性 vs Watched属性\r\nVue 确实提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：watch 属性。当有些数据需要基于其他数据改变而改变时，可能会滥用watch。然而，使用计算属性比使用watch更好。如下例：\r\n`\r\ndiv id=\"demo\"{{ fullName }}/div\r\n`\r\n`javascript\r\nvar vm1 = new Vue({\r\n   el: '#demo',\r\n    data: {\r\n        firstName: 'Foo',\r\n        lastName: 'Bar',\r\n        fullName: 'Foo Bar'\r\n    },\r\n    watch: {\r\n        firstName: function (val) {\r\n            this.fullName = val + ' ' + this.lastName\r\n        },\r\n        lastName: function (val) {\r\n            this.fullName = this.firstName + ' ' + val\r\n        }\r\n    }\r\n});\r\n`\r\n上面的代码是命令式，重复的，与计算属性相比较：\r\n`javascript\r\nvar vm = new Vue({\r\n    el: '#demo',\r\n    data: {\r\n        firstName: 'Foo',\r\n        lastName: 'Bar'\r\n    },\r\n    computed: {\r\n        fullName: function () {\r\n            return this.firstName + ' ' + this.lastName\r\n        }\r\n    }\r\n})\r\n`\r\n计算属性的Setter\r\n计算属性默认只有getter方法，但是也可以根据需要定义setter\r\n`JavaScript\r\ncomputed: {\r\n    fullName: {\r\n        get: function () {\r\n            return this.firstName + ' ' + this.lastName\r\n        },\r\n        set: function (newValue) {\r\n            var names = newValue.split(' ');\r\n            this.firstName = names[0];\r\n            this.lastName = names[names.length - 1]\r\n        }\r\n    }\r\n}\r\n`\r\n当运行vm.fullName = 'John Doe'时，set方法会被调用，vm.firstName和vm.lastName的值也会更新。\r\n Watchers\r\n在大多数情况下，计算属性都比watch更合适。但是在执行异步操作或者开销较大时，watch更合适。\r\n`html\r\ndiv id=\"watch-example\"\r\n  p\r\n    Ask a yes/no question:\r\n    input v-model=\"question\"\r\n  /p\r\n  p{{ answer }}/p\r\n/div\r\n`\r\n`\r\n!-- Since there is already a rich ecosystem of ajax libraries    --\r\n!-- and collections of general-purpose utility methods, Vue core --\r\n!-- is able to remain small by not reinventing them. This also   --\r\n!-- gives you the freedom to just use what you're familiar with. --\r\nscript src=\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"/script\r\nscript src=\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"/script\r\nscript\r\nvar watchExampleVM = new Vue({\r\n  el: '#watch-example',\r\n  data: {\r\n    question: '',\r\n    answer: 'I cannot give you an answer until you ask a question!'\r\n  },\r\n  watch: {\r\n    // 如果 question 发生改变，这个函数就会运行\r\n    question: function (newQuestion) {\r\n      this.answer = 'Waiting for you to stop typing...'\r\n      this.getAnswer()\r\n    }\r\n  },\r\n  methods: {\r\n    // _.debounce 是一个通过 lodash 限制操作频率的函数。\r\n    // 在这个例子中，我们希望限制访问yesno.wtf/api的频率\r\n    // ajax请求直到用户输入完毕才会发出\r\n    // 学习更多关于 _.debounce function (and its cousin\r\n    // _.throttle), 参考: https://lodash.com/docs#debounce\r\n    getAnswer: _.debounce(\r\n      function () {\r\n        var vm = this\r\n        if (this.question.indexOf('?') === -1) {\r\n          vm.answer = 'Questions usually contain a question mark. ;-)'\r\n          return\r\n        }\r\n        vm.answer = 'Thinking...'\r\n        axios.get('https://yesno.wtf/api')\r\n          .then(function (response) {\r\n            vm.answer = _.capitalize(response.data.answer)\r\n          })\r\n          .catch(function (error) {\r\n            vm.answer = 'Error! Could not reach the API. ' + error\r\n          })\r\n      },\r\n      // 这是我们为用户停止输入等待的毫秒数\r\n      500\r\n    )\r\n  }\r\n})\r\n/script\r\n`\r\n\r\nClass与Style绑定\r\n因为元素的class和style都是属性，所以可以使用v-bind处理他们。但是由于字符串拼接容易出错，因此vue对此专门进行了加强。表达式的结果类型除了字符串外，还可以是对象或数组。\r\n 绑定class\r\n对象语法\r\n可以通过传给v-bind:class一个对象，动态地切换class。也可以在对象中传入更多属性用来动态切换多个class，v-bind:class指令可以与普通的class属性共存。。\r\n`\r\ndiv class=\"static\" v-bind:class=\"{ active:isActive, 'text-danger': hasError}/div\r\n`\r\n上面的语法表示 class active 的更新将取决于数据属性 isActive 是否为真值 。\r\n也可以绑定一个对象，也可以绑定返回对象的计算属性：\r\n`\r\ndiv v-bind:class=\"classObject\"/div\r\nscript\r\ndata: {\r\n    isActive: true,\r\n    error: null\r\n},\r\ncomputed: {\r\n    classObject: function () {\r\n        return {\r\n            active: this.isActive && !this.error,\r\n            'text-danger': this.error && this.error.type === 'fatal',\r\n        }\r\n    }\r\n}\r\n/script\r\n`\r\n\r\n 数组语法\r\n将一个数据传递给v-bind:class，以应用一个class列表\r\n`\r\ndiv v-bind:class=\"[activeClass, errorClass]\"\r\ndata: {\r\n    activeClass: 'active',\r\n    errorClass: 'text-danger'\r\n}\r\n`\r\n渲染为：\r\n`\r\ndiv class=\"active text-danger\"/div\r\n`\r\n如果要根据条件切换列表中的class，可以用三元表达式：\r\n`\r\ndiv v-bind:class=\"[isActive?activeClass:'', errorClass]\"\r\n`\r\nisActive为true时，才添加activeClass\r\n当有多个条件时，这样写比较繁琐。可以在数组语法中使用对象语法。\r\n\r\n用在组件上\r\n在一个定制的组件上用到class属性的时候，这些类将被添加到根元素上，这个元素上已经存在的类不会被覆盖。\r\n`\r\nVue.component('myComponent', {\r\n    template: 'p class=\"foo bar\"Hi/p'\r\n})\r\n`\r\n然后使用该组件渲染时，添加一下class：\r\n`\r\nmyComponent class=\"baz boo\"/myComponent\r\n`\r\nHTML最终将会被渲染为\r\n`\r\np class=\"foo bar baz boo\"Hi/p\r\n`\r\n自定义组件，同样可以绑定HTML class：\r\n`\r\nmyComponent class=\"baz boo\" v-bind:class=\"{active:isActive}\"/myComponent\r\n`\r\n 绑定内联样式\r\n对象语法\r\nv-bind:style的对象语法非常像CSS，CSS属性名可以用驼峰式（camelCase）或者短横分隔符命名(kabab-case):\r\n`\r\ndiv v-bind:style=\"{color:activeColor, fontSize:fontSize+'px'}\"/div\r\n`\r\n也可以直接绑定一个对象\r\n`\r\ndiv v-bind:style=\"styleObject\"/div\r\nscript\r\ndata:{\r\n    styleObject:{\r\n       color: 'red',\r\n       fontSize: '13px'\r\n    }\r\n}\r\n`\r\n 自动添加前缀\r\n当v-bind:style使用的属性需要添加特定前缀时，如transform，Vue会自动添加\r\n\r\n条件渲染\r\n v-if\r\n可以使用v-if来判断是否展示某个元素，当然也可以组合v-else，v-else元素必须紧跟在v-if或者v-else-if后边\r\n`\r\ndiv v-if=\"type === 'A'\"A/div\r\ndiv v-else-if=\"type === 'B'\"B/div\r\ndiv v-elseNot A/B/div\r\n`\r\n在template中使用v-if条件组\r\n如果想要切换多个元素，可以使用v-template元素来包装元素，并在上边使用v-if，最终渲染的HTML并不会包含template\r\n`\r\ntemplate v-if=\"ok\"\r\n   h1Title/h1\r\n   pParagraph 1/p\r\n/tempalte\r\n`\r\n 用key管理可复用的元素\r\nVue会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。例如，允许用户在不同的登录方式之间切换\r\n`\r\ntemplate v-if=\"loginType === 'username'\"\r\n  labelUsername/label\r\n  input placeholder=\"Enter your username\"\r\n/template\r\ntemplate v-else\r\n  labelEmail/label\r\n  input placeholder=\"Enter your email address\"\r\n/template\r\n`\r\n在上面两个切换时，不会清除用户已经输入的内容，两个模板使用了相同的元素，input不会被替换，只是替换了它的placehoder.\r\n如果这样不符合实际需求，可以使用key属性来表明元素不要复用\r\n`\r\ntemplate v-if=\"loginType === 'username'\"\r\n  labelUsername/label\r\n  input placeholder=\"Enter your username\" key=\"username-input\"\r\n/template\r\ntemplate v-else\r\n  labelEmail/label\r\n  input placeholder=\"Enter your email address\" key=\"email-input\"\r\n/template\r\n`\r\nv-show\r\nv-show也会根据条件展示元素：\r\n`\r\nh1 v-show=\"ok\"Hello!/h1\r\n`\r\n不同的是，v-show的元素会始终保留在渲染的DOM中。该指令只是简单地切换元素的CSS属性display，它不支持template语法\r\n v-if vs v-show\r\nv-if 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\r\nv-if也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\r\n相比之下，v-show就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。\r\n一般来说，v-if有更高的切换开销，而v-show有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用v-show较好；如果在运行时条件不太可能改变，则使用v-if较好。\r\n列表渲染\r\n v-for\r\n用v-for指令根据一组数组的选项列表进行渲染，v-for指令需要以item in items形式的特殊语法，items是源数据数组并且item是数组元素迭代的别名。\r\n基本用法\r\n在v-for块中，对副作用域属性具有完全访问权限，v-for还支持一个可选的第二个参数作为索引。\r\n可以用of 代替in.\r\n`\r\nul id=\"list_1\"\r\n    li v-for=\"(item,index) in/of items\"\r\n       {{ index }}. {{ item.message }}\r\n    /li\r\n/ul\r\n`\r\n其中数据为：\r\n`\r\nvar list_1 = new Vue({\r\n    el: 'list_1',\r\n    data: {\r\n        items: [\r\n            {message: 'Foo' },\r\n            {message: 'Bar' }\r\n        ]\r\n    }\r\n});\r\n`\r\nTemplate v-for\r\n可以在template标签中使用v-for来渲染多个模块。\r\n`\r\nul\r\n    template v-for=\"item in items\"\r\n        li{{item.message}}/li\r\n        liother info/li\r\n    /template\r\n/ul\r\n`\r\n 对象迭代v-for\r\n可以用v-for来迭代一个对象的属性。\r\n`\r\nul id=\"repeat-object\" class=\"demo\"\r\ndiv v-for=\"(value, key, index) in object\"\r\n  {{ index }}. {{ key }} : {{ value }}\r\n/div\r\n/ul\r\n`\r\n`\r\nvar object = new Vue({\r\n  el: '#repeat-object',\r\n  data: {\r\n    object: {\r\n      FirstName: 'John',\r\n      LastName: 'Doe',\r\n      Age: 30\r\n    }\r\n  }\r\n})\r\n`\r\n注意：使用v-for迭代数据或者对象属性时，修改属性时，可以这样： list_1.items.push({message:'data'});类型要与items中的类型一致。\r\n整数迭代v-for\r\n`\r\ndiv\r\n  span v-for=\"n in 10\"{{ n }}/span\r\n/div\r\n`\r\n上面的例子是从1开始的。\r\n 组件和v-for\r\n在自定义组件里，可以像使用任何普通元素一样使用v-for。组件中使用v-for不能自动将数据传递到数组里，因为组件有自己的作用域。为了传递数据到组件，需要用到props:\r\n`\r\nmyComponent v-for=\"item in items\" :key=\"item.id\"/myComponent\r\n<myComponent\r\n  v-for=\"(item, index) in items\"\r\n  v-bind:item=\"item\"\r\n  v-bind:index=\"index\"\r\n  v-bind:key=\"item.id\"\r\n/myComponent\r\n`\r\n下边是一个完整的例子：\r\n`\r\ndiv id=\"todo-list-example\"\r\n  <input\r\n    v-model=\"newTodoText\"\r\n    v-on:keyup.enter=\"addNewTodo\"\r\n    placeholder=\"Add a todo\"\r\n  \r\n  ul\r\n    <li\r\n      is=\"todo-item\"\r\n      v-for=\"(todo, index) in todos\"\r\n      v-bind:title=\"todo\"\r\n      v-on:remove=\"todos.splice(index, 1)\"\r\n    /li\r\n  /ul\r\n/div\r\nscript\r\nVue.component('todo-item', {\r\n  template: `\r\n    li\r\n      {{ title }}\r\n      button v-on:click=\"$emit('remove')\"X/button\r\n    /li\r\n  `,\r\n  props: ['title']\r\n});\r\nnew Vue({\r\n  el: '#todo-list-example',\r\n  data: {\r\n    newTodoText: '',\r\n    todos: [\r\n      'Do the dishes',\r\n      'Take out the trash',\r\n      'Mow the lawn'\r\n    ]\r\n  },\r\n  methods: {\r\n    addNewTodo: function () {\r\n      this.todos.push(this.newTodoText)\r\n      this.newTodoText = ''\r\n    }\r\n  }\r\n});\r\n/script\r\n`\r\nv-for与v-if一同使用\r\n当这两个指令在同一个节点时，v-for的优先级比v-if高。在每个v-for循环中，v-if都会运行。\r\n`\r\nli v-for=\"todo in todos\" v-if=\"!todo.isComplete\"{{todo}}/li\r\n`\r\n上边的代码只展示了isComplete为false的值。\r\n如果想根据条件判断是否执行循环，可以用template包裹元素v-if:\r\n`\r\nul v-if=\"shouldRenderTodos\"\r\n  li v-for=\"todo in todos\"\r\n    {{ todo }}\r\n  /li\r\n/ul\r\n`\r\n key\r\nv-for在更新已渲染过的元素列表时，它默认用“就地复用”的策略。如果数据项的顺序被改变，Vue不移动DOM元素来匹配数据顺序，而是简单复用每个元素，并确保它在特定索引下显示已经被渲染过的每个元素。\r\n这个默认的模式是有效的，但是只适用于不依赖子组件状态或临时 DOM 状态（例如：表单输入值）的列表渲染输出。\r\n为了能够跟踪每个节点，从而能重用和重排序现有元素，需要为每项提供一个唯一key属性。每个key值都有唯一id\r\n`\r\ndiv v-for=\"item in items\" :key=\"item.id\"\r\n  !-- 内容 --\r\n/div\r\n`\r\n数组更新检测\r\n 变异方法\r\nVue包含一组观察数组的变异方法，他们也会触发视图更新：\r\npush()\r\npop()\r\nshift()\r\nunshift()\r\nsplice()\r\nsort()\r\nreverse()\r\n重塑数组\r\n如果不是变异方法，那么不会触发视图更新，可以用新数组替换旧数组。Vue采用了一些智能启发式方式来最大化DOM元素重用，所以替换是一个相对高效的方式：\r\n`\r\nexample1.items = example1.items.filter(function (item) {\r\n  return item.message.match(/Foo/)\r\n})\r\n`\r\n 注意事项\r\n由于 JavaScript 的限制， Vue 不能检测以下变动的数组：\r\n利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue\r\n修改数组的长度时，例如：vm.items.length = newLength\r\n对于第一类问题，可以用一下方法触发更新：\r\n`\r\n// Vue.set\r\nVue.set(example1.items, indexOfItem, newValue)\r\n// Array.prototype.splice 变异方法\r\nexample1.items.splice(indexOfItem, 1, newValue)\r\n`\r\n对于第二类问题，可以使用splice\r\n`\r\nexample1.items.splice(newLength)\r\n`\r\n\r\n显示过滤/排序结果\r\n若果要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据。在这种情况下，可以创建返回过滤或排序数组的计算属性。\r\n`\r\nli v-for=\"n in evenNumbers\"{{ n }}/li\r\nscript\r\ndata: {\r\n  numbers: [ 1, 2, 3, 4, 5 ]\r\n},\r\ncomputed: {\r\n  evenNumbers: function () {\r\n    return this.numbers.filter(function (number) {\r\n      return number % 2 === 0\r\n    })\r\n  }\r\n}\r\n/script\r\n`\r\n若计算属性不使用，例如： 在嵌套v-for循环中，可以使用method方法\r\n`\r\nli v-for=\"n in even(numbers)\"{{ n }}/li\r\nscript\r\ndata: {\r\n  numbers: [ 1, 2, 3, 4, 5 ]\r\n},\r\nmethods: {\r\n  even: function (numbers) {\r\n    return numbers.filter(function (number) {\r\n      return number % 2 === 0\r\n    })\r\n  }\r\n}\r\n/script\r\n`\r\n\r\n 事件处理器\r\n监听事件\r\n可以用v-on指令监听DOM事件来触发事件：\r\n`\r\ndiv id=\"example-1\"\r\n  button v-on:click=\"counter += 1\"增加 1/button\r\n  p这个按钮被点击了 {{ counter }} 次。/p\r\n/div\r\nscript\r\nvar example1 = new Vue({\r\n  el: 'example-1',\r\n  data: {\r\n    counter: 0\r\n  }\r\n})\r\n/script\r\n`\r\n方法事件处理器\r\n对于复杂的事件处理逻辑，可以使用v-on来接收一个方法调用。\r\n`\r\ndiv id=\"example-2\"\r\n  !-- greet 是在下面定义的方法名 --\r\n  button v-on:click=\"greet\"Greet/button\r\n/div\r\nscript\r\nvar example2 = new Vue({\r\n  el: 'example-2',\r\n  data: {\r\n    name: 'Vue.js'\r\n  },\r\n  // 在 methods 对象中定义方法\r\n  methods: {\r\n    greet: function (event) {\r\n      // this 在方法里指当前 Vue 实例\r\n      alert('Hello ' + this.name + '!')\r\n      // event 是原生 DOM 事件\r\n      if (event) {\r\n        alert(event.target.tagName)\r\n      }\r\n    }\r\n  }\r\n})\r\n/script\r\n`\r\n内联处理器方法\r\n除了直接绑定到一个方法，也可以用内联的JavaScript语句，如果庶在内联语句中范文原生DOM事件event，可以将特殊变量$event传入方法中：\r\n`\r\ndiv id=\"example-3\"\r\n  button v-on:click=\"say('hi')\"Say hi/button\r\n  button v-on:click=\"say('what', $event)\"Say what/button\r\n/div\r\nscript\r\nnew Vue({\r\n  el: 'example-3',\r\n  methods: {\r\n    say: function (message, event) {\r\n      if (event) event.preventDefault();\r\n      alert(message);\r\n    }\r\n  }\r\n})\r\n/script\r\n`\r\n事件修饰符\r\n可以通过v-on的事件修饰符来调用event.preventDefault() 或 event.stopPropagation():\r\n.stop\r\n.prevent\r\n.capture\r\n.self\r\n.once\r\n`\r\n!-- 阻止单击事件冒泡 --\r\na v-on:click.stop=\"doThis\"/a\r\n!-- 提交事件不再重载页面 --\r\nform v-on:submit.prevent=\"onSubmit\"/form\r\n!-- 修饰符可以串联  --\r\na v-on:click.stop.prevent=\"doThat\"/a\r\n!-- 只有修饰符 --\r\nform v-on:submit.prevent/form\r\n!-- 添加事件侦听器时使用事件捕获模式 --\r\ndiv v-on:click.capture=\"doThis\".../div\r\n!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --\r\ndiv v-on:click.self=\"doThat\".../div\r\n!-- 点击事件将只会触发一次（2.1.4新增） --\r\na v-on:click.once=\"doThis\"/a\r\n`\r\n使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。用 @click.prevent.self 会阻止所有的点击，而 @click.self.prevent 只会阻止元素上的点击。\r\n 键值修饰符\r\n在监听键盘事件时，经常需要监测常见的键值。Vue中可以用v-on来监听键盘事件.\r\n`\r\n!-- 只有在 keyCode 是 13 时调用 vm.submit() --\r\ninput v-on:keyup.13=\"submit\"\r\n!-- 同上 --\r\ninput v-on:keyup.enter=\"submit\"\r\n!-- 缩写语法 --\r\ninput @keyup.enter=\"submit\"\r\n`\r\n全部的按键别名：\r\n.enter\r\n.tab\r\n.delete\r\n.esc\r\n.space\r\n.up\r\n.down\r\n.left\r\n.right\r\n除此之外，还可以用config.keyCodes\t对象自定义键值修饰符别名\r\n`\r\n// 可以使用 v-on:keyup.f1\r\nVue.config.keyCodes.f1 = 112\r\n`\r\n修饰健\r\n在2.1.0中，新增了鼠标和辅助健的监听事件\r\n.ctrl\r\n.alt\r\n.shift\r\n.meta\r\n`\r\n!-- Alt + C --\r\ninput @keyup.alt.67=\"clear\"\r\n!-- Ctrl + Click --\r\ndiv @click.ctrl=\"doSomething\"Do something/div\r\n`\r\n修饰键比正常的按键不同；修饰键和 keyup 事件一起用时，事件引发时必须按下正常的按键。换一种说法：如果要引发 keyup.ctrl，必须按下 ctrl 时释放其他的按键；单单释放 ctrl 不会引发事件。\r\n 鼠标监听\r\n在2.1.0中，可以监听鼠标的按键\r\n.left\r\n.right\r\n.middle\r\n在HTML中监听事件的好处\r\n你可能注意到这种事件监听的方式违背了关注点分离（separation of concern）传统理念。不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 v-on 有几个好处：\r\n扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。\r\n因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。\r\n当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。\r\n 表单控件绑定\r\n基础用法\r\nv-model指令可以在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。它是负责监听用户的输入事件以更新数据，并特别处理一些极端的例子的语法糖。\r\n对于要求 IME （如中文、 日语、 韩语等） 的语言，你会发现那v-model不会在 ime 构成中得到更新。如果你也想实现更新，请使用 input事件。\r\n 文本\r\n`\r\ninput v-model=\"message\" placeholder=\"edit me\"\r\npMessage is: {{ message }}/p\r\n`\r\n多行文本\r\n`\r\nspanMultiline message is:/span\r\np style=\"white-space: pre\"{{ message }}/p\r\nbr\r\ntextarea v-model=\"message\" placeholder=\"add multiple lines\"/textarea\r\n`\r\n在文本区域插值( textarea/textarea ) 并不会生效，应用 v-model 来代替\r\n 复选框\r\n单个勾选框，逻辑值\r\n`\r\ninput type=\"checkbox\" id=\"checkbox\" v-model=\"checked\"\r\nlabel for=\"checkbox\"{{ checked }}/label\r\n`\r\n多个勾选框，绑定到同一个数组\r\n`\r\ninput type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\"\r\nlabel for=\"jack\"Jack/label\r\ninput type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\"\r\nlabel for=\"john\"John/label\r\ninput type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\"\r\nlabel for=\"mike\"Mike/label\r\nbr\r\nspanChecked names: {{ checkedNames }}/span\r\nscript\r\nnew Vue({\r\n  el: '...',\r\n  data: {\r\n    checkedNames: []\r\n  }\r\n})\r\n/script\r\n`\r\n其他表单情况\r\n组件\r\n组件（Component）是Vue.js最强大的功能之一。组件可以扩展HTML元素，封装可重用的代码。组件是自定义的元素，Vue.js编译器为它添加特殊功能。在有些情况下，组件也可以是原生HTML元素的形式，以is特性扩展。\r\n 使用组件\r\n全局注册\r\n要注册一个全局组件，可以使用Vue.component(tagName, options)。\r\n`\r\nVue.component('my-component', {\r\n  // 选项\r\n})\r\n`\r\n组件在注册后，便可以在父实例的模块中自定义元素。要保证在初始化根实例之前注册了组件\r\n`\r\ndiv id=\"example\"\r\n  my-component/my-component\r\n/div\r\nscript\r\n// 注册\r\nVue.component('my-component', {\r\n  template: 'divA custom component!/div'\r\n})\r\n// 创建根实例\r\nnew Vue({\r\n  el: 'example'\r\n})\r\n/script\r\n`\r\n局部注册\r\n没有必要所有的组件都注册在全局中，可以通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用。这种封装也适用于其它可注册的 Vue 功能，如指令。\r\n`\r\nvar Child = {\r\n  template: 'divA custom component!/div'\r\n}\r\nnew Vue({\r\n  // ...\r\n  components: {\r\n    // my-component 将只在父模板可用\r\n    'my-component': Child\r\n  }\r\n})\r\n`\r\n DOM 模板解析说明\r\n使用DOM作为模板时，会受到HTML的一些限制。因为Vue只要在浏览器解析和标准化HTML之后才能获取模板内容。尤其是ul, ol, table, select限制了能被它包裹的元素。\r\n在自定义组件中使用这些首限制的元素时会导致一些问题：\r\n`\r\ntable\r\n    my-row.../my-row\r\n/table\r\n`\r\n自定义组件my-row被认为是无效的内容，在渲染的时候会出现问题。可以用下面的方法来绕过HTML的限制\r\n`\r\ntable\r\n  tr is=\"my-row\"/tr\r\n/table\r\n`\r\ndata必须是函数\r\n通过Vue构造器传入的各种选项大多数可以在组件里用。data是一个例外，他必须是函数。\r\n`\r\nVue.component('my-component', {\r\n  template: 'span{{ message }}/span',\r\n  data: {\r\n    message: 'hello'\r\n  }\r\n})\r\n`\r\n在上述代码中，Vue会停止运行，并在控制台报警。可以通过以下方式绕开Vue的警告\r\n`\r\ndiv id=\"example-2\"\r\n  simple-counter/simple-counter\r\n  simple-counter/simple-counter\r\n  simple-counter/simple-counter\r\n/div\r\nscript\r\nvar data = { counter: 0 }\r\nVue.component('simple-counter', {\r\n  template: 'button v-on:click=\"counter += 1\"{{ counter }}/button',\r\n  // 技术上 data 的确是一个函数了，因此 Vue 不会警告，\r\n  // 但是我们返回给每个组件的实例的却引用了同一个data对象\r\n  data: function () {\r\n    return data\r\n  }\r\n})\r\nnew Vue({\r\n  el: 'example-2'\r\n})\r\n/script\r\n`\r\n由于这三个组件共享了同一个data，因此增加一个counter会影响所有的组件。\r\n构成组件\r\n组件意味着协同工作，组件之间需要通讯。在Vue中，父子组件的关系可以总结为props down，eventsup。父组件通过props向下传递数据给子组件，子组件通过events给父组件发送消息。\r\n\r\n prop\r\n使用prop传递数据\r\n组件实例的作用域是孤立的，这意味着不能(也不应该)在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的props选项。\r\n子组件要显示地用props选项声明它期待获取的数据。\r\n`\r\nchild message=\"hello!\"/child\r\nscript\r\nVue.component('child', {\r\n  // 声明 props\r\n  props: ['message'],\r\n  // 就像 data 一样，prop 可以用在模板内\r\n  // 同样也可以在 vm 实例中像 “this.message” 这样使用\r\n  template: 'span{{ message }}/span'\r\n})\r\n/script\r\n`\r\n 驼峰式 vs 短划线式\r\nHTML特性是不区分大小写。所以，当不使用字符串模板，驼峰式命名的prop需要转换为相应的短划线式命名：\r\n`\r\n!-- kebab-case in HTML --\r\nchild my-message=\"hello!\"/child\r\nscript\r\nVue.component('child', {\r\n  // camelCase in JavaScript\r\n  props: ['myMessage'],\r\n  template: 'span{{ myMessage }}/span'\r\n})\r\n/script\r\n`\r\n动态prop\r\n在模板中，要动态绑定父组件的数据到子模板的props，与绑定到任何普通的HTML特性相似，用v-bind。当父组件的数据变化时，该变化也会传导给子组件：\r\n`\r\ndiv\r\n  input v-model=\"parentMsg\"\r\n  br\r\n  child v-bind:my-message=\"parentMsg\"/child\r\n/div\r\n`\r\n 单向数据流\r\nprop是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件修改父组件的状态。\r\n另外，每次父组件更新时，子组件的所有prop都会更新为最新值。这意味着你不应该在子组件内部改变prop。\r\n定义一个局部变量，并用 prop 的值初始化它：\r\n`\r\nprops: ['initialCounter'],\r\ndata: function () {\r\n  return { counter: this.initialCounter }\r\n}\r\n`\r\n定义一个计算属性，处理 prop 的值并返回。\r\n`\r\nprops: ['size'],\r\ncomputed: {\r\n  normalizedSize: function () {\r\n    return this.size.trim().toLowerCase()\r\n  }\r\n}\r\n`\r\nprop 验证\r\n可以为组件的props指定验证规格，如果传入的数据不符合规格，Vue会发出警告。\r\n要指定验证规格，需要用对象的形式，而不是字符串数组。\r\n`\r\nVue.component('example', {\r\n  props: {\r\n    // 基础类型检测 （null 意思是任何类型都可以）\r\n    propA: Number,\r\n    // 多种类型\r\n    propB: [String, Number],\r\n    // 必传且是字符串\r\n    propC: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // 数字，有默认值\r\n    propD: {\r\n      type: Number,\r\n      default: 100\r\n    },\r\n    // 数组／对象的默认值应当由一个工厂函数返回\r\n    propE: {\r\n      type: Object,\r\n      default: function () {\r\n        return { message: 'hello' }\r\n      }\r\n    },\r\n    // 自定义验证函数\r\n    propF: {\r\n      validator: function (value) {\r\n        return value  10\r\n      }\r\n    }\r\n  }\r\n})\r\n`\r\ntype可用的原生构造器有： String, Number, Boolean, Fucntion, Object, Array， type也可以是一个自定义构造函数，使用instanceof检测\r\n 自定义事件\r\n使用自定义事件将数据从子组件传递到父组件。绑定的事件是父组件的methods方法\r\n使用v-on绑定自定义事件\r\n使用$on(eventName)监听事件\r\n使用$emit(eventName) 触发事件\r\n`\r\ndiv id=\"counter-event-example\"\r\n  p{{ total }}/p\r\n  button-counter v-on:increment=\"incrementTotal\"/button-counter\r\n  button-counter v-on:increment=\"incrementTotal\"/button-counter\r\n/div\r\nscript\r\nVue.component('button-counter', {\r\n  template: 'button v-on:click=\"increment\"{{ counter }}/button',\r\n  data: function () {\r\n    return {\r\n      counter: 0\r\n    }\r\n  },\r\n  methods: {\r\n    increment: function () {\r\n      this.counter += 1\r\n      this.$emit('increment')\r\n    }\r\n  },\r\n})\r\nnew Vue({   // 父组件\r\n  el: 'counter-event-example',\r\n  data: {\r\n    total: 0\r\n  },\r\n  methods: {\r\n    incrementTotal: function () {\r\n      this.total += 1\r\n    }\r\n  }\r\n})\r\n/script\r\n`\r\n可以使用.native修饰v-on来在某个组件的根元素上监听一个原生事件。\r\n`\r\nmy-component v-on:click.native=\"doTheThing\"/my-component\r\n`\r\n使用自定义事件的表单输入组件\r\n自定义事件可以用来创建自定义的表单输入组件，使用v-model来进行数据双向绑定.\r\n`\r\ninput v-model=\"something\"\r\n`\r\n可以看做是以下实例的语法糖：\r\n`\r\ninput v-bind:value=\"something\" v-on:input=\"something = $event.target.value\"\r\n`\r\n所以要让组件的v-model生效，它必须：\r\n接收一个value属性\r\n在有新的value时触发input事件\r\n`\r\ndiv id=\"app\"\r\n  <currency-input \r\n    label=\"Price\" \r\n    v-model=\"price\"\r\n  /currency-input\r\n  <currency-input \r\n    label=\"Shipping\" \r\n    v-model=\"shipping\"\r\n  /currency-input\r\n  <currency-input \r\n    label=\"Handling\" \r\n    v-model=\"handling\"\r\n  /currency-input\r\n  <currency-input \r\n    label=\"Discount\" \r\n    v-model=\"discount\"\r\n  /currency-input\r\n  \r\n  pTotal: ${{ total }}/p\r\n/div\r\n`\r\n`\r\nVue.component('currency-input', {\r\n  template: '\\\r\n    div\\\r\n      label v-if=\"label\"{{ label }}/label\\\r\n      $\\\r\n      <input\\\r\n        ref=\"input\"\\\r\n        v-bind:value=\"value\"\\\r\n        v-on:input=\"updateValue($event.target.value)\"\\\r\n        v-on:focus=\"selectAll\"\\\r\n        v-on:blur=\"formatValue\"\\\r\n      \\\r\n    /div\\\r\n  ',\r\n  props: {\r\n    value: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    label: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  mounted: function () {\r\n    this.formatValue()\r\n  },\r\n  methods: {\r\n    updateValue: function (value) {\r\n      var result = currencyValidator.parse(value, this.value)\r\n      if (result.warning) {\r\n        this.$refs.input.value = result.value\r\n      }\r\n      this.$emit('input', result.value)\r\n    },\r\n    formatValue: function () {\r\n      this.$refs.input.value = currencyValidator.format(this.value)\r\n    },\r\n    selectAll: function (event) {\r\n      // Workaround for Safari bug\r\n      // http://stackoverflow.com/questions/1269722/selecting-text-on-focus-using-jquery-not-working-in-safari-and-chrome\r\n      setTimeout(function () {\r\n      \tevent.target.select()\r\n      }, 0)\r\n    }\r\n  }\r\n})\r\n\r\nnew Vue({\r\n  el: 'app',\r\n  data: {\r\n    price: 0,\r\n    shipping: 0,\r\n    handling: 0,\r\n    discount: 0\r\n  },\r\n  computed: {\r\n    total: function () {\r\n      return ((\r\n        this.price * 100 + \r\n        this.shipping * 100 + \r\n        this.handling * 100 - \r\n        this.discount * 100\r\n      ) / 100).toFixed(2)\r\n    }\r\n  }\r\n})\r\n`\r\n非父子组件通信\r\n如果两个组件不是父子关系，可以使用一个空的Vue实例作为中间通信。在复杂的情况下，我们应该考虑使用专门的 状态管理模式.\r\n`\r\nvar bus = new Vue();\r\n/ 触发组件 A 中的事件\r\nbus.$emit('id-selected', 1)\r\n// 在组件 B 创建的钩子中监听事件\r\nbus.$on('id-selected', function (id) {\r\n  // ...\r\n})\r\n`\r\n 使用slot分发内容",
        "tags": []
    },
    {
        "uri": "/post/git",
        "content": "---\r\ntitle: git 版本管理工具\r\ndate: 2017-08-12 19:48:32\r\ntags: [\"工具\"]\r\ncategories: [\"工具\"]\r\n---\r\ngit是比较常用的版本控制工具。\r\ngit的基本使用\r\ngit init : 创建新的git仓库\r\ngit clone path : 从远端服务器或本地检出仓库\r\ngit add filename 或者 git add * : 添加改动到缓存区\r\ngit commit -m '代码提交信息' :  实际提交改动，将改动提交到本地仓库的HEAD中\r\ngit remote add origin server : 添加远程仓库\r\ngit push origin master :  将改动提交道远端仓库\r\ngit branch -a : 查看远程分支\r\ngit branch : 查看本地分支\r\ngit branch –d xxxx : 删除本地分支\r\n10. git branch –r –d origin/xxxx : 删除远程分支\r\n\r\n git ignore\r\ngit rm -r: 可以将一个文件夹添加到不追踪内容之中。如果出现 fatal: pathspec 'dir' did not match any files，可能是因为该文件夹已经在不追踪内容之中了。\r\n\r\ngit 分支\r\n分支是用来将特性开发绝缘开来的。在创建仓库的时候，master是默认的。\r\ngit checkout –b feature : 创建一个叫做 “feature”的分支，并切换到该分支\r\ngit checkout master : 切换回主分支\r\ngit branch –d feature :删除feature 分支\r\ngit push origin branch : 将分支推送到远端仓库\r\n\r\n git更新与合并\r\ngit pull : 将更新本地仓库至最新改动\r\ngit merge branch : 在当前工作目录中获取并合并远端的改动；要合并其他分支到当前分支\r\ngit add filename : 解决冲突之后，执行该命令表示合并成功\r\ngit diff sourcebranch targetbranch: 在合并改动之前，使用该命令查看\r\n\r\ngit替换本地改动\r\ngit checkout -- filename : 使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动，以及新文件不受影响。\r\ngit fetch origin    git reset –hard origin/master丢弃所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向它: \r\n\r\n",
        "tags": []
    },
    {
        "uri": "/post/hello-world",
        "content": "---\r\ntitle: hexo Hello World\r\ndate: 2017-06-17 19:48:32\r\ntags: [\"nodejs\"]\r\ncategories: [\"nodejs\"]\r\n---\r\nWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\r\n\r\nQuick Start\r\n\r\n Create a new post\r\n\r\n` bash\r\n$ hexo new \"My New Post\"\r\n`\r\n\r\nMore info: Writing\r\n\r\nRun server\r\n\r\n` bash\r\n$ hexo server\r\n`\r\n\r\nMore info: Server\r\n\r\n Generate static files\r\n\r\n` bash\r\n$ hexo generate\r\n`\r\n\r\nMore info: Generating\r\n\r\nDeploy to remote sites\r\n\r\n` bash\r\n$ hexo deploy\r\n`\r\n\r\nMore info: Deployment\r\n\r\n出现过的问题：\r\n执行hexo d时，出现 ERROR Deployer not found: git，解决方法：\r\n    是否执行过npm install hexo-deployer-git --save\r\n    执行hexo init之后，是否切换过根目录。如果切换过，需要新建一个目录重新hexo init",
        "tags": []
    },
    {
        "uri": "/post/hugo markdown中使用javascript",
        "content": "---\r\ntitle: hugo markdown 中使用javascript\r\ndate: 2017-12-24 15:13:00\r\ntags: [\"markdown\"]\r\n---\r\n\r\n问题\r\n在使用hugo制作个人博客时，不支持在markdown文件中直接引入script/javascript code//script。它会对javascript代码作markdown转换。\r\n\r\n 解决办法\r\n使用hugo中的Shortcodes：\r\n在 layouts 文件夹中，新建一个 shortcodes 文件夹\r\n新建一个文件，暂时叫 javascript.html。名字可以随意，文件后缀名要用html。文件内容为{{.Inner}}\r\n在markdown中，通过如下方式使用：&#123;&#123; javascript &#125;&#125;script/javascript code//script&#123;&#123; /javascript }}。其中&#123;&#123; javascript }}的javascript同第二步中的文件名一致\r\n",
        "tags": []
    },
    {
        "uri": "/post/java/_Hibernate",
        "content": "---\r\ntitle: Hibernate学习笔记\r\ndate: 2017-07-23 17:16:32\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\ndraft: true\r\n---\r\n\r\nHibernate 是一个高性能的对象/关系型持久化存储和查询的工具。Hibernate 不仅关注于从 Java 类到数据库表的映射（也有 Java 数据类型到 SQL 数据类型的映射），另外也提供了数据查询和检索服务。\r\n!-- more --\r\n术语\r\nJPA: Java Persistence API的简称，中文名Java持久层API。是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中\r\n\r\n Hibernate关键类\r\nSessionFactory是一个线程安全的、不可更改的，表示数据库和应用domain映射关系。SessionFactory的创建代价非常高，对于给定的数据库，相应的SessionFactory只应该有一个，可以使用单例模式。\r\nSession: 一个单线程，短存活的实例。它封装了JDBC。它维护一个“可重复读”的一级缓存。\r\nTransaction： 事务\r\n使用hibernate5时，resin4不支持@Table，可以将@Entity的name属性换成表名，删除resin的lib目录下可能有冲突的jar包\r\n持久类 (domain model)\r\n低版本的Hibernate使用XML映射文件来完成从数据库到Java Bean的映射。随着JPA的兴起和完善，Hibernate开始推荐使用JAP注解来完成映射。对于JPA不支持的特性，Hibernate有自己扩展的注解。\r\n 映射类型\r\nHibernate能够表示应用程序数据的Java和JDBC的表示。Hibernate的type功能是从数据库中读写数据，该type是实现了org.hibernate.type.Type接口的类。Hibernate的type也定义了如何比较相等，如何复制值等一系列功能。Hibernate的type实现了Java类型和SQL数据类型的相互转换。\r\n值类型\r\n值类型是没有生命周期的数据，为有生命周期实体类型所有。包含Java的基本类型，嵌套类型和集合类型\r\n 实体类型\r\n实体是使用唯一标识符与数据库表中的行相关联的域模型类。 由于需要一个唯一的标识符，实体独立存在并定义自己的生命周期。Contact类本身就是一个实体的例子。\r\n\r\n`sql\r\ncreate table Contact (\r\n    id integer not null,\r\n    first varchar(255),\r\n    last varchar(255),\r\n    middle varchar(255),\r\n    notes varchar(255),\r\n    starred boolean not null,\r\n    website varchar(255),\r\n    primary key (id)\r\n)\r\n`\r\n`java\r\n@Entity(name = \"Contact\")\r\npublic static class Contact {\r\n    @Id\r\n    private Integer id;\r\n    private Name name;\r\n    private String notes;\r\n    private URL website;\r\n    private boolean starred;\r\n    //Getters and setters are omitted for brevity\r\n}\r\n\r\n@Embeddable\r\npublic class Name {\r\n    private String first;\r\n    private String middle;\r\n    private String last;\r\n    // getters and setters omitted\r\n}\r\n\r\n`\r\n\r\n命名策略\r\nhibernate经过两步处理将对象名映射为数据库的表名：\r\n通过用户指定（@Column或@Table）或者hibernate自定的策略来生成一个逻辑名称；\r\n将逻辑名称映射到数据库的表名，策略为实现PhysicalNamingStrategy的接口\r\n JPA定义的逻辑名就是数据表名\r\n\r\n 隐式命名策略\r\n\r\n当实体类型没有指定其对应的数据库表名时，Hibernate会采用默认的策略解析出表名，实体属性也类似。\r\n\r\n我们可以通过设定hibernate.implicitnamingstrategy来指定使用哪种默认的命名策略：\r\ndefault或jpa采用的命名策略是org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl\r\nlegacy-hbm: Hibernate的命名策略\r\n指定一个实现org.hibernate.boot.model.naming.ImplicitNamingStrategy接口的命名策略\r\nPhysicalNamingStrategy\r\n许多组织定义关于数据库对象（表，列，外键等）的命名。 PhysicalNamingStrategy的想法是帮助实现这样的命名规则，而不必通过显式名称将它们硬编码到映射中。\r\n`java\r\npublic class MyPhysicalNamingStrategy implements PhysicalNamingStrategy {\r\n    private static final MapString,String ABBREVIATIONS = buildAbbreviationMap();\r\n\r\n    @Override\r\n    public Identifier toPhysicalCatalogName(Identifier name, JdbcEnvironment jdbcEnvironment) {\r\n        // Acme naming standards do not apply to catalog names\r\n        return name;\r\n    }\r\n\r\n    @Override\r\n    public Identifier toPhysicalSchemaName(Identifier name, JdbcEnvironment jdbcEnvironment) {\r\n        // Acme naming standards do not apply to schema names\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Identifier toPhysicalTableName(Identifier name, JdbcEnvironment jdbcEnvironment) {\r\n        final ListString parts = splitAndReplace( name.getText() );\r\n        return jdbcEnvironment.getIdentifierHelper().toIdentifier(\r\n                join( parts ),\r\n                name.isQuoted()\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public Identifier toPhysicalSequenceName(Identifier name, JdbcEnvironment jdbcEnvironment) {\r\n        final LinkedListString parts = splitAndReplace( name.getText() );\r\n        // Acme Corp says all sequences should end with _seq\r\n        if ( !\"seq\".equalsIgnoreCase( parts.getLast() ) ) {\r\n            parts.add( \"seq\" );\r\n        }\r\n        return jdbcEnvironment.getIdentifierHelper().toIdentifier(\r\n                join( parts ),\r\n                name.isQuoted()\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public Identifier toPhysicalColumnName(Identifier name, JdbcEnvironment jdbcEnvironment) {\r\n        final ListString parts = splitAndReplace( name.getText() );\r\n        return jdbcEnvironment.getIdentifierHelper().toIdentifier(\r\n                join( parts ),\r\n                name.isQuoted()\r\n        );\r\n    }\r\n\r\n    private static MapString, String buildAbbreviationMap() {\r\n        TreeMapString,String abbreviationMap = new TreeMap ( String.CASEINSENSITIVEORDER );\r\n        abbreviationMap.put( \"account\", \"acct\" );\r\n        abbreviationMap.put( \"number\", \"num\" );\r\n        return abbreviationMap;\r\n    }\r\n\r\n    private LinkedListString splitAndReplace(String name) {\r\n        LinkedListString result = new LinkedList();\r\n        for ( String part : StringUtils.splitByCharacterTypeCamelCase( name ) ) {\r\n            if ( part == null || part.trim().isEmpty() ) {\r\n                // skip null and space\r\n                continue;\r\n            }\r\n            part = applyAbbreviationReplacement( part );\r\n            result.add( part.toLowerCase( Locale.ROOT ) );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private String applyAbbreviationReplacement(String word) {\r\n        if ( ABBREVIATIONS.containsKey( word ) ) {\r\n            return ABBREVIATIONS.get( word );\r\n        }\r\n\r\n        return word;\r\n    }\r\n\r\n    private String join(ListString parts) {\r\n        boolean firstPass = true;\r\n        String separator = \"\";\r\n        StringBuilder joined = new StringBuilder();\r\n        for ( String part : parts ) {\r\n            joined.append( separator ).append( part );\r\n            if ( firstPass ) {\r\n                firstPass = false;\r\n                separator = \"_\";\r\n            }\r\n        }\r\n        return joined.toString();\r\n    }\r\n}\r\n\r\n\r\n`\r\nspring中指定方式\r\n`xml\r\nbean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate5.LocalSessionFactoryBean\"\r\n    property name=\"dataSource\" ref=\"c3p0DataSource\"/\r\n    property name=\"configLocation\" value=\"/hibernate.cfg.xml\"/\r\n    property name=\"implicitNamingStrategy\"\r\n        bean class=\"hibernate.namestrategy.UmisImplicitNamingStrategy\" /\r\n    /property\r\n    property name=\"physicalNamingStrategy\"\r\n        bean class=\"hibernate.namestrategy.UmisPhysicalNamingStrategy\" /\r\n    /property\r\n/bean\r\n`\r\n 基本类型\r\n通常，基本值类型将单个数据库列映射到单个非聚合Java类型。Hibernate提供了一些内置的基本类型，当Hibernate使用基本类型注册表解析特定的org.hibernate.type.Type。\r\n点此进入Hibernate基本类型映射表\r\n\r\n@Basic注解：基本类型默认是被javax.persitence.Basic注解的；@Basic定义了两个属性\r\noptional(defaults to true):标明该元素是否可以为空；\r\nfetch(EAGER,LAZY)：hibernate会忽略该属性。标明是否需要懒加载\r\n@Column(name=\"\")注解：对于基本类型属性，隐式命名规则将列名设为属性名，如果不能满足需求，可以通过该注解告诉Hibernate使用什么列名。\r\n基本类型注册器\r\n对于没有指定的类型，Hibernate使用org.hibernate.type.BasicTypeRegistry来决定使用哪种类型。org.hibernate.type.BasicTypeRegistry维护了一个org.hibernate.type.BasicType的map的类型注册器。\r\n如果Hibernate选择的是不符合需求的BasicType，我们可以通过org.hibernate.annotations.Type注解来指定一个BasicType.\r\n`java\r\n@Entity(name = \"Product\")\r\npublic class Product {\r\n\r\n    @Id\r\n    private Integer id;\r\n\r\n    private String sku;\r\n\r\n    @org.hibernate.annotations.Type( type = \"nstring\" )\r\n    private String name;\r\n\r\n    @org.hibernate.annotations.Type( type = \"materialized_nclob\" )\r\n    private String description;\r\n}\r\n`\r\n 自定义 BasicType\r\n自定义BasicType有两种方式：\r\n实现BasicType接口并且注册该实例\r\n实现UserType接口，该方式不需要注册\r\n我们将java.util.BitSet映射为VARCHAR的例子，说明两种方式：\r\n`java\r\npublic class BitSetType\r\n        extends AbstractSingleColumnStandardBasicTypeBitSet\r\n        implements DiscriminatorTypeBitSet {\r\n\r\n    public static final BitSetType INSTANCE = new BitSetType();\r\n\r\n    public BitSetType() {\r\n        super( VarcharTypeDescriptor.INSTANCE, BitSetTypeDescriptor.INSTANCE );\r\n    }\r\n\r\n    @Override\r\n    public BitSet stringToObject(String xml) throws Exception {\r\n        return fromString( xml );\r\n    }\r\n\r\n    @Override\r\n    public String objectToSQLString(BitSet value, Dialect dialect) throws Exception {\r\n        return toString( value );\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return \"bitset\";\r\n    }\r\n\r\n}\r\n`\r\nAbstractSingleColumnStandardBasicType 需要一个sqlTypeDescriptor和一个javaTypeDescriptor。因为sqlTypeDescriptor是数据类型的VarcharTypeDescriptor.INSTANCE，所以我们只需要一个BitSetTypeDescriptor将String类型转换为BitSet类型：\r\n`java\r\npublic class BitSetTypeDescriptor extends AbstractTypeDescriptorBitSet {\r\n\r\n    private static final String DELIMITER = \",\";\r\n\r\n    public static final BitSetTypeDescriptor INSTANCE = new BitSetTypeDescriptor();\r\n\r\n    public BitSetTypeDescriptor() {\r\n        super( BitSet.class );\r\n    }\r\n\r\n    @Override\r\n    public String toString(BitSet value) {\r\n        StringBuilder builder = new StringBuilder();\r\n        for ( long token : value.toLongArray() ) {\r\n            if ( builder.length()  0 ) {\r\n                builder.append( DELIMITER );\r\n            }\r\n            builder.append( Long.toString( token, 2 ) );\r\n        }\r\n        return builder.toString();\r\n    }\r\n\r\n    @Override\r\n    public BitSet fromString(String string) {\r\n        if ( string == null || string.isEmpty() ) {\r\n            return null;\r\n        }\r\n        String[] tokens = string.split( DELIMITER );\r\n        long[] values = new long[tokens.length];\r\n\r\n        for ( int i = 0; i < tokens.length; i++ ) {\r\n            values[i] = Long.valueOf( tokens[i], 2 );\r\n        }\r\n        return BitSet.valueOf( values );\r\n    }\r\n\r\n    @SuppressWarnings({\"unchecked\"})\r\n    public X X unwrap(BitSet value, ClassX type, WrapperOptions options) {\r\n        if ( value == null ) {\r\n            return null;\r\n        }\r\n        if ( BitSet.class.isAssignableFrom( type ) ) {\r\n            return (X) value;\r\n        }\r\n        if ( String.class.isAssignableFrom( type ) ) {\r\n            return (X) toString( value);\r\n        }\r\n        throw unknownUnwrap( type );\r\n    }\r\n\r\n    public X BitSet wrap(X value, WrapperOptions options) {\r\n        if ( value == null ) {\r\n            return null;\r\n        }\r\n        if ( String.class.isInstance( value ) ) {\r\n            return fromString( (String) value );\r\n        }\r\n        if ( BitSet.class.isInstance( value ) ) {\r\n            return (BitSet) value;\r\n        }\r\n        throw unknownWrap( value.getClass() );\r\n    }\r\n}\r\n`\r\n当传递一个BitSet作为参数传递到PreparedStatement时会调用unwrap方法，当将JDBC列转换成映射的类型时，会调用wrap方法。\r\nBasicType需要在启动的时候，注册：\r\n`java\r\nconfiguration.registerTypeContributor( (typeContributions, serviceRegistry) - {\r\n    typeContributions.contributeType( BitSetType.INSTANCE );\r\n} );\r\n// 或者通过MetadataBuilder\r\nServiceRegistry standardRegistry =\r\n    new StandardServiceRegistryBuilder().build();\r\nMetadataSources sources = new MetadataSources( standardRegistry );\r\nMetadataBuilder metadataBuilder = sources.getMetadataBuilder();\r\nmetadataBuilder.applyBasicType( BitSetType.INSTANCE );\r\n`\r\nBitSetType注册的名字是bitset（实例的getName方法定义），所以使用的话如下：\r\n`java\r\n@Type( type = \"bitset\" )\r\nprivate BitSet bitSet;\r\n`\r\n\r\n实现UserType接口：\r\n`java\r\npublic class BitSetUserType implements UserType {\r\n\r\n\tpublic static final BitSetUserType INSTANCE = new BitSetUserType();\r\n\r\n    private static final Logger log = Logger.getLogger( BitSetUserType.class );\r\n\r\n    @Override\r\n    public int[] sqlTypes() {\r\n        return new int[] {StringType.INSTANCE.sqlType()};\r\n    }\r\n\r\n    @Override\r\n    public Class returnedClass() {\r\n        return String.class;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object x, Object y)\r\n\t\t\tthrows HibernateException {\r\n        return Objects.equals( x, y );\r\n    }\r\n\r\n    @Override\r\n    public int hashCode(Object x)\r\n\t\t\tthrows HibernateException {\r\n        return Objects.hashCode( x );\r\n    }\r\n\r\n    @Override\r\n    public Object nullSafeGet(\r\n            ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)\r\n            throws HibernateException, SQLException {\r\n        String columnName = names[0];\r\n        String columnValue = (String) rs.getObject( columnName );\r\n        log.debugv(\"Result set column {0} value is {1}\", columnName, columnValue);\r\n        return columnValue == null ? null :\r\n\t\t\t\tBitSetTypeDescriptor.INSTANCE.fromString( columnValue );\r\n    }\r\n\r\n    @Override\r\n    public void nullSafeSet(\r\n            PreparedStatement st, Object value, int index, SharedSessionContractImplementor session)\r\n            throws HibernateException, SQLException {\r\n        if ( value == null ) {\r\n            log.debugv(\"Binding null to parameter {0} \",index);\r\n            st.setNull( index, Types.VARCHAR );\r\n        }\r\n        else {\r\n            String stringValue = BitSetTypeDescriptor.INSTANCE.toString( (BitSet) value );\r\n            log.debugv(\"Binding {0} to parameter {1} \", stringValue, index);\r\n            st.setString( index, stringValue );\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Object deepCopy(Object value)\r\n\t\t\tthrows HibernateException {\r\n        return value == null ? null :\r\n            BitSet.valueOf( BitSet.class.cast( value ).toLongArray() );\r\n    }\r\n\r\n    @Override\r\n    public boolean isMutable() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public Serializable disassemble(Object value)\r\n\t\t\tthrows HibernateException {\r\n        return (BitSet) deepCopy( value );\r\n    }\r\n\r\n    @Override\r\n    public Object assemble(Serializable cached, Object owner)\r\n\t\t\tthrows HibernateException {\r\n        return deepCopy( cached );\r\n    }\r\n\r\n    @Override\r\n    public Object replace(Object original, Object target, Object owner)\r\n\t\t\tthrows HibernateException {\r\n        return deepCopy( original );\r\n    }\r\n}\r\n`\r\n枚举类型\r\n使用@Enumerated和@MapKeyEnumerated注解来将Java中的枚举类型映射到数据库中。可以根据javax.persistence.EnumType来使用不同的策略完成映射。\r\nORDINAL: 根据枚举类中枚举值的位置来映射，从0开始，若为null，则映射为NULL\r\nSTRING: 存储枚举值的名字\r\n`java\r\n@Enumerated(EnumType.ORDINAL)\r\n@Column(name = \"phone_type\")\r\nprivate PhoneType type;\r\n`\r\n\r\n还可以使用AttributeConverter来映射指定的字符串。当然了，也可以使用自定义基本类型来转换，比如继承AbstractSingleColumnStandardBasicType。下例中，Gender枚举类就映射了M和F:\r\n`java\r\n@Convert(converter = GenderConverter.class)\r\nprivate Gender gender;\r\n \r\npublic static enum Gender {\r\n    MALE( 'M' ),\r\n    FEMALE( 'F' );\r\n    private final char code;\r\n    Gender(char code) {\r\n        this.code = code;\r\n    }\r\n\r\n    public static Gender fromCode(char code) {\r\n        if ( code == 'M' || code == 'm' ) {\r\n            return MALE;\r\n        }\r\n        if ( code == 'F' || code == 'f' ) {\r\n            return FEMALE;\r\n        }\r\n        throw new UnsupportedOperationException(\r\n                \"The code \" + code + \" is not supported!\"\r\n        );\r\n    }\r\n    public char getCode() {\r\n        return code;\r\n    }\r\n}\r\n\r\n@Converter\r\npublic static class GenderConverter implements AttributeConverterGender, Character {\r\n\r\n    @Override\r\n    public Character convertToDatabaseColumn(Gender gender) {\r\n        if (gender == null) return null;\r\n        return gender.getCode();\r\n    }\r\n\r\n    @Override\r\n    public Gender convertToEntityAttribute(Character character) {\r\n        if (character == null) return null;\r\n        return Gender.fromCode(character);\r\n    }\r\n}\r\n`\r\n 映射时间类型\r\n对于java.util.Date类型：\r\n`\r\n@Temporal(TemporalType.DATE)\r\nprivate Date timestamp;    //'2017-07-22'\r\n\r\n@Temporal(TemporalType.TIME)\r\nprivate Date timestamp;   // '16:51:58'\r\n\r\n@Temporal(TemporalType.TIMESTAMP)\r\nprivate Date timestamp;  // '2017-07-22 16:51:58'\r\n`\r\n对于java.time.*类型，不用做转换的注解，因为他们是一一对应的。\r\n如果不指定时区，JDBC会使用默认的JVM时区，这在有些应用上是不合适的。可以通过如下方式设置时区：\r\n`\r\njava -Duser.timezone=UTC\r\n`\r\n`java\r\nTimeZone.setDefault( TimeZone.getTimeZone( \"UTC\" ) );\r\n`\r\n`xml\r\nproperty name=\"hibernate.jdbc.time_zone\" value=\"UTC\"/\r\n`",
        "tags": []
    },
    {
        "uri": "/post/java/_java 多线程",
        "content": "---\r\ntitle: java 多线程\r\ndate: 2017-09-05\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\ndraft: true\r\n---\r\n\r\n术语解释\r\nCAS(Compare and Swap, 比较并交换)： \r\n 解释： CAS操作需要两个输入，一个旧值和一个新值。在操作期间先比较旧值，如果没有变化，才交换成新值，否则不交换。\r\n 缺点：CAS会存在ABA的问题。如果一个值原来是A，变成了B，又变成了A，那么使用CAS检查时会发现它的值没有变化。\r\n 解决方案：在变量前边追加版本号，每次变量更新的时候，把版本号加1，那么A-B-A就会编程1A-2B-3C\r\n原子操作是指不可被中断的一个或一系列操作。\r\n\r\n volatile\r\nvolatile变量自身具有下列特性：\r\n可见性：对一个volatile变量的读，总能看到线程对这个volatile变量的最后的写入\r\n原子性：对任意单个volatile变量的读/写具有原子性，但类似volatile++这种复合操作不具备原子性。\r\n过多地使用volatile变量会降低程序执行的效率\r\n\r\nsynchronized\r\n Java中每个对象都可以作为锁，具体有：\r\n对于普通同步方法，锁是当前实例对象\r\n对于静态同步方法，锁是当前的类\r\n对于同步方法块，锁是synchronized括号中的对象\r\nJVM是基于进入和退出Monitor对象来实现方法同步和代码块同步\r\n\r\n 锁\r\n\r\n锁的升级与对比\r\n在Java SE1.6中，锁有四种状态：无锁状态-偏向锁状态-轻量级锁状态-重量级锁状态。这几种锁会随着竞争而升级，但是不能降级。不能降级的策略是为了提高获得锁和释放锁的效率。\r\n 偏向锁\r\n偏向锁使用了一种等到竞争出现才释放锁的机制，如果有竞争则升级成轻量级锁。\r\n大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得。因此为了降低获取锁的代价，引入偏向锁。当同一线程访问同步块并获得锁时，不需要进行CAS操作来加锁和解锁，只需要测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程获得了锁。\r\n如果测试失败要再测试一下Mark Word中偏向锁的标志是否设置成1（表示当前是偏向锁）：如果没有，则使用CAS竞争；如果设置了，则尝试使用CAS将对象头的偏向锁执行当前线程。\r\n轻量级锁\r\n线程在执行同步块之前，JVM会首先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁。如果失败，表示其他线程竞争锁，当前线程尝试使用自旋来获得锁。\r\n轻量级锁释放时，会使用CAS操作将复制到栈桢中的Mark Word替换回对象头，如果成功，表示没有竞争发生；如果失败，表示当前存在竞争，锁就会膨胀成重量级锁。\r\n 重量级锁\r\n重量级锁状态下，其他线程试图获取锁时，都会被阻塞，当持有锁的线程释放锁之后，会唤醒被阻塞的线程，这些线程就会进行锁的争夺。\r\n|优点|缺点|使用场景\r\n--------------------\r\n| 锁       | 优点           | 缺点  |  使用场景 |\r\n| -------- |-------------| -----|-------|\r\n| 偏向锁    | 加锁和解锁不需要额外消耗，和执行非同步方法存在纳秒级的差距| 如果线程间存在锁竞争会带来额外的锁撤销的消耗 |适用于只有一个线程访问同步块场景\r\n| 轻量级锁  | 竞争的线程不会阻塞，提高了程序的相应速度|如果始终得不到锁竞争的线程，使用自旋会消耗CPU|追求响应时间，同步块执行速度非常快\r\n| 重量级锁  | 线程竞争不使用自旋，不会消耗CPU |线程阻塞，响应时间慢|追求吞吐量，，同步块执行速度较长\r\n\r\n线程\r\n 线程优先级\r\n在Java线程中，通过一个整型成员变量priority来控制优先级，范围是从1-10，默认优先级是5。一般情况下优先级高的线程分配时间片的数量要多于优先级低的线程。\r\n针对频繁阻塞的线程需要设置的优先级较高，而需要较多CPU时间的线程，要设置较低的优先级，确保处理器不会被独占。\r\n`\r\npublic class Priority {\r\n    private static volatile boolean notStart = true;\r\n    private static volatile boolean notEnd = true;\r\n\r\n    public static void main(String [] args) throws InterruptedException {\r\n        ListJob jobs = new ArrayList();\r\n        IntStream.range(0, 10).forEach(item - {\r\n            int priority = item < 5 ? Thread.MINPRIORITY : Thread.MAXPRIORITY;\r\n            Job job = new Job(priority);\r\n            jobs.add(job);\r\n            Thread thread = new Thread(job, \"Thread-\" + item);\r\n            thread.setPriority(priority);\r\n            thread.start();\r\n        });\r\n        notStart = false;\r\n        TimeUnit.SECONDS.sleep(10);\r\n        notEnd = false;\r\n        jobs.forEach(j -\r\n            System.out.println(\"job priority:\" + j.priority + \" count:\" + j.jobCount)\r\n        );\r\n    }\r\n\r\n    static class Job implements Runnable {\r\n        private int priority;\r\n        private long jobCount;\r\n        Job(int priority) {\r\n            this.priority = priority;\r\n        }\r\n\r\n        public void run() {\r\n            while (notStart) {\r\n                Thread.yield();\r\n            }\r\n\r\n            while (notEnd) {\r\n                Thread.yield();\r\n                jobCount ++;\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n运行该实例，可以看到优先级1和10有明显的差距，说明优先级生效了。但是程序正确性不能依赖线程优先级的高低，因为有些操作系统会忽略Java设定的优先级。\r\n`\r\njob priority:1 count:195451\r\njob priority:1 count:195475\r\njob priority:1 count:195460\r\njob priority:1 count:195443\r\njob priority:1 count:195462\r\njob priority:10 count:3726352\r\njob priority:10 count:3729393\r\njob priority:10 count:3710086\r\njob priority:10 count:3733771\r\njob priority:10 count:3731136\r\n`\r\nDaemon线程\r\nDaemon线程是一种支持型线程，因为它主要被用作后台调度以及支持性工作。当一个Java虚拟机中不存在非Daemon线程时，Java虚拟机将会退出，此时Daemon线程都需要立即终止。\r\n通过调用Thread.setDaemon(true)将线程设置为Daemon线程。\r\n Daemon属性需要在启动线程之前设置才有效，不要依靠finally块中的内容来确保执行关闭或者清理资源。\r\n\r\n 线程使用\r\n启动线程\r\n启动线程之前要首先构造线程，在 Thread 的构造方法 public Thread(ThreadGroup group, Runnable target, String name, long stackSize) 中的参数是最多的。由此可以看到在构造线程时，我们可以定义线程所属的线程组、线程名等信息。\r\n线程对象初始化完成之后，调用其start()方法就能启动该线程。 * 启动线程前最好能为线程设置线程名称，因为在使用jstack分析程序或进行问题排查时，能够多一些启示*\r\n\r\n 线程中断\r\n线程中断可以理解为线程的一个标志位属性，它表示一个运行中的线程是否被其他线程进行了中断操作。线程中断是其他线程通过调用该线程的interrupt()方法来中断该线程。\r\n线程可以通过isInterrupt()方法来判断是否被中断，并通过调用静态方法Thread.interrupted() 对当前线程的中断标志位复位。若线程已经终止，isInterrupt() 始终会返回 false\r\n 对于那些阻塞方法(比如 wait() 和 sleep())而言，当另一个线程调用interrupt()中断该线程时，该线程会从阻塞状态退出并且抛出中断异常。这样，我们就可以捕捉到中断异常，并根据实际情况对该线程从阻塞方法中异常退出而进行一些处理。\r\n  比如说：线程A获得了锁进入了同步代码块中，但由于条件不足调用 wait() 方法阻塞了。这个时候，线程B执行 threadA.interrupt()请求中断线程A，此时线程A就会抛出InterruptedException，我们就可以在catch中捕获到这个异常并进行相应处理\r\n\r\n`java\r\ntry {\r\n    // 许多抛出 InterruptedException 的方法在抛出 InterruptedException 前，java虚拟机会先将该线程的中断标志位清楚\r\n    Thread.sleep(10 * 1000);\r\n} catch (InterruptedException e) {\r\n    e.printStackTrace();\r\n    Thread.currentThread().interrupt(); //这样处理比较好，会在抛出异常后，设置中断标志位。\r\n}\r\n`\r\n\r\n安全终止线程\r\n现在不建议使用 suspend(), resume() 和 stop() 方法控制线程。因为，suspend() 方法在调用后，线程不会释放已经占有的资源（锁等），这样容易引发死锁。stop() 在终结线程时，不保证线程的资源能够被正确释放。\r\n我们通过中断状态，或者一个布尔变量控制：\r\n`java\r\nclass Runner implements Runnable {\r\n    private long i;\r\n    private volatile boolean on = true;\r\n\r\n    @Override\r\n    public void run() {\r\n        while (on && !Thread.currentThread().isInterrupted()) {\r\n            i ++;\r\n        }\r\n        System.out.println(\"i=\" + i);\r\n    }\r\n\r\n    public void cancel () {\r\n        on = false;\r\n    }\r\n}\r\n`\r\n\r\n 线程间通信\r\n如果线程只是独立地运行，那么可以做的事很少。但是，多个线程能够相互配合完成的工作，才会有巨大的价值。\r\nvolatile 和 synchronized\r\njava 支持多个线程同时访问一个对象或者对象的成员变量，由于每个线程可以拥有这个变量的拷贝（可以提高线程运行的速度），所以线程看到的变量不一定是最新的。\r\n关键字 volatile 用来修饰成员变量，该变量的访问均需从共享内存中获取，而对它的改变必须同步刷新回共享内存，这样才能保证变量对所有线程的可见性。\r\n关键字 synchronized 用来修饰方法或者同步块。它用来确保多个线程在同一时刻，只有一个线程处于方法或同步块中，它保证了线程对变量访问的可见性和排他性。\r\n任意一个对象都有自己的监视器，当这个对象由同步块或者这个对象的同步方法调用时，执行方法的线程必须先获得到该对象的监视器才能进入同步块或者同步方法，而没有获取到监视器的线程将会被阻塞在同步块和同步方法的入口，进入 BLOCKED 状态。\r\n`java\r\npublic void syncTest() {\r\n    synchronized (String.class) {\r\n        // do something\r\n    }\r\n}\r\n`\r\n\r\n 等待 / 通知机制\r\n一个线程修改了一个对象的值，而另一个线程感知到变化，然后进行相应的操作，整个过程开始于一个线程，而最终执行的是另一个线程。前者是生产者，后者是消费者。这种模式隔离了“做什么”和“怎么做”，在功能层面实现了解耦。\r\n等待/通知的相关方法是任意Java对象都具备的，因为这些方法定义在 java.lang.Object 上：\r\n\r\n方法名称     |  描述 \r\n:-----------|:-------------\r\nnotify()    | 通知一个在对象上等待的线程，使其从wait()方法上返回，而返回的前提是该线程获得了锁\r\nnotifyAll() | 通知所有等待在该对象上的线程\r\nwait()      | 调用该方法的线程进入WAITING状态，只有等待另外线程的通知或中断才会返回。调用wait()方法后，会释放对象的锁\r\nwait(long)  | 超时等待一段时间，参数是毫秒，如果在这段时间内，没有通知就超时返回\r\nwait(long, int) | 对于超时时间更细粒度的控制，可以达到纳秒\r\n\r\n等待 / 通知 机制，是指一个线程A调用了对象O的 wait() 方法进入等待状态，而另一个线程B调用了O的 notify() 或者 notifyAll() 方法，线程A收到通知后从对象O的 wait() 方法返回，进而执行后续操作。上述两个线程通过对象O来完成交互，对象上的 wait() 和 notify/notifyAll() 的关系就如同开关信号，用来完成等待方和通知方的交互工作。\r\n\r\n使用 wait()、notify() 和 notifyAll() 需要注意如下细节：\r\n使用wait()、notify() 和 notifyAll() 时需要先对调用对象加锁 \r\n调用wait() 方法后，线程状态由RUNNING变为WAITING，并当前线程放置到对象的等待队列\r\nnotify() 或 notifyAll() 调用后，等待线程依旧不会从wait() 返回，需要调用notify()  或 notifyAll() 的线程释放锁之后，等待线程才有机会从wait()返回\r\nnotify()将等待队列中的一个等待线程从等待队列中移动到同步队列中，而notifyAll()则是将等待队列中所有的线程全部移动到同步队列中，被移动的线程从WAITING变为BLOCKED\r\n从wait()方法返回的前提是线程获得了调用对象的锁。\r\n\r\n比较经典的用法是 生产者和消费者 模式：\r\n`java\r\n// 消费者\r\nsynchronized(object) {\r\n    while (condition) {\r\n        object.wait();\r\n    }\r\n}\r\n// 生产者\r\nsynchronized(object) {\r\n    condition = true;\r\n    object.notifyAll();\r\n}\r\n`\r\n\r\n管道输入 / 输出流\r\n管道输入/输出流用于线程之间的数据传输，其媒介是内存。在Java中的主要实现有： PipedOutputStream, PipedInputStream, PipedReader, PipedWriter，前两种面向字节，后两种面向字符。\r\n使用Piped类型的流，必须先进行绑定（调用 connect()）使用方式如下：\r\n`java\r\npublic static void main(String [] args) throws IOException {\r\n        PipedWriter out = new PipedWriter();\r\n        PipedReader in = new PipedReader();\r\n        // 连接输入和输出流，否则在使用时会抛出 IOException\r\n        out.connect(in);\r\n        Thread printThread = new Thread(new Print(in), \"PrintThread\");\r\n        printThread.start();\r\n        int receive;\r\n        while ((receive = System.in.read()) != -1) {\r\n            out .write(receive);\r\n        }\r\n        out.close();\r\n    }\r\n\r\n    static class Print implements Runnable {\r\n        private PipedReader in;\r\n        public Print(PipedReader in) {\r\n            this.in = in;\r\n        }\r\n        @Override\r\n        public void run() {\r\n            int receive;\r\n            try {\r\n                while ((receive = in.read()) != -1) {\r\n                    System.out.print((char) receive);\r\n                }\r\n                System.out.println();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n Thread.join()\r\n若一个线程A执行了thread.join()：当前线程A等待thread线程终止之后才从thread.join()返回。还有两个超时方法：join(long millis) 以及 join(long millis, int nanos)。\r\n若两个线程相互使用了非超时的join()方法，那么会死锁\r\n`java\r\nstatic class InnerJoin implements Runnable {\r\n    public Thread thread;\r\n    public static volatile int i;\r\n    public void run() {\r\n        while (i < 10) {\r\n            System.out.println( Thread.currentThread().getName() + \": \" + i);\r\n            i++;\r\n            try {\r\n                thread.join(100);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npublic static void main (String [] args) {\r\n    // 死锁\r\n    InnerJoin innerA = new InnerJoin();\r\n    InnerJoin innerB = new InnerJoin();\r\n    Thread threadA = new Thread(innerA, \"thread A\");\r\n    Thread threadB = new Thread(innerB, \"thread B\");\r\n    innerA.thread = threadB;\r\n    innerB.thread = threadA;\r\n    threadA.start();\r\n    threadB.start();\r\n}\r\n`\r\n\r\nThreadLocal\r\n线程变量（ThreadLocal)，是一个以ThreadLocal对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定到这个线程上的值。\r\n某一线程的ThreadLocal只能被该线程访问，一般情况下其他线程访问不到,其使用方式如下：\r\n`java\r\nprivate void testThreadLocal() {\r\n    Thread t = new Thread() {\r\n        ThreadLocalString mStringThreadLocal = new ThreadLocal() {\r\n            @Override\r\n            protected String initialValue() {\r\n              return Thread.currentThread().getName();\r\n            }\r\n        };\r\n\r\n        @Override\r\n        public void run() {\r\n            super.run();\r\n            mStringThreadLocal.set(\"droidyue.com\");\r\n            mStringThreadLocal.get();\r\n        }\r\n    };\r\n\r\n    t.start();\r\n}\r\n`\r\n\r\n 锁\r\nLock接口\r\n锁是用来控制多个线程访问共享资源的。锁能够防止多个线程同时访问共享资源，但是读写锁等可以允许多个线程并发访问共享资源。使用 synchronized 将会隐式地获取锁，但是它将锁的获取和释放固化了，必须先获取再释放。\r\nLock使用方式如下：\r\n`java\r\nLock lock = new ReentrantLock();\r\nlock.lock();\r\ntry {\r\n\r\n} finally {\r\n    lock.unlock();\r\n}\r\n`\r\n\r\nLock 接口具有不同于 synchronized 关键字不具备的特性：\r\n\r\n特性               |  描述\r\n:-----————————————|:----------------\r\n尝试非阻塞地获取锁   | 当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有锁\r\n能被中断地获取锁     | 与 synchronized 不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会抛出，同时锁会被释放\r\n超时获取锁          | 当指定的截止时间之前获取锁，如果截止时间仍无法获取锁，则返回\r\n\r\nLock 接口的 API 如下：\r\n`java\r\n\r\n\r\n`\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/post/java/_mysql",
        "content": "---\r\ntitle: mysql\r\ndraft: true\r\n---\r\n\r\n配置MySQL\r\n运行MySQL配置向导文件： $mysql-path/bin/MySQLInstanceConfig.exe\r\n修改MySQL的配置文件： $mysql-path/my.ini\r\n    修改编码方式：\r\n     `\r\n     [mysql] 客户端配置\r\n    default-character-set=utf8\r\n    [mysqld]  服务器端存储配置\r\n    character-set-server=utf8\r\n     `\r\n\r\n 启动/关闭MySQL\r\nlinux 启动 service mysql start，关闭服务 service mysql stop\r\nWindows 启动net start mysql， 关闭服务 net stop mysql\r\n\r\n登录MySQL\r\nMySQL登录参数\r\n\r\n参数                | 描述\r\n:------------------| :----------------\r\n-D --database=name | 打开指定的数据库\r\n--delimiter=name   | 指定分隔符\r\n-h, --host=name    | 服务器地址或域名\r\n-p, --password[=name] | 密码\r\n-P， --port=3306    | 端口号\r\n--prompt=name       | 设置提示符\r\n-u, --user=name    | 用户名\r\n-V, --version      | 输出版本信息\r\n\r\n`bash\r\n 使用 地址+端口号 登录\r\nmysql -p -P3306 -hlocalhost\r\n`\r\n\r\n退出MySQL ： exit;  或 quit; 或  \\q;\r\n\r\n修改MySQL的提示符：\r\n\r\n参数         | 说明\r\n:-----------| :----------\r\n\\h | 服务器的名称\r\n\\D | 完整的日期\r\n\\u | 当前用户\r\n\\d | 当前的数据库\r\n\r\n`bash\r\nmysql -uroot -p --prompt 提示符\r\n// 连接上客户端之后\r\nmysql prompt 提示符\r\n`\r\n\r\n\r\n\r\n创建数据库\r\n`sql\r\nCREATE {DATABASE | SCHEMA} [IF NOT EXISTS] dbname [DEFAULT] CHARACTER SET [=] charsetname\r\n`\r\n实例：\r\n`sql\r\nCREATE DATABASE test;\r\nCREATE DATABASE IF NOT EXISTS test1 CHARACTER SET gbk;\r\n`\r\n\r\n 修改数据库\r\n命令格式：\r\n`sql\r\nALTER {DATABASE | SCHEMA} [dbname] [DEFAULT] CHARACTER SET [=] charsetname;\r\n`\r\n示例：\r\n`sql\r\nALTER DATABASE test2 CHARACTER SET = utf8\r\n`\r\n\r\n删除数据库\r\n`sql\r\nDROP {DATABASE | SCHEMA} [IF EXISTS] db_name;\r\n`\r\n\r\n\r\n 创建表\r\n`sql\r\nCREATE TABLE [IF NOT EXISTS] table_name (\r\n    columnname datatype,\r\n    ...\r\n)\r\n`\r\n\r\n插入记录 INSERT\r\nAUTO_INCREMENT 是自动编号，且必须与主键组合使用，默认情况下，起始值为1，每次的增量为1\r\n\r\n\r\n`sql\r\nINSERT [INTO] taname [(colname, ...)] VALUES (val, ...) [, (s_val, ...)]\r\n-- 如果主键相同，则替换之\r\nREPLACE [INTO] taname [(colname, ...)] VALUES (val, ...) [(s_val, ...)]\r\n`\r\n\r\n 查找 SELECT\r\n简单的查找\r\n`sql\r\nSELECT expr, ...    FROM tb_name;\r\n`\r\n\r\n\r\n 约束\r\n约束是为了保证数据的完整性和一致性\r\n约束分为表级约束和列级约束\r\n约束有五种类型： 非空约束(NOT NULL)，主键约束(PRIMARY KEY)，唯一约束(UNIQUE KEY)，默认约束(DEFAULT), 外键约束(FOREIGN KEY)\r\n\r\nMySQL主键约束 (PRIMARY KEY)\r\n主键（PRIMARY KEY）约束：\r\n每张数据表只能存在一个主键\r\n主键保证记录的唯一性\r\n主键自动为NOT NULL\r\n\r\n 唯一约束 (UNIQUE KEY)\r\n唯一约束可以保证记录的唯一性\r\n唯一约束的字段可以为空值 (NULL)\r\n每个数据表可以存在多个唯一约束\r\n\r\n默认约束 (DEFAULT)\r\n当插入记录时，如果没有为字段赋值，则自动赋予默认的值\r\n\r\n`sql\r\nCREATE TABLE tb_name (\r\n    id smallint unsigned auto_increment primary key,\r\n    username varchar(20) unique key,\r\n    sex enum('1','2','3') default '3'\r\n);\r\n`\r\n\r\n 外键约束\r\n外键列有如下要求：\r\n父表与子表必须使用相同的存储引擎，而且禁止使用临时表\r\n数据表的存储引擎只能用 InnoDB\r\n外键列和参考列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同；字符串的长度可以不同\r\n外键列和参考列必须创建索引。如果外键列不存在索引，MySQL将会自动创建索引。 \r\n\r\n外键语法： FOREIGN KEY (columnchild) REPERENCES tb (columnparent)， 其中 tb 是父表\r\n\r\n外键约束的参照操作：\r\nCASCADE: 从父表删除或更新且自动删除或更新子表中匹配的行\r\nSET NULL: 从父表删除或更新行，并设置子表中的外键列为NULL。使用该选项，必须保证子表列没有指定NOT NULL\r\nRESTRICT: 拒绝对父表的删除或更新操作\r\nNO ACTION: 在MySQL中同RESTRICT相同\r\n\r\n`sql\r\nCREATE TABLE tb_name (\r\n    id smallint unsigned auto_increment primary key,\r\n    username varchar(20) unique key,\r\n    sex enum('1','2','3') default '3',\r\n    pid varchar(20) not null,\r\n    foreign key (pid) references tb (id) on delete cascade\r\n);\r\n`\r\n\r\n列级约束和列级约束\r\n对一个数据列建立的约束，称为列级约束\r\n对多个数据列建立的约束，称为表级约束\r\n列级约束既可以在列定义时声明，也可以在列定义后声明；表级约束只能在列定义后声明",
        "tags": []
    },
    {
        "uri": "/post/java/_webservice",
        "content": "---\r\ntitle: webservice\r\ndraft: true\r\n---\r\n\r\nWeb Service\r\nWebService 是一个应用程序，它向外暴露出一个能够通过Web调用的API。能够通过编程的方式通过Web调用来实现某个功能的应用程序。",
        "tags": []
    },
    {
        "uri": "/post/java/ConcurrentHashMap",
        "content": "---\r\ntitle: HashMap 和 ConcurrentHashMap\r\ndate: 2017-06-17 19:48:32\r\ntags: [\"算法\"]\r\ncategories: [\"算法\"]\r\n---\r\n\r\n并发编程为什么使用ConcurrentHashMap\r\nHashMap并不是线程安全的，HashTable虽然是线程安全的，但是HashTable的效率非常低下。\r\n\r\n HashMap不是线程安全的\r\n在多线程环境下，使用HashMap的put()会导致程序进入死循环，是因为多线程会导致HashMap的冲突链表形成环形数据。一旦新城环形数据结构，Node的next永远不为空，导致死循环。\r\n!-- more --\r\nHashTable效率低下\r\n以下是HashTable的put()和get()方法的源码。可以看到我们经常用到的put()和get()方法的同步是对象的同步。在线程竞争激烈的情况下，当一个线程访问HashTable的同步方法时，其他访问同步方法的线程只能进入阻塞或轮询状态。因此，HashTable在多线程下的效率非常低，连读写锁都没有采用。\r\n`\r\npublic synchronized V put(K key, V value) {\r\n    // Make sure the value is not null\r\n    if (value == null) {\r\n        throw new NullPointerException();\r\n    }\r\n\t...\r\n    addEntry(hash, key, value, index);\r\n    return null;\r\n}\r\n\r\npublic synchronized V get(Object key) {\r\n    Entry?,? tab[] = table;\r\n    int hash = key.hashCode();\r\n    ...\r\n    return null;\r\n}\r\n`\r\n ConcurrentHashMap的锁分段技术\r\n锁分段技术就是容器中使用多把锁，每个锁用于容器中的部分数据。这样当多个线程并发访问不同数据段的数据时，线程就不会竞争锁，提高并发访问效率。\r\n在ConcurrentHashMap的put()方法中，对于向非空桶中加入数据时，才使用同步锁。\r\n`\r\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\r\n    if (key == null || value == null) throw new NullPointerException();\r\n    int hash = spread(key.hashCode());\r\n    int binCount = 0;\r\n    for (NodeK,V[] tab = table;;) {\r\n        NodeK,V f; int n, i, fh;\r\n        if (tab == null || (n = tab.length) == 0)\r\n            tab = initTable();\r\n        // 定位的桶中没有元素，不需要同步\r\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\r\n            if (casTabAt(tab, i, null,\r\n                         new NodeK,V(hash, key, value, null)))\r\n                break;                   // no lock when adding to empty bin\r\n        }\r\n        else if ((fh = f.hash) == MOVED)\r\n            tab = helpTransfer(tab, f);\r\n        else {\r\n            V oldVal = null;\r\n            synchronized (f) {\r\n                if (tabAt(tab, i) == f) {\r\n                    if (fh = 0) {\r\n                        binCount = 1;\r\n                        for (NodeK,V e = f;; ++binCount) {\r\n                            K ek;\r\n                            if (e.hash == hash &&\r\n                                ((ek = e.key) == key ||\r\n                                 (ek != null && key.equals(ek)))) {\r\n                                oldVal = e.val;\r\n                                if (!onlyIfAbsent)\r\n                                    e.val = value;\r\n                                break;\r\n                            }\r\n                            NodeK,V pred = e;\r\n                            if ((e = e.next) == null) {\r\n                                pred.next = new NodeK,V(hash, key,\r\n                                                          value, null);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (f instanceof TreeBin) {\r\n                        NodeK,V p;\r\n                        binCount = 2;\r\n                        if ((p = ((TreeBinK,V)f).putTreeVal(hash, key,\r\n                                                       value)) != null) {\r\n                            oldVal = p.val;\r\n                            if (!onlyIfAbsent)\r\n                                p.val = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (binCount != 0) {\r\n                if (binCount = TREEIFY_THRESHOLD)\r\n                    treeifyBin(tab, i);\r\n                if (oldVal != null)\r\n                    return oldVal;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    addCount(1L, binCount);\r\n    return null;\r\n}\r\n`\r\n而ConcurrentHashMap的get()方法是没有锁的。这是因为get()方法中使用的共享变量都定义成volatile类型，而volatile类型的变量能够在多线程之间保持可见性，能够保证多个线程读取的时候不会读到过期的值。",
        "tags": []
    },
    {
        "uri": "/post/java/java 文件处理",
        "content": "---\r\ntitle: java 文件处理\r\ndate: 2017-06-30 11:41:43\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\ntop: 1\r\n---\r\nPath\r\nPath 是java7中java.nio.file包中的类，它是一个抽象构造。创建和处理Path不会马上绑定到对应的物理位置，如果试图读取一个未创建的文件会抛出IOException.\r\n\r\n使用 Paths.get(String filePath, String more ... ) 来创建一个 Path。\r\n\r\n可以通过resolve方法来合并两个Path: \r\n`java\r\n// 最终是文件是 /usr/local/xml.conf \r\nPaths.get(\"/usr\").resolve(\"local/xml.conf\")\r\n`\r\n\r\n还可以通过startsWith(Path prefix), equals(Path path) 和 endsWith(Path suffix) 来比较路径\r\n\r\n还可以在Path和File之间进行转换: file.toPath(), path.toFile()\r\n\r\n 遍历目录\r\n可以通过Files.walkFileTree(Path start, FileVisitor? super Path visitor) 来遍历目录树，其中实现FileVisitor接口，需要实现如下几个方法：\r\n`java\r\n// 在进入一个目录之前被调用\r\nFileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs)\r\n// 处理当前文件\r\nFileVisitResult visitFile(T file, BasicFileAttributes attrs) throws IOException\r\n// 访问文件失败时被调动，文件属性不能读取、目录不能被打开等等\r\nFileVisitResult visitFileFailed(T file, IOException exc) throws IOException\r\n// 访问完目录时被调用\r\nFileVisitResult postVisitDirectory(T dir, IOException exc)\r\n`\r\n可以如下使用\r\n`java\r\npublic static class HandleFile implements FileVisitorPath {\r\n    @Override\r\n    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\r\n        System.out.println(\"preVisitDirectory: \" + dir.toString());\r\n        return FileVisitResult.CONTINUE;\r\n    }\r\n\r\n    @Override\r\n    public FileVisitResult visitFile(Path path, BasicFileAttributes attrs)\r\n            throws IOException {\r\n        System.out.println(\"visitFile: \" +path.getFileName());\r\n        return FileVisitResult.CONTINUE;\r\n    }\r\n\r\n    @Override\r\n    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\r\n        System.out.println(\"visitFile: \" + file.getFileName());\r\n        return  FileVisitResult.CONTINUE;\r\n    }\r\n\r\n    @Override\r\n    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\r\n        System.out.println(\"postVisitDirectory: \" + dir.getFileName());\r\n\r\n        return  FileVisitResult.CONTINUE;\r\n    }\r\n    public static void main(String[] args) throws IOException {\r\n        Path startingDir = Paths.get(\"E:\\\\golang\");\r\n        Files.walkFileTree(startingDir, new HandleFile());\r\n    }\r\n}\r\n`\r\n执行上述程序产生结果为：\r\n`\r\npreVisitDirectory: E:\\golang\r\npreVisitDirectory: E:\\golang\\pkg\r\npostVisitDirectory: pkg\r\npreVisitDirectory: E:\\golang\\src\r\nvisitFile: test.go\r\npostVisitDirectory: src\r\npostVisitDirectory: golang\r\n`\r\n\r\n 注意： 路径中如果有中文，可能会有问题\r\n \r\njava中提供了实现FileVisitor的接口的类SimpleFileVisitor，可以按需覆盖默认方法，简化编写代码。\r\n\r\n文件的创建和删除\r\n可以调用Files工具类的createFile(Path path, FileAttribute?... attrs)方法来创建文件，还可以通过FileAttribute来指定文件属性。\r\n`java\r\nPath path = Paths.get(\"D://test.txt\");\r\nSetPosixFilePermission perms = PosixFilePermissions.fromString(\"rwxrw-r--\");\r\nFileAttributeSet<PosixFilePermission attrs = PosixFilePermissions.asFileAttribute(perms);\r\nFiles.createFile(path, attrs);\r\n`\r\n\r\n文件的删除就比较简单了：\r\n`java\r\nPath path = Paths.get(\"D://test.txt\");\r\nFiles.delete(path);\r\n`\r\n\r\n 文件的复制和移动\r\n借助Files工具类可以很简单地完成文件的复制和移动\r\n`java\r\n// 将一个流拷贝到文件中\r\nFiles.copy(InputStream in, Path target, CopyOption... options) throws IOException\r\n// 例子\r\nURI u = URI.create(\"http://java.sun.com/\");\r\ntry (InputStream in = u.toURL().openStream()) {\r\n   Files.copy(in, Paths.get(\"D:/test\"), StandardCopyOption.REPLACE_EXISTING);\r\n}\r\n// 将一个输入流拷贝到输出流中\r\nFiles.copy(InputStream source, OutputStream sink) throws IOException\r\n// 将文件拷贝到输出流中\r\nFiles.copy(Path source, OutputStream out) throws IOException\r\n// 将文件从一个路径拷贝到另一个路径\r\nFiles.copy(Path source, Path target, CopyOption... options) throws IOException\r\n`\r\n\r\n可以通过Files.move(Path source, Path taget, CopyOption... options) 来移动文件：\r\n`java\r\nFiles.move(Path.get(\"source\"), Path.get(\"target\"), StandardCopyOption.REPLACEEXISTING, StandardCopyOption.COPYATTRIBUTES);\r\n`\r\n\r\n快速读写数据\r\n可以通过Files工具类中的newBufferedReader(Path path, Charset cs) throws IOException 将一个文件快速读入到BufferedReader实例中:\r\n`java\r\nPath path = Paths.get(\"D://test.txt\");\r\ntry (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        System.out.println(line);\r\n    }\r\n}\r\n`\r\n\r\nFiles工具类中的BufferedWriter newBufferedWriter(Path path, Charset cs, OpenOption... options) 来快速获取BufferedWriter.\r\n\r\n还有一些简化的读取和写入，不过对于大文件的处理并不适用：\r\n`java\r\nListString lines = Files.readAllLines(path, StandardCharsets.UTF_8);\r\nbyte[] bytes = Files.readAllBytes(path);\r\n`\r\n\r\n 监控文件变化\r\njava7中可以用java.nio.file.WatchService类检测文件或者目录的变化，并在文件发生变化时触发相应的方法\r\n`java\r\ntry {\r\n    WatchService watcher = FileSystems.getDefault().newWatchService();\r\n    Path path = Paths.get(\"D:/test\");\r\n    WatchKey key = path.register(watcher, StandardWatchEventKinds.ENTRY_MODIFY);\r\n    while (!isShutdown) {\r\n        key = watcher.take();\r\n        key.pollEvents().stream()\r\n                .filter(event - event.kind() == StandardWatchEventKinds.ENTRY_MODIFY)\r\n                .forEach(event - System.out.println(path.toAbsolutePath().toString() + \" has been modified\"));\r\n    }\r\n} catch (InterruptedException e) {\r\n    e.printStackTrace();\r\n}\r\n`",
        "tags": []
    },
    {
        "uri": "/post/java/java 泛型",
        "content": "---\r\ntitle: java 泛型\r\ndate: 2017-09-17 19:42:25\r\ntag: [\"java\"]\r\ncategories: ['java']\r\n---\r\n\r\n在java中使用泛型，可以避免使用Object或者强制类型转换。泛型最适用于集合类，比如List。\r\n使用泛型编写代码增加了其可复用性，可以被许多不同类型的对象使用。举例来说，不想对String和File的集合分别编程，可以使用ArrayList来处理各种类型的集合。\r\n\r\n使用泛型编程有三种技术层次：\r\n只知道如何使用泛型，而不知道它们为什么可以这么使用；\r\n当在使用泛型的过程中，遇到一些不能解决的问题，就需要了解泛型的具体使用法则；\r\n可以自己实现泛型和其方法。\r\n\r\n只有那些涉及到很多类型的通用代码，才适合用泛型来处理。\r\n\r\n定义泛型类\r\n泛型类是含有一个或多个类型变量（如下例中T）的类。\r\n`java\r\npublic class PairT {\r\n    private T first;\r\n    private T second;\r\n\r\n    public Pair(T first, T second) {\r\n        this.first = first;\r\n        this.second = second;\r\n    }\r\n\r\n    public T getFirst () {return this.first;}\r\n    public T getSecond () {return this.second;}\r\n    public void setFirst(T newValue) { first = newValue; }\r\n    public void setSecond(T newValue) { second = newValue; }\r\n}\r\n`\r\n当然了，我们可以定义多个类型变量，像 PairT,U。\r\n\r\n 定义泛型方法\r\n可以在方法上中使用类型参数，该方法即可以在泛型类中定义，也可以在普通类中定义。其中T是在修饰符(public static)后，在返回类型前。\r\n`java\r\nclass ArrayAlg {\r\n    public static T T getMiddle(T... a) {\r\n        return a[a.length/2];\r\n    }\r\n}\r\n`\r\n下面的方式避免了返回结果是 Object：\r\n`java\r\npublic static T T convertXmlStrToObject(ClassT clazz, String xmlStr) {\r\n    // do something\r\n}\r\n`\r\n\r\n该方法可以用如下方式调用：\r\n`java\r\nString middle = ArrayAlg.StringgetMiddle(\"1\", \"2\", \"4\");\r\n// 因为编译器可以根据参数类型推断出 T 的类型，所以类型参数可以省略\r\nString middle2 = ArrayAlg.getMiddle(\"1\", \"2\", \"4\");\r\n`\r\n\r\n像上述调用，依靠编译器推断类型时，尽量使用同一类型。 像Number middle = GenericMethod.getMiddle(3.14, 1729, 0); 这种调用，编译器会将参数自动装箱成(Double, Integer, Integer), 然后找到这些类型所共有的父类——Number或Comparable。 所以可以将结果赋给 Number 或者 Comparable. 否则会报错：\r\n `\r\n  Error:(10, 56) java: 不兼容的类型: 推断类型不符合上限\r\n    推断: java.lang.Number&java.lang.Comparable? extends java.lang.Number&java.lang.Comparable<?\r\n    上限: java.lang.Double,java.lang.Object\r\n  `\r\n\r\n类型变量的界限\r\n当我们想要寻找数组中最小值时，就需要泛型变量是继承了Comparable的，这时候就可以使用如下方法对类型变量进行类型限制。\r\n`java\r\npublic static T extends Comparable T min (T[] a) {\r\n    if (a == null || a.length == 0) return null;\r\n    T smallest = a[0];\r\n    for (int i=1; i<a.length; i++) {\r\n        if (smallest.compareTo(a[i])  0) smallest = a[i];\r\n    }\r\n    return smallest;\r\n}\r\n`\r\n虽然extends一般用在类上，而不是接口。但是类型变量界限使用的是关键字extends，只是因为它更适合表达子类型概念，这样就不用新增一个关键字来表示类型变量界限。\r\n当类型变量有多个界定，用&分割： T extends Comparable & Serializable。 类似java中的继承，可以有任意多个接口限定，但是只能有一个类限定。如果有类限定，那么这个类限定的位置必须是界限列表的第一个。\r\n\r\n 泛型代码和java虚拟机\r\n在java虚拟机中并没有泛型类型，所有的对象都是普通的类。编译器会对泛型类或方法进行类型擦除。\r\n\r\n类型擦除\r\n当定义一个泛型后，对应的原始类型会被虚拟机自动创建。原始类型的类名同其对应的泛型的类型是一致的，只是将类型参数移除，并且用它们的限定类型代替类型参数。\r\n`java\r\npublic class IntervalT extends Comparable & Serializable, U implements Serializable {\r\n    private T lower;\r\n    private T upper;\r\n    private U other;\r\n    public Interval(T first, U second) {\r\n        if (first.compareTo(second) <= 0) { lower = first; upper = second; }\r\n        else { lower = second; upper = first; }\r\n    }\r\n}\r\n`\r\n上列中，类型擦除后，T 使用其第一个限定界限Comparable代替；U因为没有限定，所以用Object代替。类型擦除之后的代码如下：\r\n`java\r\npublic class Interval implements Serializable {\r\n    private Comparable lower;\r\n    private Comparable upper;\r\n    private Object other;\r\n    public Interval(Comparable first, Obejct second) {\r\n        // do something\r\n    }\r\n}\r\n`\r\n\r\n 泛型表达式的擦除TY\r\n当调用一个泛型方法时，编译器会在返回类型擦除之后，插入类型转换的代码。\r\n`java\r\nPairEmployee pairs = new Pair();\r\nEmployee pair = pairs.getFirst();\r\n`\r\ngetFirst()方法返回的类型经过类型擦除之后是 Object，编译器自动插入了Employee的类型转换： Employee pair = (Employee)pairs.getFirst().\r\n当然了，对于直接访问泛型属性，编译器的处理也是相似的。\r\n\r\n泛型方法的擦除\r\n泛型方法的擦除方式同泛型类类似。 public static T extends Comparable T min (T[] a)方法擦除后是 public static Comparable T min(Comparable[] a).\r\n但是，当我们在继承泛型类时，只是擦除类型，泛型方法会有问题。例如下面的例子\r\n`java\r\nclass DateInterval extends PairLocalDate {\r\n    public void setSecond(LocalDate second) {\r\n        // do something\r\n    }\r\n}\r\n`\r\n上述类执行类型擦除之后，如下：\r\n`java\r\nclass DateInterval extends Pair { // after erasure \r\n    public void setSecond(LocalDate second) {\r\n        // do something\r\n    }\r\n}\r\n`\r\n如果泛型类PairLocalDate中，恰好有一个方法，类型擦除后是 public void setSecond(Object second)。显然，这两个方法因为参数签名不一致，是两个不同的方法。但是，这两个方式不应该不是一个方法。\r\n`java\r\nPairLocalDate pair = new DateInterval(. . .);; // OK--assignment to superclass\r\npair.setSecond(aDate);\r\n`\r\n上述方法中，我们想要调用的是DateInterval中的setSecond(LocalDate second)。但是，类型擦除后，调用的应该会是setSecond(Object second)。为了修正这个问题，编译器会为DateInterval生成一个桥接(bridge method)方法： public void setSecond(Object second) { setSecond((Date) second); }\r\n\r\n概括来说，Java中泛型的类型擦除会遵循以下原则：\r\n虚拟机中并没有泛型类，只有普通类\r\n所有的类型参数都会被其界限替代\r\n合成桥接方法以保持多态\r\n需要的时候，会插入类型转换\r\n\r\n 使用泛型的限制\r\n大多数的限制是类型擦除导致的。\r\n\r\n类型参数不能是原始类型\r\n不能将原始类型作为参数类型，只能有PairDouble，而不能用Pairdouble。因为类型擦除之后，Pair类是Object类型的属性，不能用来存储double的值。\r\n\r\n 运行时类型查询仅适用于原始类型\r\n类型查询仅适用于原始类型，如a instanceof PairString是错误的，只能判断a是否是Pair的实例，而不能判断a是否是PairString类型的。\r\n`java\r\nPairString stringPair = ...;\r\nPairEmpolyee employeePair = ...;\r\nstringPair.getClass() == employeePair.getClass() // true, 他们是相等的，getClass都会返回 Pair.class\r\n`\r\n\r\n不能创建泛型类型的数组\r\n不能实例化泛型类型的数组，PairString[] table = new PairString[10]; 是错误的。\r\n当上述代码执行类型擦除之后，table的类型是Pair[]，我们可以将它转换成Object[]。\r\n但是，数组会记住其元素的类型，如果存储一个错误类型的元素，会抛出一个ArraySotreException异常。 如objectArr[0]=\"hello\";\r\n只有数组的创建是不合法的，我们还是可以声明PairString[] 类型的数组，但是不能用new PairString[10]来将其初始化。\r\n 可以声明通配符类型数组，然后将其转换成对应的类型\r\n `java\r\n PairString[] table = (PairString[]) new Pair?[10];\r\n `\r\n 但是这种方式是不安全的，如果想调用Pair中的方法，会抛出ClassCastException.\r\n 如果想用泛型的数组，可以使用ArrayList，它是安全并且有效的。\r\n\r\n 可使用可变参方法\r\nJava不支持泛型数组的初始化，但是可以使用可变参数作为方法的参数。代码可以正常运行，但是会有警告。\r\n`java\r\n@SafeVarargs\r\npublic static T void addAll(T... ts) {\r\n    for (t: ts) {\r\n        this.add(t);\r\n    }\r\n}\r\n`\r\n\r\n不能实例化泛型变量\r\n不能用new T()方法创建实例。这是因为类型擦除会将T变成Object。显然new Object()并不是我们想要的结果。\r\n我们可以通过其他的方式来创建泛型实例：\r\n`java\r\npublic static T PairT makePair(ClassT cl){\r\n    try { return new Pair(cl.newInstance(), cl.newInstance()); }\r\n    catch (Exception ex) { return null; }\r\n}\r\n// 调用方式如下：\r\nPairString p = Pair.makePair(String.class);\r\n`\r\n\r\n 泛型类的静态变量或方法中不能使用类型变量\r\n我们不能在泛型类中的静态变量或者方法使用类型变量，下面的方式是错误的：\r\n`java\r\npublic class SingletonT {\r\n    private static T singleInstance; // Error\r\n    public static T getSingleInstance() { // Error\r\n  \r\n    if (singleInstance == null) construct new instance of T\r\n    return singleInstance;\r\n    }\r\n}\r\n`\r\n如果这样的方式是可以的，那么我们可以定义一个SingletonRandom来共享一个随机数生成器，SingletonFile来共享一个文件处理器。但这肯定是不可能的，类型擦除之后，只有一个Singleton类和一个singleInstance属性。\r\n\r\n不能抛出或者捕获泛型类的实例\r\n定义一个继承Throwable的泛型类是不合法的：\r\n`java\r\npublic class GenericExceptionT extends Exception {} // Error\r\n`\r\n但是我们可以用在异常处理中使用泛型：\r\n`java\r\npublic static T extends Throwable void doWork(T t) throws T  {// OK\r\n    try {\r\n        // do work\r\n    } catch (Throwable realCause) {\r\n        t.initCause(realCause);\r\n        throw t;\r\n    }\r\n}\r\n`\r\n\r\n 注意类型擦除后方法相同签名\r\n泛型类型被擦除之后，可能会导致方法签名一直。如果Pair类中添加eqauls方法：\r\n`java\r\npublic class PairT {\r\n    public boolean equals(T value) {\r\n        return first.equals(value) && second.equals(value);\r\n    }\r\n    ...\r\n}\r\n`\r\n当PairT类型擦除之后，其equals方法变为 boolean equals(Object o) 同Object中的equals方法一直。\r\n解决方法是命名成其他名字。\r\n为了防止擦除带来的方法冲突，我们强加了一个限制。即类或类型变量不能同时是同一个接口的不同参数化的两种子类型。\r\n`java\r\nclass Employee implements ComparableEmployee { . . . }\r\nclass Manager extends Employee implements ComparableManager{ . . . } // Error\r\n`\r\n上例子中，Manager 需要实现ComparableManager和ComparableEmployee，这两个接口就是同一接口的两个不同参数化的接口。\r\n虽然类型擦除之后，看起来是合法的：\r\n`java\r\nclass Employee implements Comparable { . . . }\r\nclass Manager extends Employee implements Comparable { . . . }\r\n`\r\n但是桥接方法是冲突的，实现ComparableX接口的类，会有一个桥接方法：\r\n`java\r\npublic int comparTo(Object other) {return compareTo((X) other);}\r\n`\r\n\r\n泛型类中的继承规则\r\n在使用泛型类型的时候，需要了解一些继承的规则。如果有两个类： Employee和Manager，Manager是Employee子类。PairManager也是PairEmployee的子类么？\r\n实际上，在PairS和PairT之间没有任何的关系，不管S和T是什么关系。\r\n\r\n 通配符类型\r\n通配符类型是指可以有不同的类型参数。通配符类型使用方式为Pair? extends Employee，它表示类型参数是Employee的子类的任何通用Pair类型，比如： PairManager。\r\n我们可以把PairManager看做是Pair? extends Employee 的子类。因此，我们可以把PairManager的实例传入下面的方法中：\r\n`java\r\npublic static void print(Pair? extends Employee p) {\r\n    // do something\r\n}\r\n`\r\n\r\n通配符类型的上界限\r\n通配符的界限同类型变量的界限相似，不过通配符界限可以指定一个下限： ? super Manager。该通配符表示所有Manager的父类。\r\n含有父类界限的通配符与上述的通配符类型正好相反。我们可以为方法提供参数，但是不能使用其返回值。比如Pair? super Manager的方法可以表述如下：\r\n`java\r\nvoid setFirst(? super Manager);\r\n? super Manager getFirst();\r\n`\r\n编译器不能知道setFirst参数准确的类型，因此不能接受具有Employee或Object类型的参数调用。该方法只能传递Manager或者其子类型的对象。对于调用getFirst将会返回一个Object对象，因为我们不知道它的返回类型是什么。\r\n`java\r\npublic static void minmaxBonus(Manager [] a, Pair? super Manager result) {\r\n    if (a.length == 0) return ;\r\n    Manager min = a[0];\r\n    Manager max = a[0];\r\n    for (int i=1; i<a.length; i++) {\r\n        if (min.getBonus()  a[i].getBonus()) min = a[i];\r\n        if (max.getBonus() < a[i].getBonus()) max = a[i];\r\n    }\r\n    result.setFirst(min);\r\n    result.setSecond(max);\r\n}\r\n`\r\n其类图如下所示：\r\n\r\n img src=\"https://yuml.me/diagram/nofunky/class/%5BPair(raw)%5D%5E-%5BPair%3C%3F%3E%5D%2C%5BPair%3C%3F%3E%5D%5E-%5BPair%3C%3F%20super%20Manager%3E%5D%2C%5BPair%3C%3F%20super%20Manager%3E%5D%5E-%5BPair%3CEmployee%3E%5D%2C%5BPair%3C%3F%20super%20Manager%3E%5D%5E-%5BPair%3CObject%3E%5D\" \r\n\r\n 一般来说，父类界定的通配符类型可以set对象，而子类型界定的通配符类型可以让你get对象\r\n\r\n Comparable接口本身就是一个泛型：\r\n`java\r\npublic interface ComparableT {\r\n    public int compareTo(T other);\r\n}\r\n`\r\n使用T extends Comparable方式，经过类型擦除后是：\r\n`java\r\npublic interface Comparable {\r\n    public int compareTo(Object other);\r\n}\r\n`\r\n所以，对于ArrayAlg类中的min方法，我们可以将其定义为：\r\n`java\r\npublic static T extends Comparable<T T min(T[] a)\r\n`\r\n这样比T extends Comparable更为全面，而且对于大多数类来说都能很好的工作。但是对于LocalDate对象来说，并不适用。LocalDate实现了ChronoLocalDate接口，ChronoLocalDate接口继承了ComparableChronoLocalDate，因此LocalDate实现了ComparableChronoLocalDate而不是ComparableLocalDate。\r\n在这种情况下，使用下面的方法更适用：\r\n`java\r\npublic static T extends Comparable<? super T T min(T[] a) {}\r\n`\r\n这样经过类型擦除之后：\r\n`java\r\npublic int compareTo(LocalDate other);\r\n`\r\n\r\n虽然这样看起来很繁琐，但是这样声明能够消除调用方法时对参数的不必要限制。\r\n\r\n 无界限通配符\r\n无界限通配符，如Pair?。无界限通配符与原始类型Pair一样。但是，这两个类型是不同的，Pair?的方法如下：\r\n`java\r\n? getFirst();\r\nvoid setFirst(?);\r\n`\r\ngetFirst方法的返回值只能是Object，而setFirst方法不能被调用，即使是Object作为参数也不行，当然null是可以的。这是Pair?与原始的Pair类型的不同。\r\n\r\n无界限通配符一般会用来做非常简单的操作，例如，判断值是不是null:\r\n`java\r\npublic static boolean hasNulls(Pair? p) {\r\n    return p.getFirst() == null || p.getSecond() == null;\r\n}\r\n`\r\n\r\n通配符捕获\r\n我们有一个交换Pair元素的方法：\r\n`java\r\npublic static void swap(Pair? p)\r\n`\r\n通配符不是一个类型变量，我们不能用?作为一个类型，也就是下面的代码是不合法的：\r\n`java\r\n? t = p.getFirst(); // Error\r\np.setFirst(p.getSecond());\r\np.setSecond(t);\r\n`\r\n我们在交换元素时，必须要将其中一个元素保存成临时变量。为了解决这个问题，我们可以编写一个辅助方法swapHelper:\r\n`java\r\npublic static T void swapHelper (PairT p) {\r\n    T t = p.getFirst();\r\n    p.setFirst(p.getSecond());\r\n    p.setSecond(t);\r\n}\r\n`\r\n\r\nswapHelper是一个泛型方法，而swap不是，现在我们可以在swap中调用swapHelper:\r\n`java\r\npublic static void swap(Pair? p) { swapHelper(p);}\r\n`\r\n\r\n在上述方法中，swapHelper中的T捕获了swap中的通配符类型。编译器不知道通配符是什么类型，但它是一种确定的类型，当T表示该类型时，T swapHelper的定义是完美的。\r\n当然，在这个例子中，我们没有必要使用Pair?，可以直接定义T void swapHelper。但是，如果某个方法中像如下定义：\r\n`java\r\npublic static void maxmin(Manager[] a, Pair? super Manager result) {\r\n    PairAlg.swap(result); // swapHepler 捕获了通配符类型\r\n} \r\n`\r\n\r\n下边的例子给了前边所描述的内容：\r\n`java\r\n\r\npublic class GenericMethod {\r\n    public static void main(String[] args) {\r\n        Manager ceo = new Manager(\"Gus Greedy\", 800000, 2003, 12, 15);\r\n        Manager cfo = new Manager(\"Sid Sneaky\", 600000, 2003, 12, 15);\r\n        PairManager buddies = new Pair(ceo, cfo);\r\n        printBuddies(buddies);\r\n\r\n        ceo.setBonus(1000000);\r\n        cfo.setBonus(500000);\r\n        Manager[] managers = {ceo, cfo};\r\n\r\n        PairEmployee result = new Pair();\r\n        minmaxBonus(managers, result);\r\n        System.out.println(\"first: \" + result.getFirst().getName()\r\n            \", second: \" + result.getSecond().getName());\r\n        maxminBonus(managers, result);\r\n        System.out.println(\"first: \" + result.getFirst().getName()\r\n            \", second: \" + result.getSecond().getName());\r\n    }\r\n\r\n    public static void printBuddies(Pair? extends Employee p) {\r\n        Employee first = p.getFirst();\r\n        Employee second = p.getSecond();\r\n        System.out.println(first.getName() + \" and \" + second.getName() + \" are buddies.\");\r\n    }\r\n\r\n    public static void minmaxBonus(Manager[] a, Pair? super Manager result) {\r\n        if (a.length == 0) return;\r\n        Manager min = a[0];\r\n        Manager max = a[0];\r\n        (Continues)\r\n            .8 Wildcard Types 449\r\n        Listing 8.3 (Continued)\r\n        for (int i = 1; i < a.length; i++) {\r\n            if (min.getBonus()  a[i].getBonus()) min = a[i];\r\n            if (max.getBonus() < a[i].getBonus()) max = a[i];\r\n        }\r\n        result.setFirst(min);\r\n        result.setSecond(max);\r\n    }\r\n\r\n    public static void maxminBonus(Manager[] a, Pair? super Manager result) {\r\n        minmaxBonus(a, result);\r\n        PairAlg.swapHelper(result); // OK--swapHelper captures wildcard type\r\n    }\r\n}\r\n\r\nclass PairAlg {\r\n    public static boolean hasNulls(Pair? p) {\r\n        return p.getFirst() == null || p.getSecond() == null;\r\n    }\r\n\r\n    public static void swap(Pair? p) {\r\n        swapHelper(p);\r\n    }\r\n\r\n    public static T void swapHelper(PairT p) {\r\n        T t = p.getFirst();\r\n        p.setFirst(p.getSecond());\r\n        p.setSecond(t);\r\n    }\r\n}\r\n\r\n`",
        "tags": []
    },
    {
        "uri": "/post/java/java中override与overload的区别",
        "content": "---\r\ntitle: java中override与overload的区别\r\ndate: 2015-07-23 17:16:32\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\n---\r\n\r\noverride（重写，覆盖）\r\n\r\n方法名、参数、返回值相同。\r\n子类方法不能缩小父类方法的访问权限。\r\n子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。\r\n存在于父类和子类之间。\r\n方法被定义为final不能被重写。\r\n\r\noverload（重载，过载）\r\n参数类型、个数、顺序至少有一个不相同。\r\n不能重载只有返回值不同的方法名。\r\n存在于父类和子类、同类中。",
        "tags": []
    },
    {
        "uri": "/post/java/java中没有见过的用法",
        "content": "---\r\ntitle: \"java中没有见过的用法\"\r\ndate: 2017-07-20 17:16:32\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\n---\r\n\r\ninterface & interface\r\n在阅读Comparator源码时，无意间发现了如下这种用法：\r\n`java\r\npublic static T, U extends Comparable<? super U ComparatorT comparing(\r\n            Function? super T, ? extends U keyExtractor) {\r\n    Objects.requireNonNull(keyExtractor);\r\n    return (ComparatorT & Serializable)\r\n        (c1, c2) - keyExtractor.apply(c1).compareTo(keyExtractor.apply(c2));\r\n}\r\n`\r\n!-- more --\r\n在这个方法中有 (ComparatorT & Serializable) 这样的用法。经过调研，发现是类型转换的意思，返回的结果被转换成实现Comparator和Serializable两个接口的实例。\r\njava中做强制转换时，对于类，只能指定一个；对于接口，能够指定无数个。",
        "tags": []
    },
    {
        "uri": "/post/java/java中的先赋值再定义",
        "content": "---\r\ntitle: 'java中的先赋值再定义'\r\ndate: 2015-04-02 11:32:36\r\ntags: [\"java\", \"error\"]\r\ncategories: [\"java\", \"error\"]\r\n---\r\n\r\n如下代码\r\n`java\r\npublic class MyTest{\r\n    {\r\n        value = 3;\r\n        System.out.println(\"函数块\");\r\n    }\r\n    MyTest(){\r\n        System.out.println(\"构造函数\");\r\n        System.out.println(value);\r\n\r\n    }\r\n    public int getValue() {\r\n        return value;\r\n    }\r\n    int value = 0;\r\n}\r\n`\r\n如果value定义在下边，因为函数块是在构造函数之前运行的，也就是value还没有定义，就已经赋值了。\r\n实际应用中应该尽量避免该情况出现，最好把属性定义放在函数开始的位置。\r\n\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/post/java/java修改字符串编码",
        "content": "---\r\ntitle: java修改字符串编码\r\ndate: 2017-06-18 19:01:11\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\n---\r\n\r\n使用java处理接口返回数据时，经常会有编码转换的问题。\r\n一开始以为如果将gbk编码的数据转换为utf8的数据，那么应该使用gbk编码获取数据，再将数据进行utf8编码。\r\n`java\r\nnew String(\"中国\".getBytes(\"gbk\"), \"utf8\")\r\n`\r\n这样得出来的数据总是乱码。\r\n查看String的getBytes(String charsetName)源码\r\n!-- more --\r\n`java\r\n public byte[] getBytes(String charsetName)\r\n            throws UnsupportedEncodingException {\r\n        if (charsetName == null) throw new NullPointerException();\r\n        return StringCoding.encode(charsetName, value, 0, value.length);\r\n    }\r\n`\r\n发现该方法是获得使用所传参数编码的byte数组。\r\n因此正确的方式应该是：\r\n`java\r\nnew String(\"中国\".getBytes(\"utf8\"), \"utf8\")\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/post/java/Java线程池技术",
        "content": "---\r\ntitle: java线程池技术\r\ndate: 2017-07-03 19:01:11\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\n---\r\n\r\n服务器在处理客户端请求时，经常面对的是客户端的任务简单，单一。如果针对每个任务，都创建一个线程执行，那么对于成千上万的客户端任务，服务器会创建数以万计的线程。这会使得操作系统频繁地进行线程的上下文切换，增加系统负载，浪费系统资源。\r\n线程池技术很好地解决了这个问题，它预先创建了若干个线程。用这些线程处理客户端提交的任务，避免了频繁的线程创建和销毁的系统开销。\r\n\r\n下面是一个简单的线程池接口定义\r\n`java\r\npublic interface ThreadPoolJob extends Runnable {\r\n    // 执行一个Job，这个Job需要实现Runnable\r\n    void execute(Job job);\r\n    void shutdown();\r\n    void addWorkers(int num);\r\n    void removeWorkers(int num);\r\n    int getJobSize();\r\n}\r\n`\r\n!-- more --\r\n客户端可以通过execute来将任务提交到线程池。线程池提供了减少/增大工作线程以及关闭线程的方法。这里工作线程代表着一个重复执行Job的线程，每个有客户端提交的Job都将进入到一个工作队列中，等待工作线程处理。\r\n`java\r\npackage com.wang.chapter4.threadpool;\r\n\r\nimport java.util.*;\r\nimport java.util.concurrent.atomic.AtomicLong;\r\n\r\n/**\r\n Created by 王忠珂 on 2016/11/23.\r\n */\r\npublic class DefaultThreadPoolJob extends Runnable implements ThreadPoolJob {\r\n    // 线程最大限制数\r\n    private static int maxWorkerNumber = 10;\r\n    // 线程池默认的数量\r\n    private static int defaultWorkerNumbers = 5;\r\n    // 线程池最小数量\r\n    private static int minWorkerNumbers = 1;\r\n    // 工作列表\r\n    private final LinkedListJob jobs  = new LinkedListJob();\r\n    // 工作者列表\r\n    private final ListWorker workers = Collections.synchronizedList(new ArrayListWorker());\r\n    // 工作者线程的数量\r\n    private int workerNum = defaultWorkerNumbers;\r\n    // 线程编号\r\n    private AtomicLong threadNum = new AtomicLong();\r\n\r\n    public DefaultThreadPool() {\r\n        initializeWorkers(defaultWorkerNumbers);\r\n    }\r\n\r\n    public DefaultThreadPool(int num) {\r\n        workerNum = num  maxWorkerNumber ? maxWorkerNumber :\r\n                num < minWorkerNumbers ? minWorkerNumbers : num;\r\n        initializeWorkers(workerNum);\r\n    }\r\n\r\n    public DefaultThreadPool(int defaultWorkerNumber, int maxWorkerNumber, int minWorkerNumber) {\r\n        this.maxWorkerNumber = maxWorkerNumber;\r\n        this.minWorkerNumbers = minWorkerNumber;\r\n        workerNum = defaultWorkerNumber  maxWorkerNumber ? maxWorkerNumber :\r\n                defaultWorkerNumber < minWorkerNumbers ? minWorkerNumbers : defaultWorkerNumber;\r\n        initializeWorkers(workerNum);\r\n    }\r\n\r\n    @Override\r\n    public void execute(Job job) {\r\n        if (job != null) {\r\n            synchronized (jobs) {\r\n                jobs.addLast(job);\r\n                jobs.notify();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void shutdown() {\r\n        for (Worker worker: workers) {\r\n            worker.shutdown();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void addWorkers(int num) {\r\n        synchronized (jobs) {\r\n            if (num + this.workerNum  maxWorkerNumber) {\r\n                num = maxWorkerNumber - this.workerNum;\r\n            }\r\n            initializeWorkers(num);\r\n            this.workerNum += num;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void removeWorkers(int num) {\r\n        synchronized (jobs) {\r\n            if (num = this.workerNum) {\r\n                throw new IllegalArgumentException(\"beyond workNum\");\r\n            }\r\n            int count = 0;\r\n            while (count < num) {\r\n                Worker worker = workers.get(count);\r\n                if (workers.remove(worker)) {\r\n                    worker.shutdown();\r\n                    count ++;\r\n                }\r\n            }\r\n            this.workerNum -= count;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getJobSize() {\r\n        return jobs.size();\r\n    }\r\n\r\n    private void initializeWorkers (int num) {\r\n        for (int i=0; i<num; i++) {\r\n            Worker worker = new Worker();\r\n            workers.add(worker);\r\n            Thread thread = new Thread(worker, \"ThreadPool-Worker-\" + threadNum.incrementAndGet());\r\n            thread.start();\r\n        }\r\n    }\r\n\r\n    class Worker implements Runnable {\r\n        // 是否工作\r\n        private volatile boolean running = true;\r\n        public void run() {\r\n            while (running){\r\n                Job job = null;\r\n                synchronized (jobs) {\r\n                    while (jobs.isEmpty()) {\r\n                        try {\r\n                            jobs.wait();\r\n                        } catch (InterruptedException e) {\r\n                            Thread.currentThread().interrupt();\r\n                            return;\r\n                        }\r\n                    }\r\n                    // 取出一个Job\r\n                    job = jobs.removeFirst();\r\n                }\r\n                if (job != null) {\r\n                    try {\r\n                        job.run();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public void shutdown() {\r\n            running = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n`",
        "tags": []
    },
    {
        "uri": "/post/java/jvm调优",
        "content": "---\r\ntitle: jvm调优\r\ndate: 2017-09-21 12:00:00\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\n---\r\n\r\n在常见的线上问题中，如下问题比较常见：\r\n内存泄露\r\n某个进程CPU突然飙升\r\n线程死锁\r\n响应变慢\r\n\r\n如果遇到上述问题，我们可以基于监控工具来定位问题。java中常用的分析监控工具有： jps、jstat、jinfo、jmap、jhat、jstack\r\n\r\njps: JVM进程状况\r\njps用来查看进程的状况，语法如下：\r\n\r\n`bash\r\njps [options] [hostid]\r\n参数：\r\n-q: 不输出类名、jar名和传入main方法的参数\r\n-l: 输出main类或jar的全限名\r\n-m: 输出传入main方法的参数\r\n-v: 输出传入JVM的参数\r\n\r\n示例\r\njps -l\r\n    7605 sun.tools.jps.Jps\r\n    13598 com.caucho.server.resin.Resin\r\n`\r\n\r\n jstat: JVM 统计信息监控工具\r\njstat 是用于查看虚拟机各种运行状态的命令行工具，它可以显示本地或远程虚拟机中的类装载、内存、垃圾收集、jit编译等运行数据。其具体用法如下：\r\n\r\n`\r\njstat [generalOption|outputOptions vmid [interval[s|ms] [count]]]\r\ngeneralOption: 单个常用的命令行选项，如 -help, -options\r\noutputOptions: 一个或多个输出选项，由单个的statOption选项组成\r\n`\r\n\r\noption   | 用途  | 例子 \r\n:------  |:-----------------|:---------\r\nclass    | 用于查看类加载情况的统计 | jstat -class pid : 显示加载class的数量，所占空间等信息\r\ncomplier | 查看HotSpot中即时编译情况统计 | jstat -compiler pid: 显示VM实时编译数量等信息\r\ngc       | 查看JVM中堆的垃圾收集情况的统计| jstat -gc pid\r\ngccapacity| 查看新生代、老生代及持久代的存储容量情况 | jstat -gccapacity: 可以显示VMware内存中三代对象的使用和占用大小\r\ngccause  | 查看垃圾收集的统计情况，如果有发生垃圾收集，它还会显示最后一次及当前正在发生的垃圾收集原因 | jstat -gccause: 显示gc原因\r\ngcnew    | 查看新生代垃圾内含物的情况   | jstat -gcnew pid: new 对象的信息\r\ngcnewcapacity | 用于查看新生代的存储容量情况 | jstat -gcnewcapacity pid: new 对象的信息及其占用量\r\ngcold    | 查看老生代及持久代GC情况   | jstat -gcold pid: old 对象的信息\r\ngcoldcapacity | 用于查看老生代的容量  | jstat -gcoldcapacity: old对象的信息及其占用量\r\ngcpermacpacity | 用于查看持久代的容量 | jstat -gcpermcapacity pid: 持久代对象的信息\r\ngcutil   | 查看新生代、老年代及持久代垃圾收集情况 | jstat -util pid: 统计gc信息\r\n\r\n示例\r\n`bash\r\njstat -gc 17835\r\n`\r\n结果\r\n S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   \r\n43520.0 43520.0  0.0    0.0   611840.0 371440.0 1398272.0  1077246.3  34816.0 33485.4 3584.0 3324.3      7    1.202  32     34.763   35.966\r\n\r\n参数说明：\r\n\r\n\r\njinfo: Java 配置信息\r\njinfo 可以获取当前线程的jvm运行和启动信息，使用如下：\r\n`bash\r\njinfo [option] pid\r\n`\r\n\r\n jmap: Java 内存映射工具\r\njmap 命令用于将堆转存成快照，\r\n",
        "tags": []
    },
    {
        "uri": "/post/java/Lambda表达式和Stream",
        "content": "---\r\ntitle: Lambda表达式和Stream\r\ndate: 2017-07-20 12:14:12\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\n---\r\n\r\n流被设计为与lambda表达式一起使用，这使得日常编程更容易。\r\n\r\nLambda 表达式\r\n匿名类的一个非常明显的问题是，如果匿名类的实现非常简单，例如只包含一个方法的接口，那么匿名类的语法可能看起来很笨重而且也不清晰。在这些情况下，可以将功能作为参数传递给另一种方法。Lambda表达式就是为此而生，它能够将功能视为方法参数或将代码作为数据。\r\n对于单一方法的实例，相对于匿名类，lambda表达式可以更紧凑地表示。\r\n!-- more --\r\n 使用Lambda表达式的理想情况\r\n假设要创建一个社交网络应用程序，想要创建一个功能，使管理员可以在符合特定条件的社交网络应用程序的成员上执行任何类型的操作（例如发送消息）。\r\n`java\r\npublic class Person {\r\n    public enum Sex {\r\n        MALE, FEMALE\r\n    }\r\n    int age;\r\n    String name;\r\n    LocalDate birthday;\r\n    Sex gender;\r\n    String emailAddress;\r\n    // getter和setter方法\r\n}\r\n`\r\n1. 创建搜索符合某个特征成员的方法\r\n最简单的方式是创建几个方法，每个方法都负责搜索出满足某个特性的成员，比如性别或者年龄。\r\n`java\r\npublic static void printPersonOlderThan(ListPerson roster, int age) {\r\n    for (Person p: roster) {\r\n        if (p.getAge() = age)\r\n            p.printPerson();\r\n    }\r\n}\r\n`\r\n上面的方法可能使得应用程序变得脆弱，因为修改Person类，比如修改数据类型，就会导致程序无法正常工作。假设要升级程序，需要改变Person类的结构，增加了新的属性，也许还会改变衡量ages的数据类型或者算法。就需要根据这些修改重写API。\r\n 2. 创建一个更通用的搜索方法\r\n下面的方法更为通用，它打印了指定年龄段的成员\r\n`java\r\npublic static void printPersonsWithinAgeRange(\r\n    ListPerson roster, int low, int high) {\r\n    for (Person p : roster) {\r\n        if (low <= p.getAge() && p.getAge() < high) {\r\n            p.printPerson();\r\n        }\r\n    }\r\n}\r\n`\r\n如果想要打印指定性别的成员或者指定性别和特定年龄段的成员该怎么办？如果要改变Person类，比如添加一些关系状态或者地理位置的属性，要怎么修改？虽然这个方法比printPersonOlderThan更为通用，但是为不同可能的搜索请求，创建不同的方法，依然会使得代码脆弱。可以将指定要在其他类中搜索的条件的代码分开。\r\n3. 在Local Class中指定搜索情况的代码\r\n下面的方法可以允许你指定搜索环境。\r\n`java\r\npublic static void printPersons(\r\n    ListPerson roster, CheckPerson tester) {\r\n    for (Person p : roster) {\r\n        if (tester.test(p)) {\r\n            p.printPerson();\r\n        }\r\n    }\r\n}\r\n`\r\n上面的方法使用了CheckPerson的方法test检测了roster中每个Person实例，如果方法返回true，那么printPerson会被调用。\r\n可以通过实现CheckPerson接口来指定搜索条件\r\n`java\r\ninterface CheckPerson {\r\n    boolean test(Person p);\r\n}\r\n`\r\n下面的类实现了CheckPerson接口，它的test方法过滤了年龄在18到25之间的男性\r\n`java\r\nclass CheckPersonEligible implements CheckPerson {\r\n    public boolean test(Person p) {\r\n        return p.gender == Person.Sex.MALE &&\r\n                p.getAge() = 18 &&\r\n                p.getAge() <= 25;\r\n    }\r\n}\r\n`\r\n可以通过新建一个该类的实例，传递给printPersons方法：\r\n`java\r\nprintPersons(roster, new CheckPersonEligible());\r\n`\r\n虽然这个方式不那么脆弱，如果改变了Person的结构，就不必重新方法了，但是还是要有额外的代码：一个新的接口和新的搜索结果的类。因为CheckPersonEligible实现了接口，可以用一个匿名类代替这个类，这样可以不用为每次搜索都声明一个新类。\r\n 4. 使用匿名类\r\n`java\r\nprintPersons(\r\n    roster,\r\n    new CheckPerson() {\r\n        public boolean test(Person p) {\r\n            return p.getGender() == Person.Sex.MALE\r\n                && p.getAge() = 18\r\n                && p.getAge() <= 25;\r\n        }\r\n    }\r\n);\r\n`\r\n这种方法减少了所需的代码量，不用每次执行时都创建一个新类。然而，匿名类的语法庞大。因为CheckPerson接口只包含一种方法。在这种情况下，可以使用lambda表达式而不是匿名类。\r\n5. 使用Lambda表达式\r\nCheckPerson接口是一个函数式接口（functional interface)。函数式接口只包含一个抽象方法。函数式接口可以包含多个default methods和static methods。因为函数式接口只包含一个抽象方法，可以在实现该方法时省略该方法的名称。\r\n`java\r\nprintPersons(\r\n    roster,\r\n    (Person p) - p.getGender() == Person.Sex.MALE\r\n        && p.getAge() = 18\r\n        && p.getAge() <= 25\r\n);\r\n`\r\n 6. 使用标准的函数式接口\r\nCheckPerson是一个简单的函数式接口。该方法如此简单，没有必要在程序声明一次。因此，JDK中定义了几个标准的功能接口，可以在java.util.function包中找到它们。\r\n可以使用PredicateT接口替换CheckPerson，这个接口有一个方法boolean test(T t)\r\n`java\r\ninterface PredicateT {\r\n    boolean test(T t);\r\n}\r\n`\r\n使用PredicateT接口替换CheckPerson，如下：\r\n`java\r\nprintPersonsWithPredicate(\r\n    roster,\r\n    p - p.getGender() == Person.Sex.MALE\r\n        && p.getAge() = 18\r\n        && p.getAge() <= 25\r\n);\r\n`\r\n不止有这一种方式使用lambda表达式，下面的方式是推荐的方式\r\n7. 在应用中使用Lambda表达式\r\n只有实现一个函数式接口，才能使用lambda表达式。\r\n如果想要使用另一个lambda表达式，该表达式接收一个参数，并且返回void，可以使用ConsumerT接口，该接口有一个抽象方法void accept(T t).\r\n我们可以如下定义Person的方法：\r\n`\r\npublic static void processPersons(ListPerson roster, PredicatePerson tester, ConsumerPerson block) {\r\n    for (Person p: roster) {\r\n        if (tester.test(p)) {\r\n            block.accept(p  );\r\n        }\r\n    }\r\n}\r\n`\r\n该方法可以用如下方式调用：\r\n`\r\nprocessPersons(roster, p - p.getAge() = 18, p - p.printPerson());\r\n`\r\n如果你不止打印符合条件的信息，比如想要验证成员的信息或者获取他们的联系方式。需要一个有返回值的抽象方法的函数式接口。FunctionT,R包含一个方法R apply(T t)，下面的例子展示了通过mapper获取数据，并使用block处理数据的代码\r\n`\r\npublic static void processPersonsWithFunction(ListPerson roster,\r\n          PredicatePerson tester,\r\n          FunctionPerson, String mapper,\r\n          ConsumerString block) {\r\n    for (Person p: roster) {\r\n        if (tester.test(p)) {\r\n            String data = mapper.apply(p);\r\n            block.accept(data);\r\n        }\r\n    }\r\n}\r\n`\r\n该方法可以用如下方式调用：\r\n`\r\nprocessPersonsWithFunction(\r\n    roster,\r\n    p - p.getGender() == Person.Sex.MALE\r\n        && p.getAge() = 18\r\n        && p.getAge() <= 25,\r\n    p - p.getEmailAddress(),\r\n    email - System.out.println(email)\r\n);\r\n`\r\n 8. 使用泛型\r\n下面使用泛型的方法，可以接收任意数据类型的集合\r\n`\r\npublic static X, Y void processElements (\r\n        IterableX source,\r\n        PredicateX tester,\r\n        FunctionX, Y mapper,\r\n        ConsumerY block ) {\r\n    for (X p: source) {\r\n        if (tester.test(p)) {\r\n            Y data = mapper.apply(p);\r\n            block.accept(data);\r\n        }\r\n    }\r\n}\r\n`\r\n上面的方法可以使用如下方式调用\r\n`\r\nprocessElements(\r\n        roster,\r\n        p -  p.getAge() = 18\r\n                && p.getAge() <= 25,\r\n        p - p.getEmailAddress(),\r\n        email - System.out.println(email)\r\n        );\r\n`\r\n9. 使用接受Lambda表达式作为参数的聚合操作\r\n下面的例子使用聚合操作来打印email\r\n`\r\nroster.stream().\r\n    filter( p -  p.getAge() = 18\r\n                && p.getAge() <= 25)\r\n    .map(p - p.getEmailAddress())\r\n    .forEach( email - System.out.println(email));\r\n`\r\n\r\n\r\n\r\n 接口 -- 默认方法\r\njava8中在接口中可以定义默认方法，默认方法同抽象类中的非抽象方法类似，子类可以选择是否覆盖。\r\n这样就可以在接口中添加新的方法，而不用修改原有实现该接口的类。\r\n`\r\npublic interface DefaultInterface {\r\n    default String defaultMethod() {\r\n        return \"Default method\";\r\n    }\r\n}\r\n`\r\n接口的默认方法可以不用加public前缀，因为接口中的方法都是public的。\r\n还可以定义静态的方法，和类中的静态方法相同，都是与类相关联的，而不是它的实例。\r\n`\r\npublic interface DefaultInterface {\r\n    static String defaultMethod() {\r\n        return \"Static method\";\r\n    }\r\n}\r\n`\r\n\r\n默认方法可以向现有接口中添加支持lambda表达式作为参数的方法。\r\n\r\n函数式接口\r\n@FunctionalInterface注解的接口是函数式接口。使用此种接口作为函数参数的方法，传递参数时，可以使用lambda表达式作为参数。\r\n`\r\npublic void sort(ComparatorCard c) {\r\n   Collections.sort(entireDeck, c);\r\n}\r\n// 可以这样调用\r\ndeck.sort((firstCart, secondCard) - firstCart.getRank().value() - secondCard.getRank().value());\r\n`\r\n如果只是创建一个Comparator实例来比较可以从诸如getValue或hashCode之类的方法返回数值的任何对象，我们可以使用Comparator接口提供的静态方法comparing\r\n`\r\ndeck.sort(Comparator.comparing((card) - card.getRank())); \r\n// 还可以写成方法引用\r\ndeck.sort(Comparator.comparing(Card::getRank));\r\n`\r\nComparator还提供了comparingDouble、thenComparing等一系列方法来创建Comparator实例。\r\n如果要创建一个可以将对象的多个属性进行比较的Comparator实例，如下例：\r\n`\r\ndeck.sort(\r\n    (firstCard, secondCard) - {\r\n        int compare =\r\n            firstCard.getRank().value() - secondCard.getRank().value();\r\n        if (compare != 0)\r\n            return compare;\r\n        else\r\n            return firstCard.getSuit().value() - secondCard.getSuit().value();\r\n    }      \r\n); \r\n`\r\n我们可以使用Comparator接口提供的静态方法来创建实例\r\n`\r\ndeck.sort(\r\n    Comparator\r\n        .comparing(Card::getRank)\r\n        .thenComparing(Comparator.comparing(Card::getSuit)));\r\n`\r\n 方法引用\r\n我们使用lambda表达式来创建匿名方法。但是，有时候使用lambda表达式只是调用了一个方法。这种情况下，通过方法引用现有方法往往更加清晰。使用方法引用，可以使代码更紧凑，更易于阅读。\r\n如果对Person的数组根据age属性进行排序。或许可以使用下面的代码\r\n`\r\nclass PersonAgeComparator implements ComparatorPerson {\r\n    public int compare(Person a, Person b) {\r\n        return a.getBirthday().compareTo(b.getBirthday());\r\n    }\r\n}\r\nPerson[] rosterAsArray = roster.toArray(new Person[roster.size()]);\r\nArrays.sort(rosterAsArray, new PersonAgeComparator());\r\n`\r\nsort方法的签名是static T void sort(T[] a, Comparator? super T c)。Comparator接口是函数式接口，所以我们可以使用lambda表达式代替PersonAgeComparator类：\r\n`\r\nArrays.sort(rosterAsArray,\r\n        (Person a, Person b) - a.getBirthday().compareTo(b.getBirthday())\r\n);\r\n`\r\n我们还可以定义Person的静态方法compareByAge:\r\n`\r\npublic static int compareByAge(Person a, Person b) {\r\n    return a.birthday.compareTo(b.birthday);\r\n}\r\n`\r\n那么上边的方法可以写成：\r\n`\r\nArrays.sort(rosterAsArray,\r\n    (a, b) - Person.compareByAge(a, b)\r\n);\r\n`\r\n因为lambda表达式调用了一个已经存在的方法，我们可以用方法引用：\r\n`\r\nArrays.sort(rosterAsArray, Person::compareByAge);\r\n`\r\n使用方法引用由两个条件：\r\n其形式参数列表从Comparator Person .compare复制，是(Person，Person)。也就是说方法引用的方法的参数类型需要同所需要的参数类型是一致的。\r\n它的调用时Person.compareByAge\r\n方法应用的类型\r\n| 类型   | 示例\r\n:--------|:-----------\r\n|应用静态方法| ContainingClass::staticMethodName\r\n|某个对象的方法| containingObject::instanceMethodName\r\n|引用特定类型的任意对象的实例方法|ContainingType::methodName\r\n|构造器方法|ClassName::new\r\n主要介绍下构造器方法：\r\n同静态方法引用类似，我们可以用new来使用构造器引用。以下方法将元素从一个集合复制到另一个集合：\r\n`\r\npublic static T, SOURCE extends Collection<T, DEST extends CollectionT\r\n    DEST transferElements(\r\n        SOURCE sourceCollection,\r\n        SupplierDEST collectionFactory) {\r\n        \r\n        DEST result = collectionFactory.get();\r\n        for (T t : sourceCollection) {\r\n            result.add(t);\r\n        }\r\n        return result;\r\n}\r\n`\r\n函数式接口Supplier包含一个方法，其签名为T get()。可以通过如下方式调用该方法：\r\n`\r\nSetPerson rosterSetLambda =\r\n    transferElements(roster, () - { return new HashSet(); });\r\nSetPerson rosterSet = transferElements(roster, HashSet::new);\r\n`\r\n 聚合操作\r\n聚合操作描述了以下管道的操作，它计算了集合roster中所有男性的平均年龄：\r\n`\r\ndouble average = roster\r\n    .stream()\r\n    .filter(p - p.getGender() == Person.Sex.MALE)\r\n    .mapToInt(Person::getAge)\r\n    .average()\r\n    .getAsDouble();\r\n`\r\nJDK中包含许多终止操作（如：average, sum, min, max 和 count），终止操作返回一个对流中数据计算的值。这些操作被称为归纳操作，也有些归纳操作返回一个集合。许多归纳操作执行像计算平局值或者将元素分类的操作。主要有两个方法： Stream.reduce类方法；Stream.collect类方法\r\nStream.reduce 方法\r\nStream.reduce方法是通用的简化操作，比如下例中的Stream.sum归纳操作：\r\n`\r\nInteger totlaAge = roster\r\n    .stream()\r\n    .mapToInt(Person::getAge)\r\n    .sum();\r\n`\r\n使用Stream.reduce操作也能实现上述操作：\r\n`\r\nInteger totalAgeReduce = roster\r\n   .stream()\r\n   .map(Person::getAge)\r\n   .reduce(\r\n       0,\r\n       (a, b) - a + b);\r\n`\r\nreduce操作需要两个参数：\r\nidentity: 该参数是归纳操作的初始值，如果集合中没有元素，也是默认的返回值。\r\naccumulator: 累加器函数需要两个参数：归纳的一部分结果和流的下一个元素。它返回一个新的部分结果。\r\n Stream.collect 方法\r\ncollect方法会改变现有值。\r\n如果要计算一个stream中的平均值，需要两段数据：stream中的元素的总数和元素的和。与reduce类似，collect方法也只返回一个值。可以创建一个新的数据类型，跟踪元素的总数和这些元素的和：\r\n`\r\nclass Averager implements IntConsumer\r\n{\r\n    private int total = 0;\r\n    private int count = 0;\r\n        \r\n    public double average() {\r\n        return count  0 ? ((double) total)/count : 0;\r\n    }\r\n        \r\n    public void accept(int i) { total += i; count++; }\r\n    public void combine(Averager other) {\r\n        total += other.total;\r\n        count += other.count;\r\n    }\r\n}\r\n`\r\n下面的管道使用了Average类和collect方法来计算男性成员的平均年龄：\r\n`\r\nAverager averageCollect = roster.stream()\r\n        .filter(p - p.getGender() == Person.Sex.MALE)\r\n        .map(Person::getAge)\r\n        .collect(Averager::new, Averager::accept, Averager::combine);\r\nSystem.out.println(\"Average age of male members: \" + averageCollect.average());\r\n`\r\ncollect方法需要三个参数：\r\nsupplier: 该参数需要一个工厂方法，它创建了新的实例。对于collect操作来说，它创建了放置结果的容器，就如Averager\r\naccumulator: 累加器功能将流元素结合到结果容器。在此示例中，它通过将count变量增加1来修改Averager结果容器，并将总成员变量添加到流元素的值，该元素是表示男性成员年龄的总和。\r\ncombiner: 组合器功能需要两个结果容器并合并其内容。\r\n虽然JDK为您提供了平均运算以计算流中元素的平均值，但如果需要从流的元素中计算多个值，则可以使用collect操作和自定义类。\r\ncollect操作非常适合于集合。以下示例将男性成员的名字提取出来：\r\n`\r\nListString namesOfMaleMembersCollect = roster\r\n    .stream()\r\n    .filter(p - p.getGender() == Person.Sex.MALE)\r\n    .map(Person::getName)\r\n    .collect(Collectors.toList());\r\n`\r\n上述例子中，collect操作需要一个Collector类型的参数。该类中封装了collect所需要的三个参数。\r\nCollectors类中包含了许多有用的归纳操作，例如将元素累积到集合中并根据各种标准汇总元素。这些归纳操作返回Collector的实例，可以用他们作为collect操作的参数。\r\n上例中的Collectors.toList将流元素累加到List的新实例中。toList操作返回了一个Collector实例，而不是一个集合。\r\n下例中将roster集合元素根据性别归类：\r\n`\r\nMapPerson.Sex, List<Person byGender = roster.stream()\r\n        .collect(Collectors.groupingBy(Person::getGender));\r\n`\r\n下例中根据性别将集合中元素的名字归类：\r\n`\r\n MapPerson.Sex, List<String namesByGender =\r\n    roster.stream()\r\n        .collect(\r\n            Collectors.groupingBy(\r\n                Person::getGender,\r\n                Collectors.mapping(\r\n                    Person::getName,\r\n                    Collectors.toList())));\r\n`\r\n\r\n以下示例检索每个性别成员的总年龄：\r\n`\r\nMapPerson.Sex, Integer totalAgeByGender =\r\n    roster.stream()\r\n        .collect(\r\n            Collectors.groupingBy(\r\n                Person::getGender,                      \r\n                Collectors.reducing(\r\n                    0,\r\n                    Person::getAge,\r\n                    Integer::sum)));\r\n`\r\n以下示例检索每个性别成员的平均年龄：\r\n`\r\nMapPerson.Sex, Double averageAgeByGender = roster\r\n    .stream()\r\n    .collect(\r\n        Collectors.groupingBy(\r\n            Person::getGender,                      \r\n            Collectors.averagingInt(Person::getAge)));\r\n`\r\n并行处理流\r\n并行计算包括将问题分解为子问题，同时解决这些问题（并行地，每个子问题在单独的线程中运行），然后将解决方案的结果组合。Java中有fork/join框架可以轻松地在应用程序中实现并行计算，不过需要问题是怎么分解成子问题的。在聚合操作中，Java运行时会自动处理分解和组合问题。\r\n在应用程序中实现并行计算的一个主要难点是使用的集合不是线程安全的，这意味着多线程会导致线程之间的干扰或者内存一致性错误。集合框架提供了同步包装方法，可以通过包装任意集合，让他们成为线程安全的。但是，这会引入线程竞争，使得线程不能并行计算。聚合操作和并行处理流可以并行处理线程不安全的集合，而不用我们做修改。\r\n并行性并不会自动快于连续执行操作，即使有足够的数据和处理器内核，并行性也不会快。 虽然集合操作能够更轻松地实现并行性，但我们仍要确定应用程序是否适合并行性。\r\n我们可以自己选择串行或者并行执行流。如果需要并行执行流，那么需要使用指定的方法：Collection.parallelStream.\r\n`\r\ndouble average = roster\r\n    .parallelStream()\r\n    .filter(p - p.getGender() == Person.Sex.MALE)\r\n    .mapToInt(Person::getAge)\r\n    .average()\r\n    .getAsDouble();\r\n`\r\n 并行归纳\r\n下例是我们串行处理流\r\n`\r\nMapPerson.Sex, List<Person byGender =\r\n    roster\r\n        .stream()\r\n        .collect(\r\n            Collectors.groupingBy(Person::getGender));\r\n`\r\n其并行处理如下例：\r\n`\r\nConcurrentMapPerson.Sex, List<Person byGender =\r\n    roster\r\n        .parallelStream()\r\n        .collect(\r\n            Collectors.groupingByConcurrent(Person::getGender));\r\n`\r\n用groupingByConcurrent代替了groupingBy，返回结果也有Map变为ConcurrentMap.\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/post/java/mybatis",
        "content": "---\r\ntitle: mybatis\r\ndate: 2017-07-20 16:05:42\r\ncategories: [\"sql\"]\r\ntags: [\"sql\"]\r\n---\r\n\r\nMyBatis是什么\r\nMyBatis是定制化SQL、存储过程以及高级映射的持久层框架。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。\r\n!-- more --\r\n 开始入门\r\nmaven导入MyBatis包\r\n在pom.xml的dependencies下添加如下依赖：\r\n`\r\n!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --\r\ndependency\r\n    groupIdorg.mybatis/groupId\r\n    artifactIdmybatis/artifactId\r\n    version3.4.4/version\r\n/dependency\r\n`\r\n\r\nMyBatis是中心是SqlSessionFactory实例，该实例通过SqlSessionFactoryBuilder获得。SqlSessionFactoryBuilder可以通过XML配置或使用Configuration构建。\r\n 使用XML构建SqlSessionFactory\r\nXML配置文件包含了MyBatis系统的核心配置，包含数据库连接实例的数据源和决定事务作用域和控制方式的事务管理器。下面是配置中比较关键的部分：\r\n`\r\n?xml version=\"1.0\" encoding=\"UTF-8\" ?\r\n<!DOCTYPE configuration\r\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\"\r\nconfiguration\r\n  environments default=\"development\"\r\n    environment id=\"development\"\r\n      transactionManager type=\"JDBC\"/\r\n      dataSource type=\"POOLED\"\r\n        property name=\"driver\" value=\"${driver}\"/\r\n        property name=\"url\" value=\"${url}\"/\r\n        property name=\"username\" value=\"${username}\"/\r\n        property name=\"password\" value=\"${password}\"/\r\n      /dataSource\r\n    /environment\r\n  /environments\r\n  mappers\r\n    mapper resource=\"mybatis/mapper/PersonMapper.xml\"/\r\n  /mappers\r\n/configuration\r\n`\r\n要注意XML头部的声明，该声明用来验证XML文档正确性。environment元素中包含了事务管理和连接池的配置。mappers元素包含一组\tmapper映射器。\r\n我们可以通过Mybatis的一个Resources工具类从classpath或其他位置加载配置文件。\r\n`\r\nString resource = \"mybatis.xml\";\r\nInputStream confStream = Resources.getResourceAsStream(resource);\r\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(confStream);\r\n`\r\n不使用XML构建SqlSessionFactory\r\n如果不想依赖配置构建程序，那么可以使用Java程序构建configuration，MyBatis提供了完全不用XML配置的类：\r\n`\r\nDataSource dataSource = BlogDataSourceFactory.getBlogDataSource();\r\nTransactionFactory transactionFactory = new JdbcTransactionFactory();\r\nEnvironment environment = new Environment(\"development\", transactionFactory, dataSource);\r\nConfiguration configuration = new Configuration(environment);\r\nconfiguration.addMapper(BlogMapper.class);\r\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);\r\n`\r\n 从SqlSessionFactory中获取SqlSession\r\nSqlSession中包含了面向数据库执行SQL命令所有的方法，可以通过SqlSession实例来直接执行已经映射的SQL语句：\r\n`\r\ntry (SqlSession session = sqlSessionFactory.openSession()) {\r\n\tPerson person = session.selectOne(\"mybatis.mapper.PersonMapper.selectPerson\", 101);\r\n}\r\n`\r\n上例中需要PersonMapper.xml配置项：\r\n`\r\nmapper namespace=\"mybatis.mapper.PersonMapper\"\r\n    select id=\"selectPerson\" resultType=\"mybatis.dao.Person\" parameterType=\"int\"\r\n        SELECT * FROM Person WHERE id = #{id}\r\n    /select\r\n/mapper\r\n`\r\n在一个XML映射文件中，可以定义任意多个映射语句，而且具有很好的自解释性。在命名空间mybatis.mapper.PersonMapper中定义了一个名为selectBlog的映射语句，这样就可以像上例中那样调用查询语句。\r\n我们还可以不使用XML配置，使用注解来实现同样的功能\r\n`\r\npublic interface PersonMapper {\r\n    @Select(\"SELECT * FROM blog WHERE id = #{id}\")\r\n    Person selectPerson(int id);\r\n}\r\n`\r\n对于简单的语句，用Java注解简洁清晰；但是对于复杂的语句，就显得有些混乱，那么可以使用XML映射语句。这两种方式可以自由移植和切换。\r\n作用域和生命周期\r\n如果使用依赖注入的框架，如spring，则可以直接忽略他们的生命周期。因为这些框架可以创建线程安全的、基于事务的SqlSession和映射器，并将他们注入到bean中。\r\n SqlSessionFactoryBuilder\r\n该类可以被实例化、使用和丢弃，一旦创建了SqlSessionFactory，就可以不再用它了。因此SqlSessionFactoryBuilder实例最佳作用域是局部变量。可以重用SqlSessionFactoryBuilder来创建多个SqlSessionFactory实例。但是不要让其一直存在，避免一直占有资源。\r\nSqlSessionFactory\r\nSqlSessionFactory实例一旦创建，就应该在运行期间一直存在，对其清除和重建是浪费资源的。因此SqlSessionFactory的最佳作用域是应用级的，可以用单例模式或者静态单例模式创建\r\n SqlSession\r\n每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。也绝不能将SqlSession实例的引用放在任何类型的管理作用域中。简单概括来说，就是使用之前，创建；使用完之后，马上关闭。SqlSession实现了Closeable，因此可以使用自动关闭的特性：\r\n`\r\ntry (SqlSession session = sqlSessionFactory.openSession()) {\r\n\tPerson person = session.selectOne(\"mybatis.mapper.PersonMapper.selectPerson\", 101);\r\n}\r\n`\r\n映射器实例\r\n映射器是用来绑定映射语句的接口，该实例是从SqlSession中获取的，所以映射器的作用域同SqlSession相同，其最佳作用域是方法作用域。\r\n\r\n XML映射配置文件\r\nMyBatis配置文件的层次结构如下\r\n`\r\n-- configuration\r\n   -- properties\r\n   -- settings\r\n   -- typeAliases\r\n   -- typeHandlers\r\n   -- objectFactory\r\n   -- plugins\r\n   -- environments\r\n      -- environment\r\n         -- transactionManager\r\n         -- dataSource\r\n   -- databaseIdProvider\r\n   -- mappers\r\n`\r\nproperties\r\n这些属性相当于定义的变量，可以在Java属性文件中配置，也可以通过properties元素子元素传递：\r\n`\r\nproperties resource=\"jdbc.properties\"\r\n    property name=\"username\" value=\"dev_user\"/\r\n    property name=\"password\" value=\"F2Fa3!33TYyg\"/\r\n/properties\r\n`\r\n中期的属性可以在这个配置文件中使用：\r\n`\r\ndataSource type=\"POOLED\"\r\n    property name=\"driver\" value=\"${driver}\"/\r\n    property name=\"url\" value=\"${url}\"/\r\n    property name=\"username\" value=\"${username}\"/\r\n    property name=\"password\" value=\"${password}\"/\r\n/dataSource\r\n`\r\n上例中username和password会由properties元素中相应的值来替换，driver和url属性取自jdbc.properties。\r\n如果在多个地方配置了属性，那么会按照下面对顺序来加载：\r\n首先读取properties元素体内指定的属性\r\n然后根据properties中的resource属性读取类路径下属性文件或根据url属性指定读取属性文件，并覆盖已读取的同名属性。\r\n最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。\r\n从MyBatis3.4.2开始，可以用占位符指定一个默认值。：\r\n`\r\ndataSource type=\"POOLED\"\r\n  property name=\"username\" value=\"${username:utuser}\"/ !-- 如果'username'不存在, username 取值为'utuser' --\r\n/dataSource\r\n`\r\n这个特性默认是关闭的，需要在properties下，用指定的属性来开启此特性\r\n`\r\nproperties\r\nproperty name=\"org.apache.ibatis.parsing.PropertyParser.enable-default-value\" value=\"true\"/\r\n/properties\r\n`\r\n settings\r\n这是MyBatis中极为重要的调整设置，他们会改变MyBatis的运行时行为：\r\n\r\n设置参数\t\t| 描述\t\t\t\t\t\t\t\t   | 取值\t\t|默认值\r\n:-----------|:-------------------------------------|:----------|:-------\r\ncacheEnabled| 该配置影响所有映射器中配置的缓存的全局开关|true/false\t| true\r\nlazyLoadingEnabled| \t延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态.|true/false| false\r\naggressiveLazyLoading|当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载（参考lazyLoadTriggerMethods).|true\\false|false (true in ≤3.4.1)\r\nmultipleResultSetsEnabled|\t是否允许单一语句返回多结果集（需要兼容驱动）|\ttrue\\false\t|true\r\nuseColumnLabel|使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果|\ttrue\\false\t|true\r\nuseGeneratedKeys|允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作|true/false| false\r\nautoMappingBehavior|指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）|NONE,PARTIAL,FULL|PARTIAL\r\nautoMappingUnknownColumnBehavior|指定发现自动映射目标未知列（或者未知属性类型）的行为|NONE, WARNING, FAILING|NONE\r\ndefaultExecutorType|配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新|SIMPLE REUSE BATCH|SIMPLE\r\n\r\n`xml\r\nsettings\r\n    !-- 该配置影响的所有映射器中配置的缓存的全局开关。 --\r\n    setting name=\"cacheEnabled\" value=\"true\"/\r\n    !-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。--\r\n    setting name=\"lazyLoadingEnabled\" value=\"false\"/\r\n    !-- 是否允许单一语句返回多结果集（需要兼容驱动）。 --\r\n    setting name=\"multipleResultSetsEnabled\" value=\"true\"/\r\n    !-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。 --\r\n    setting name=\"useColumnLabel\" value=\"true\"/\r\n    !-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。  --\r\n    setting name=\"useGeneratedKeys\" value=\"false\"/\r\n    <!-- 指定 MyBatis 应如何自动映射列到字段或属性。\r\n        NONE 表示取消自动映射；\r\n        PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。\r\n        FULL 会自动映射任意复杂的结果集（无论是否嵌套）。--\r\n    setting name=\"autoMappingBehavior\" value=\"PARTIAL\"/\r\n    <!-- 指定发现自动映射目标未知列（或者未知属性类型）的行为。\r\n            NONE: 不做任何反应\r\n            WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)\r\n            FAILING: 映射失败 (抛出 SqlSessionException) --\r\n    setting name=\"autoMappingUnknownColumnBehavior\" value=\"WARNING\"/\r\n    <!--    配置默认的执行器。\r\n                SIMPLE 就是普通的执行器；\r\n                REUSE 执行器会重用预处理语句（prepared statements）；\r\n                BATCH 执行器将重用语句并执行批量更新。 --\r\n    setting name=\"defaultExecutorType\" value=\"SIMPLE\"/\r\n    !-- 设置超时时间，它决定驱动等待数据库响应的秒数。(任意正整数) --\r\n    setting name=\"defaultStatementTimeout\" value=\"25\"/\r\n    !-- 为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。 --\r\n    setting name=\"defaultFetchSize\" value=\"100\"/\r\n    !-- 允许在嵌套语句中使用分页（RowBounds）。 If allow, set the false. --\r\n    setting name=\"safeRowBoundsEnabled\" value=\"false\"/\r\n    !-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 --\r\n    setting name=\"mapUnderscoreToCamelCase\" value=\"false\"/\r\n    <!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。\r\n       默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。\r\n       若设置值为 STATEMENT，本地会话仅用在语句执行上， 对相同 SqlSession 的不同调用将不会共享数据。 --\r\n    setting name=\"localCacheScope\" value=\"SESSION\"/\r\n    <!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，\r\n        多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。--\r\n    setting name=\"jdbcTypeForNull\" value=\"OTHER\"/\r\n    !-- 指定哪个对象的方法触发一次延迟加载。 --\r\n    setting name=\"lazyLoadTriggerMethods\" value=\"equals,clone,hashCode,toString\"/\r\n    !-- 指定 MyBatis 增加到日志名称的前缀。 --\r\n    setting name=\"logPrefix\" value=\"mybatis\" /\r\n/settings\r\n`\r\ntypeAliases\r\n类型名是为Java类型设置一个短名字，只和XML配置有关，仅用来减少类完全限定名的冗余。比如：\r\n`xml\r\ntypeAliases\r\n  typeAlias alias=\"Author\" type=\"domain.blog.Author\"/\r\n  typeAlias alias=\"Blog\" type=\"domain.blog.Blog\"/\r\n  typeAlias alias=\"Comment\" type=\"domain.blog.Comment\"/\r\n  typeAlias alias=\"Post\" type=\"domain.blog.Post\"/\r\n  typeAlias alias=\"Section\" type=\"domain.blog.Section\"/\r\n  typeAlias alias=\"Tag\" type=\"domain.blog.Tag\"/\r\n/typeAliases\r\n`\r\n这样，就可以在使用domain.blog.Blog的地方用Blog替换。\r\n还可以通过指定包名，来批量指定别名：\r\n`\r\ntypeAliases\r\n  package name=\"domain.blog\"/\r\n/typeAliases\r\n`\r\n这样每个在包domain.blog中的Java对象，在没有注解的情况下，会使用该对象的首字母小写的类名来作为它的别名。如domain.blog.Author的别名为author；如果有注解，那么以注解值为准。\r\n`java\r\n@Alias(\"author\")\r\npublic class Author {\r\n    ...\r\n}\r\n`\r\n typeHandlers\r\n无论在处理预处理语句中设置一个参数时，还是从结果集中取出一个值时，都会用到类型处理器将获取的值以合适的方式转换成Java类型。这就是类型处理器。\r\n我们可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型。具体做法：实现org.apache.ibatis.type.TypeHandler接口，或者继承类org.apache.ibatis.type.BaseTypeHandler，然后可以选择性地将它映射到一个JDBC类型：\r\n`java\r\n@MappedJdbcTypes(JdbcType.VARCHAR)\r\npublic class ExampleTypeHandler extends BaseTypeHandlerString {\r\n    @Override\r\n    public void setNonNullParameter(PreparedStatement preparedStatement, int i, String s, JdbcType jdbcType) throws SQLException {\r\n        preparedStatement.setString(i, s);\r\n    }\r\n\r\n    @Override\r\n    public String getNullableResult(ResultSet resultSet, String columnName) throws SQLException {\r\n        return resultSet.getString(columnName);\r\n    }\r\n\r\n    @Override\r\n    public String getNullableResult(ResultSet resultSet, int columnIndex) throws SQLException {\r\n        return resultSet.getString(columnIndex);\r\n    }\r\n\r\n    @Override\r\n    public String getNullableResult(CallableStatement callableStatement, int columnIndex) throws SQLException {\r\n        return callableStatement.getString(columnIndex);\r\n    }\r\n}\r\n`\r\n这个类需要在MyBatis的配置文件中配置：\r\n`xml\r\ntypeHandlers\r\n  typeHandler handler=\"org.mybatis.example.ExampleTypeHandler\"/\r\n/typeHandlers\r\n`\r\n使用这个的类型处理器将会覆盖已经存在的处理Java的String类型属性和VARCHAR参数及结果的类型处理器。\r\n MyBatis不会探测数据库元信息来决定使用哪种数据类型，所以必须在参数和结果映射中指明那个是VARCHAR类型的字段，以便能够绑定到正确的类型处理器上。\r\n\r\n通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：\r\n在类型处理器的配置元素（typeHandler element）上增加一个 javaType 属性（比如：javaType=\"String\"）；\r\n在类型处理器的类上（TypeHandler class）增加一个 @MappedTypes 注解来指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解方式将被忽略。\r\n\r\n可以通过两种方式来指定被关联的 JDBC 类型：\r\n在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType=\"VARCHAR\"）；\r\n在类型处理器的类上（TypeHandler class）增加一个 @MappedJdbcTypes 注解来指定与其关联的 JDBC 类型列表。 如果在 jdbcType 属性中也同时指定，则注解方式将被忽略。\r\n\r\n我们还可以让MyBatis自动查找类型处理器，该方式只能通过注解方式来指定JDBC类型：\r\n`xml\r\n!-- mybatis-config.xml --\r\ntypeHandlers\r\n  package name=\"org.mybatis.example\"/\r\n/typeHandlers\r\n`\r\n处理枚举类\r\n若想映射枚举类型Enum，则需要从EnumTypeHandler或者EnumOrdinalTypeHandler中选一个来使用。\r\n\r\n 对象工厂\r\nMyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。 如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。比如：\r\n`java\r\npublic class ExampleObjectFactory extends DefaultObjectFactory {\r\n  public Object create(Class type) {\r\n    return super.create(type);\r\n  }\r\n  public Object create(Class type, ListClass constructorArgTypes, ListObject constructorArgs) {\r\n    return super.create(type, constructorArgTypes, constructorArgs);\r\n  }\r\n  public void setProperties(Properties properties) {\r\n    super.setProperties(properties);\r\n  }\r\n  public T boolean isCollection(ClassT type) {\r\n    return Collection.class.isAssignableFrom(type);\r\n  }\r\n}\r\n`\r\n`xml\r\n!-- mybatis-config.xml --\r\nobjectFactory type=\"org.mybatis.example.ExampleObjectFactory\"\r\n  property name=\"someProperty\" value=\"100\"/\r\n/objectFactory\r\n`\r\n插件\r\nMyBatis允许你在已映射语句执行过程中的某一个点进行拦截调用。MyBatis允许使用插件拦截的调用有：\r\nExecutor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)\r\nParameterHandler (getParameterObject, setParameters)\r\nResultSetHandler (handleResultSets, handleOutputParameters)\r\nStatementHandler (prepare, parameterize, batch, update, query)\r\n\r\n假设你想做的不仅仅是监控方法的调用，那么你应该很好的了解正在重写的方法的行为。 因为如果试图修改或重写已有方法，你很可能在破坏 MyBatis的核心模块。 这些都是更低层的类和方法，所以使用插件的时候要特别当心。\r\n使用插件，只需要实现Interceptor接口，并指定想要拦截的方法签名即可。\r\n`java\r\n@Intercepts({\r\n    @Signature(\r\n        type = Executor.class,\r\n        method = \"update\",\r\n        args = {MappedStatement.class, Object.class}\r\n    )\r\n})\r\npublic class ExamplePlugin implements Interceptor {\r\n    @Override\r\n    public Object intercept(Invocation invocation) throws Throwable {\r\n        return invocation.proceed();\r\n    }\r\n\r\n    @Override\r\n    public Object plugin(Object o) {\r\n        return Plugin.wrap(o, this);\r\n    }\r\n\r\n    @Override\r\n    public void setProperties(Properties properties) {\r\n\r\n    }\r\n}\r\n`\r\n配置文件中需要增加：\r\n`xml\r\nplugins\r\n  plugin interceptor=\"org.mybatis.example.ExamplePlugin\"\r\n    property name=\"someProperty\" value=\"100\"/\r\n  /plugin\r\n/plugins\r\n`\r\n上面的插件将会拦截在Executor实例中所有的 “update” 方法调用，这里的Executor是负责执行低层映射语句的内部对象。\r\n 配置环境\r\n每个数据库应该对应至少一个SqlSessionFactory实例。\r\nMyBatis中有两种类型的事务管理器（type=\"[JDBC|MANAGED]\")\r\nJDBC: 这个配置就是直接使用了JDBC的提交和回滚设置，它依赖于从数据源得到的连接来管理事物作用域\r\nMANAGED：这个配置将管理事务的整个生命周期的任务交给了容器。默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。例如:\r\n`xml\r\ntransactionManager type=\"MANAGED\"\r\n  property name=\"closeConnection\" value=\"false\"/\r\n/transactionManager\r\n`\r\n 如果使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。\r\ndataSource 数据源\r\n有三种内建的数据源类型 (type=\"[UNPOLLED|POOLED|JNDI]\")\r\nUNPOOLED：每次被请求时打开和关闭连接\r\nPOOLED: 利用数据库连接池，避免了创建新的连接实例时所需要的初始化和认证时间，有比较多的属性可以配置：\r\n  poolMaximumActiveConnections: 最大连接数量\r\n  poolMaximumIdleConnections: 最大空闲连接数\r\n  poolMaximumCheckoutTime: 连接池中的连接被检出时间\r\n  poolTimeToWait:  这是一个底层设置，如果获取连接花费的相当长的时间，它会给连接池打印状态日志并重新尝试获取一个连接\r\n  poolPingQuery: 发送到数据库的侦测查询，用来检验连接是否处在正常工作秩序中并准备接受请求\r\n  poolPingEnabled: 是否启用侦测查询。默认值false，启用是必须设置一个可执行的SQL语句作为poolPingQuery的值\r\n  poolPingConnectionsNotUsedFor: 配置 poolPingQuery 的使用频度。\r\nJNDI: 在EJB或应用服务器类容器中使用\r\n\r\n Mapper XML映射文件\r\nXML SQL映射文件中有一下几个顶级元素：\r\ncache: 给定命名空间的缓存配置\r\ncache-ref: 其他命名空间缓存配置的引用。\r\nresultMap: 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。\r\nsql: 可以被其他语句引用的重用块\r\ninsert: 插入语句\r\nupdate: 更新语句\r\ndelete: 删除语句\r\nselect: 查询语句\r\nselect\r\n查询是数据库操作中应用最频繁的语句。MyBatis简单的select非常简单：\r\n`xml\r\n\r\n`",
        "tags": []
    },
    {
        "uri": "/post/java/spring",
        "content": "---\r\ntitle: spring\r\n---\r\n\r\n\r\nspring 模块\r\n\r\n Core Container\r\nCore Container由 spring-core, spring-beans, spring-context, spring-context-support 和 spring-expression (Spring Expression Language)模块组成。\r\nspring-core 和 spring-beans 模块提供了框架的基本功能——包括IoC和依赖注入。 BeanFactory 是一个精心设计的工厂模式，它消除了对程序单例的需求，并允许将实际程序逻辑中将依赖关系的配置和规范相分离。\r\nspring-context 模块是在 core 和 beans 模块的基础上构建的：这是一种以类似JNDI注册表的框架访问对象方法的风格。Context模块继承了Beans模块的特性，并且增加了对国际化、事件传播、资源加载和透明创建上下文的支持。Context模块也支持Java EE的特性，如EJB，JMX和基本的远程调用。 ApplicationContext 接口是Context模块的核心。\r\nspring-context-support 支持将第三方库整合到spring应用的上下文环境中，例如caching(EhCache, Guava, Jcache), mailing(JavaMail), scheduling(CommonJ, Quartz) 和模板引擎(FreeMarker, JasperReports, Velocity).\r\nspring-expression 模块为运行时查询和操作对象图提供了强大的EL表达式。\r\n\r\nAOP 和 代理\r\nspring-aop 模块提供了允许自定义的面向切面编程的AOP方式，比如用方法拦截和切入点来干净地将该分离的功能代码分离开。\r\nspring-aspects 模块提供与 AspectJ 集成\r\nspring-instrument 模块提供了在特定应用服务器中使用的类代理支持和类加载器的实现\r\nspring-instrument-tomcat 模块包含了Tomcat的Spring工具代理\r\n\r\n Messaging\r\nspring-messaging 模块提供了集成Spring消息模块的整合，像Message， MessageChannel，MessageHandler 和其他作为基于消息传递的应用程序\r\n\r\nData Access/Integration\r\n数据访问/集成 有 JDBC，ORM，OXM，JMS和事务模块\r\nspring-jdbc 模块提供了一个JDBC的抽象层，不需要进行单调乏味的JDBC编码和解析数据库特定的错误代码。\r\nspring-tx 模块支持编程和声明式事务管理，用于实现特殊接口的类和所有POJO\r\nspring-orm 模块提供了整个流行ORM API的数据层框架，如JPA，JDO和Hibernate。\r\nspring-oxm 模块提供了支持 Object-XML映射的抽象层，像 JAXB，Castor，XML Beans，JiBX 和 XStream\r\nspring-jms 模块包含了生产消费消息的特性\r\n\r\n Web\r\nWeb层包含了 spring-web, spring-webmvc, spring-websocket 和 spring-webmvc-portlet 模块\r\nspring-web 模块提供了基本的面向Web的集成功能，例如多文件上传功能，使用Servlet监听器对IoC进行初始化，面向Web的应用程序上下文。它还包含一个HTTP客户端和对Spring远程处理的Web相关部分支持。\r\nspring-webmvc 模块包含了针对web应用程序的 Spring的 MVC 和 REST Web Services 实现。Spring的MVC框架提供了域模型代码和Web表单之间的清晰分离，并且与Spring框架的其他所有功能集成在一起。\r\nspring-webmvc-portlet 模块（也称为Web-Portlet模块）提供了在Portlet环境中使用的MVC实现，并映射了spring-webmvc的功能\r\n\r\nTest\r\nspring-test 模块支持 unit testing 和 Spring组件同 Junit或者TestNG之间的整合测试。它提供了一致的Spring ApplicationContexts加载和缓存上下文。 它还提供了模拟对象，您可以使用它来单独测试您的代码。\r\n\r\n Maven Dependency\r\n使用Maven管理依赖时，我们都不需要明确地引入日志依赖。例如，创建应用上下文并使用依赖注入来配置应用，我们的Maven依赖应该如下：\r\n`xml\r\ndenpendencies\r\n    dependency\r\n        groupIdorg.springframework/groupId\r\n        artifactIdspring-context/artifactId\r\n        version4.3.2.RELEASE/version\r\n        scoperuntime/scope\r\n    /dependency\r\n/dependencies\r\n`\r\n\r\n使用Maven过程中，很可能会意外地引入不同版本的Spring jar包。比如，在第三方库或者Spring项目中，将传递的依赖关系拉到较旧的版本。如果我们没有明确指定依赖，各种各样的意外问题都可能会出现。\r\n我们可以使用 BOM(bill of materials) 来解决这个问题，我们可以在 dependencyManagement 中引入 spring-framework-bom 来保证Spring依赖是同一个版本。\r\n`xml\r\ndependencyManagement\r\n    dependencies\r\n        dependency\r\n            groupIdorg.springframework/groupId\r\n            artifactIdspring-framework-bom/artifactId\r\n            version4.3.2.RELEASE/version\r\n            typepom/type\r\n            scopeimport/scope\r\n        /dependency\r\n    /dependencies\r\n/dependencyManagement\r\n`\r\n\r\n使用BOM的另一个优点就是，我们无需在依赖中指定 version 属性:\r\n`xml\r\ndependency\r\n    groupIdorg.springframework/groupId\r\n    artifactIdspring-context/artifactId\r\n/dependency\r\n`\r\n\r\n日志依赖\r\nSpring引入的唯一一个外部依赖是 commons-logging 包，commons-logging 的运行时发现算法是有问题的。我们可以通过两种方式将 commons-logging 换掉：\r\n在 spring-core 模块中排除依赖关系\r\n    `xml\r\n    dependency\r\n        groupIdorg.springframework/groupId\r\n        artifactIdspring-core/artifactId\r\n        version4.3.2.RELEASE/version\r\n        exclusions\r\n            exclusion\r\n                groupIdcommons-logging/groupId\r\n                artifactIdcommons-logging/artifactId\r\n            /exclusion\r\n        /exclusions\r\n    /dependency\r\n    `\r\n依靠一个特殊的 commons-logging 依赖，然后用一个空的jar来替换这个库\r\n\r\n使用Log4j来作为框架的日志系统。Log4j是稳健效率高的，我们在测试Spring的时候，用的就是Log4j。在Spring中使用Log4j，我们需要在Maven中添加依赖，并且在classpath根目录下加入其配置文件log4j.properties 或者 log4j.xml:\r\n`xml\r\ndependency\r\n    groupIdlog4j/groupId\r\n    artifactIdlog4j/artifactId\r\n    version1.2.14/version\r\n/dependency\r\n`\r\n\r\nlog4j.properties 如下：\r\n`xml\r\nlog4j.rootCategory=INFO, stdout\r\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %t %c{2}:%L - %m%n\r\nlog4j.category.org.springframework.beans.factory=DEBUG\r\n`\r\n\r\n The IoC container\r\n控制反转（IoC，又名依赖注入 DI）是一个过程，对象通过构造参数，或者工厂方法的参数，或者设置构造完成对象的参数来定义他们的依赖关系。然后容器在创建bean时将其依赖的对象注入到bean中。\r\norg.springframework.beans 和 org.springframework.context 是Spring框架IoC容器的核心包。BeanFactory 接口提供了配置框架和基本的功能，ApplicationContext 增加了更多企业特定的功能，它完全是BeanFactory的超集。\r\n那些构成应用程序骨干并被Spring IoC容器管理的对象，被称为 beans。\r\n\r\nContainer Overview\r\norg.springframework.context.ApplicationContext 接口代表了Spring IoC容器，它负责初始化，配置，并且组装上述的beans。一般，容器通过XML，或者Java注解，或者Java代码来配置对象。\r\n\r\n通常在应用中，会创建ClassPathXmlApplicationContext 或者 FileSystemXmlApplicationContext. 的实例，来读取XML配置，并根据XML组装对象。\r\n\r\n下图是高度抽象的视图，描述了spring是如何工作的。\r\n{%raw%}\r\nsvg xmlns=\"http://www.w3.org/2000/svg\" width=\"440\" height=\"296\" viewBox=\"7 121 440 296\"defsmarker id=\"a\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"15.236\" refY=\"3.899\"path fill=\"323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M2.236 3.9l12-3.9v7.798z\"//markermarker id=\"b\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"15.236\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M2.236 3.9l12-3.9v7.798z\"//markermarker id=\"c\" markerUnits=\"userSpaceOnUse\" orient=\"auto\" markerWidth=\"16.236\" markerHeight=\"10.551\" viewBox=\"-1 -1.376 16.236 10.551\" refX=\"15.236\" refY=\"3.899\"path fill=\"#323232\" stroke=\"#323232\" stroke-width=\"2\" d=\"M2.236 3.9l12-3.9v7.798z\"//marker/defspath fill=\"none\" d=\"M7 121h440v296H7V121z\"/path fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M208 213h198v68H208z\"/text x=\"88\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" text-anchor=\"middle\" transform=\"translate(218 237.625)\"Spring 容器/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M307 197.764V152\" marker-start=\"url(#a)\"/path fill=\"none\" d=\"M267 141h160v40H267z\"/text x=\"79\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"微软雅黑\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(267 151.625)\"POJOs/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M192.764 247H93\" marker-start=\"url(#b)\"/path fill=\"none\" d=\"M27 205h160v40H27z\"/text x=\"79\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(27 215.625)\"配置/textpath fill=\"#f5927b\" stroke=\"#323232\" stroke-width=\"2\" d=\"M213 339h188v58H213z\"/text x=\"83\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" text-anchor=\"middle\" transform=\"translate(223 358.625)\"配置好的，可以使用的系统/textpath fill=\"none\" stroke=\"#323232\" stroke-width=\"2\" d=\"M307 323.764V281\" marker-start=\"url(#c)\"/path fill=\"none\" d=\"M267 288h160v40H267z\"/text x=\"79\" y=\"15.375\" fill=\"#323232\" font-size=\"15\" font-family=\"Arial\" font-weight=\"bold\" text-anchor=\"middle\" transform=\"translate(267 298.625)\"生产对象/text/svg\r\n{%endraw%}\r\n\r\n配置\r\nSpring配置通常有至少一个被容器管理的bean组成。基于XML配置，是在顶层beans/中配置 bean/元素。基于Java配置的，通常是@Configuration注解的类中的@Bean注解的方法。\r\n基于XML配置的数据如下：\r\n`xml\r\n?xml version=\"1.0\" encoding=\"UTF-8\"?\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n            http://www.springframework.org/schema/beans/spring-beans.xsd\"\r\n    import resource=\"resources/messageSource.xml\"/\r\n    bean id=\"example1\" class=\"com.spring.Example1\"\r\n        !-- collaborators and configuration for this bean go here --\r\n    /bean\r\n    bean id=\"example2\" class=\"com.spring.Example2\"\r\n        !-- collaborators and configuration for this bean go here --\r\n    /bean\r\n    !-- more bean definitions go here --\r\n/beans\r\n`\r\n\r\n我们可以通过如下方式获取一个ApplicationContext:\r\n`java\r\nApplicationContext context =\r\nnew ClassPathXmlApplicationContext(new String[] {\"services.xml\", \"daos.xml\"});\r\nExample1 example1 = context.getBean(\"example1\", Example.class);\r\n`\r\n\r\n我们可以通过 ApplicationContext 接口的 getBean() 方法从Spring获取对象，但是这样会产生对Spring APIs的依赖，所以不建议这么做。我们可以通过框架来注入依赖。\r\n\r\n Bean 定义\r\n我们可以使用如下属性来定义一个Bean元素\r\n\r\n属性     | 描述\r\n:------- |:----------\r\nclass    | bean 的类路径\r\nname     | bean 的名字\r\nscope    | bean 的生命周期\r\nconstructor arguments | 注入的构造参数\r\nproperties | 注入的属性值\r\nautowiring mode | 自动注入模式\r\nlazy-initialization mode | 懒加载模式\r\ninitialization method | 初始化方法\r\ndestruction method | 销毁方法\r\n\r\n我们还可以将在容器外创建的对象加入到Spring容器中：通过 ApplicationContext 的 getBeanFactory() 方法获取到 BeanFactory，然后通过 registerSingleton(...) 或者 registerBeanDefinition(...) 来注册到容器中。\r\n\r\nBean 命名\r\n每个Bean都有一个或多个标识符，标识符在容器中必须唯一。如果我们不提供标识符（id 或 name)，容器会为该Bean生成一个唯一的标识符。\r\n\r\n我们可以用 alias 为 Bean 定义一个别名：\r\n`xml\r\nalias name=\"subsystemA-dataSource\" alias=\"subsystemB-dataSource\"/\r\n`\r\n\r\n Bean 初始化\r\n如果是基于XML配置的容器，我们通过bean/ 标签中的 class 属性来指定对象的类型。对于内部静态类，我们需要在 bean 的class 属性中，用 \"$\" 分隔。如果 com.example.Foo 中有一个静态内部类 Bar，那么 bean 的 class 属性应该写为： com.example.Foo$Bar\r\n构造Bean的方法有： 构造器、静态工厂方法、对象的工厂方法：\r\n`xml\r\n !-- 静态工厂方法构造bean --\r\nbean id=\"clientService\" class=\"com.examples.ClientService\" factory-method=\"createInstance\"/\r\n\r\n!-- 对象的工厂方法构造 bean --\r\nbean id=\"clientService2\" factory-bean=\"clientService\" factory-method=\"createClient\" /\r\n`\r\n\r\n依赖\r\nDenpendency Injection 有两种主要的方式：基于构造方法的 和 基于Setter的\r\n\r\n 基于构造方式 \r\n基于构造方式的DI是通过容器调用多个参数的构造器来完成的，每个参数表示一个依赖关系。\r\n如果构造参数中不存在歧义，那么在bean定义构造参数的顺序就是其构造器参数的顺序。对于如下bean：\r\n`java\r\npackage x.y;\r\npublic class Foo {\r\n    public Foo(Bar bar, Baz baz) {\r\n    // ...\r\n    }\r\n}\r\n`\r\n因为Foo构造器的两个参数Bar和Baz不存在歧义，所以顺序或者类型可以不明确提供。其xml中bean的定义可以写成：\r\n`xml\r\nbean id=\"foo\" class=\"x.y.Foo\"\r\n    constructor-arg ref=\"bar\"/\r\n    constructor-arg ref=\"baz\"/\r\n/bean\r\nbean id=\"bar\" class=\"x.y.Bar\"/\r\nbean id=\"baz\" class=\"x.y.Baz\"/\r\n`\r\n\r\n对于基础类型，Spring不能判断其类型是什么，像valuetrue/value，所以我们要提供一些额外的信息。\r\n`java\r\npackage examples;\r\npublic class ExampleBean {\r\n    ...\r\n    public ExampleBean(int years, String ultimateAnswer) {\r\n        ...\r\n    }\r\n}\r\n`\r\n上述例子中，我们可以使用type属性提供类型：\r\n`xml\r\nbean id=\"exampleBean\" class=\"examples.ExampleBean\"\r\n    constructor-arg type=\"int\" value=\"7500000\"/\r\n    constructor-arg type=\"java.lang.String\" value=\"42\"/\r\n/bean\r\n`\r\n还可以使用index属性来指定参数的顺序，index 是从0开始的:\r\n`xml\r\nbean id=\"exampleBean\" class=\"examples.ExampleBean\"\r\n    constructor-arg index=\"0\" value=\"7500000\"/\r\n    constructor-arg index=\"1\" value=\"42\"/\r\n/bean\r\n`\r\n还可以通过指定构造参数的名字来消除歧义:\r\n`xml\r\nbean id=\"exampleBean\" class=\"examples.ExampleBean\"\r\n    constructor-arg name=\"years\" value=\"7500000\"/\r\n    constructor-arg name=\"ultimateAnswer\" value=\"42\"/\r\n/bean\r\n`\r\n\r\n基于 Setter 来构造bean\r\n基于 Setter 来构造bean是通过容器调用无参构造或者无参静态工厂方法构造出bean后，通过调用setter方法注入属性实现的。\r\n\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/post/java/XPath",
        "content": "---\r\ntitle: XPath 笔记\r\ndate: 2017-11-16\r\ntags: [\"other\"]\r\ncategories: [\"other\"]\r\n---\r\n\r\nXPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。\r\n\r\nXPath 节点\r\n在XPath中有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释、以及文档节点\r\n\r\n对于下面的XML文档：\r\n`xml\r\nbookstore\r\n    book\r\n      title lang=\"eng\"Harry Potter/title\r\n      price29.99/price\r\n    /book\r\n    book\r\n      title lang=\"eng\"Learning XML/title\r\n      price39.95/price\r\n    /book\r\n/bookstore\r\n`\r\n节点有： 文档节点bookstore、元素节点price29.99/price、元素节点lang=\"eng \r\n\r\n XPath 语法\r\nXPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。\r\n下面列出了最有用的路径表达式:\r\n\r\n表达式    | 描述\r\n:--------|:---------------\r\nnodename | 选取此节点的所有子节点\r\n/        | 从根节点选取\r\n//       | 从匹配选择当前节点选择文档中的节点，不考虑其位置\r\n.        | 选取当前节点\r\n..       | 选取当前节点的父节点\r\n@        | 选取属性\r\n\r\n实例如下：\r\n路径表达式    | 结果\r\n:-----------|:-------------\r\nbookstore   |选取bookstore元素所有的子节点\r\nbookstore/book | 选取bookstore子元素的所有book元素\r\n//book      | 选取所有book元素，而不考虑其位置\r\nbookstore//book |  选择bookstore元素后代中所有book元素，而不考虑其位置 \r\n//@lang     | 选取名为lang的所有属性  \r\n\r\n谓语\r\n谓语用来查找某个特定的节点或者包含某个指定值的节点，即指定条件。谓语需要用 中括号 嵌套：\r\n\r\n路径表达式             | 结果\r\n:--------------------|:--------------\r\n/bookstore/book[1]   | 选取属于 bookstore 子元素的第一个 book 元素\r\n/bookstore/book[last()] | 选取属于 bookstore 子元素的最后一个 book 元素\r\n/bookstore/book[last()-1] | 选取属于 bookstore 子元素的倒数第二个 book 元素\r\n/bookstore/book[position()<3] | 选取最前面两个属于 bookstore元素的book子元素\r\n//title[@lang]  | 选取所有拥有名为 lang 的属性的 title 元素\r\n//title[@lang='eng'] |    选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性\r\n/bookstore/book[price35.00] | 选取 price元素大于35.00的 bookstore 下的 book 元素\r\n/bookstore/book[price35.00]/title  | 选取 price 元素大于 35.00 的 bookstore 下的 book 元素的所有 title元素\r\n\r\n 选取未知节点\r\nXPath 可以用通配符来选取未知的XML元素\r\n\r\n通配符  | 描述\r\n:------|:-------\r\n\\*     | 匹配任何元素节点\r\n@\\*    | 匹配任何属性节点\r\nnode() | 匹配任何任性的节点\r\n\r\n示例如下：\r\n\r\n路径表达式  | 结果\r\n:----------|:-----------\r\n/bookstore/\\* | 选取 bookstore 元素的所有子元素\r\n//\\*       | 选取文档中所有元素\r\n//title[@\\*]| 选取所有带属性的title 元素\r\n\r\n使用'|' 来选取多个路径\r\n通过在路径表达式中使用 '|' 运算符，可以选取多个路径：\r\n//book/title | //price 选取book元素的所有title子元素和所有 price 元素\r\n\r\n XPath Axes\r\n轴可以定义相对于当前节点的节点集:\r\n\r\n轴名称       | 结果\r\n:-----------|:--------\r\nancestor    | 选取当前节点的所有先辈节点\r\nancestor-or-self | 选取当前节点的所有先辈（父、祖父等）以及当前节点本身\r\nattribute   | 选取当前节点的所有属性\r\nchild       | 选取当前节点的所有子元素\r\ndescendant  | 选取当前节点的所有后代元素\r\ndescendant-or-self | 选取当前节点的所有后代元素（子、孙等）以及当前节点本身。\r\nfollowing   | 选取文档中当前节点的结束标签之后的所有节点\r\nparent      | 选取当前节点的父节点\r\npreceding   | 选取文档中当前节点开始标签之前的所有节点\r\nself        | 选取当前节点\r\n\r\n位置路径表达式\r\n我们通过XPath轴可以很方便的获取子或父元素。XPath 轴可以的使用方式如下：\r\n\r\n路径表达式     | 结果\r\n:------------|:--------------\r\nchild::book  | 选取所有属于当前节点的子元素的book节点\r\nattribute:lang | 选取当前节点的 lang 属性\r\nchild::\\*    | 选取当前节点的所有子元素\r\nattribute::\\*| 选取当前节点的所有属性\r\nchild::text()| 选取当前节点的所有文本子节点\r\nchild::node() | 选取当前节点的所有子节点\r\ndescendant::book | 选取当前节点的所有book后代\r\nancestor::book | 选取当前节点的所有book先辈\r\nancestor-or-self::book| 选取当前节点的所有book先辈及当前节点\r\nchild::\\*/child::price | 选取当前节点的所有 price 孙节点\r\n\r\n XPath 运算符\r\n\r\n运算符   | 描述 | 实例 | 返回值\r\n:------|:-------|:-------|:-------\r\n\\|     | 计算两个节点集 | //book \\| //cd |  返回所有拥有 book 和 cd 元素的节点集\r\n|  加法 | 6 + 4 |  10\r\n| 减法 | 6 - 4 |  2\r\n|乘法 | 6 * 4  | 24\r\ndiv| 除法 | 8 div 4 | 2\r\n=  | 等于 | price=9.80 | 如果 price 是 9.80，则返回 true。\r\n!= | 不等于 | price!=9.80 | 如果 price 是 9.90，则返回 true。\r\n<  | 小于 | price<9.80 |如果 price 是 9.00，则返回 true。\r\n<= | 小于或等于  | price<=9.80 | 如果 price 是 9.00，则返回 true。\r\n\\ |  大于 | price9.80  |如果 price 是 9.90，则返回 true。\r\n\\= |  大于或等于  | price=9.80 | 如果 price 是 9.90，则返回 true\r\nor | 或 |  price=9.80 or price=9.70 | 如果 price 是 9.80，则返回 true; 如果 price 是 9.50，则返回 false。\r\nand | 与 |  price9.00 and price<9.90  | 如果 price 是 9.80，则返回 true; 如果 price 是 8.50，则返回 false。\r\nmod |计算除法的余数| 5 mod 2| 1",
        "tags": []
    },
    {
        "uri": "/post/java/克隆",
        "content": "---\r\ntitle: 克隆\r\ndate: \"2017-11-06 20:00:00\"\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\ndraft: true\r\n---",
        "tags": []
    },
    {
        "uri": "/post/java/单例实现方式",
        "content": "---\r\ntitle: 单例实现方式\r\ndate: 2017-07-30 11:41:43\r\ntags: [\"java\"]\r\ncategories: [\"java\"]\r\n---\r\n\r\n有时候需要采用延迟初始化来降低初始化类和创建对象的开销。双重检查锁定是常见的延时初始化技术。\r\n基于volatile的单例，双锁检测\r\n该方式中，必须使用volatile关键字来声明instance变量。因为对象的初始化代码可能会被重排序，也就是说instance在未初始化完成前，可能已经被其他线程访问。\r\nvolatile标识符可以禁止这种重排序。\r\n!-- more --\r\n`java\r\npublic class Singleton {\r\n    private volatile static Singleton instance;\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            synchronized (Singleton.class) {\r\n                if (instance == null) {\r\n                    instance = new Singleton();\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n`\r\n 基于类的单例\r\n在初次调用Instance.getInstance()时初始化Instance变量，利用语言的线程安全保证静态初始化，不需要额外的同步。\r\n`java\r\npublic class Instance {\r\n    private static class InstanceHolder {\r\n        public static Instance instance = new Instance();\r\n    }\r\n\r\n    public static Instance getInstance() {\r\n        return InstanceHolder.instance;\r\n    }\r\n}\r\n`\r\n\r\n基于枚举类型的懒加载单例\r\n枚举类型使用私有的构造器，能够提供适当的序列化机制。他们也能以线程安全的方式懒初始化。\r\nJVM保证了枚举值不会被多次实例化，这使得单例模式有非常大的防御反射的攻击。\r\n这种方式是实现单例模式的推荐模式。\r\n`java\r\npublic enum EnumSingleton{\r\n    INSTANCE;\r\n\r\n    private EnumSingleton singleton;\r\n    //JVM会保证此方法绝对只调用一次\r\n    Singleton(){\r\n        singleton = new EnumSingleton();\r\n        System.out.println(122);\r\n    }\r\n    public EnumSingleton getInstance(){\r\n        return singleton;\r\n    }\r\n}\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/post/linux/_nginx配置",
        "content": "---\r\ntitle: nginx 配置\r\ndate: 2017-12-21 11:08:00\r\ntags: [\"linux\"]\r\ncategories: [\"linux\"]\r\ndraft: true\r\n---\r\n",
        "tags": []
    },
    {
        "uri": "/post/linux/linux server",
        "content": "---\r\ntitle: linux 网络常用命令\r\ndate: 2017-09-21 12:00:00\r\ntags: [\"other\"]\r\ncategories: [\"other\"]\r\n---\r\nlinux 常用网络命令\r\n ifconfig, ifup, ifdown\r\n这三个指令都是用来启动网络接口的。\r\nifconfig\r\nifconfig主要是可以手动启动、观察与修改网络接口的相关参数。语法如下: \r\n`\r\nifconfig [interface] {up/down}         ## 观察与启动接口\r\nifconfig interface {options}           ## 设定与修改接口\r\n参数说明\r\ninterface:  网卡接口代号，如: eth0, th1, ppp0等\r\noptions:  可以使用的参数: \r\n    up/down:  启动/关闭该网络接口\r\n    mtu :  设定不同的MTU数值（不建议修改）\r\n    netmask:  设置自屏蔽网络\r\n    broadcast:  广播地址\r\n`\r\n在linux机器上执行ifconfig，会返回如下结果\r\n`\r\neth0      Link encap: Ethernet  HWaddr AA: AA: AA: 31: 79: 95  \r\n          inet addr: 10.143.59.167  Bcast: 10.143.63.255  Mask: 255.255.248.0\r\n          UP BROADCAST RUNNING MULTICAST  MTU: 1500  Metric: 1\r\n          RX packets: 69269420 errors: 0 dropped: 0 overruns: 0 frame: 0\r\n          TX packets: 43411105 errors: 0 dropped: 0 overruns: 0 carrier: 0\r\n          collisions: 0 txqueuelen: 1000 \r\n          RX bytes: 159293308457 (148.3 GiB)  TX bytes: 106356430482 (99.0 GiB)\r\n`\r\neth0:  网卡代号\r\nHWaddr:  网卡硬件地址\r\nRX:  网络由启动到目前为止的封包接收情况，packets代表封包数、errors代表封包发生错误的数量、dropped代表封包由于有问题而遭到丢弃的数量\r\nTX:  与RX相反，为网络由启动到目前为止的传送情况\r\ncollisions:  代表封包碰撞情况\r\nRX bytes, TX bytes:  总接收、发送字节总量\r\n修改网络接口\r\n`shell\r\nifconfig eth0 10.134.96.237     系统会依照IP所在的class范围，自动计算netmask、broadcast等IP参数\r\nifconfig eth0 10.134.96.237 netmask 255.255.255.128 mtu 8000  # 修改其他数值\r\n`\r\n如果手动设置错误或者有问题，我们可以通过/etc/init.d/network restart 来重启整个网络接口\r\nifup, ifdown\r\n还可以用配置文件来修改网络参数，执行这两个命令会执行/etc/sysconfig/network-scripts中相应的脚本\r\n\r\nroute\r\nroute可以查看机器使用的路由信息\r\n`bash\r\nroute [-nee]\r\nroute add [-net/host] [网域或主机] netmask [mask] [gw/dev]\r\nroute del  [-net/host] [网域或主机] netmask [mask] [gw/dev]\r\n 参数说明\r\n-n:  直接展示通讯协议或主机名，直接用IP或port number\r\n-ee:  使用更详细的信息显示\r\n增加与删除路由\r\n-nest:  后边接的是路由为一个域名\r\n-host:  后面接的为连接到单部主机的路由\r\nnetmask:  与域名有关，可以设定netmask决定域名的大小\r\ngw:  gateway的简写，后接的是IP\r\ndev:  如果指定哪一块网卡联机出去，设定该值\r\n`\r\n使用route指令字段的含义如下: \r\nDestination, Genmask:  分别是network和netmask\r\nGateway:  表明该机器是通过哪个gateway连接出去的，如果是 0.0.0.0 表示该路由直接是本机传送\r\nIface:  表明是从哪个网卡出去的\r\n`bash\r\n 路由的增加与删除\r\n删除192.168.0.0/16网段，需要将路由表上的信息都写入才能删除\r\nroute del -net 192.168.0.0 netmask 255.255.0.0 dev eth0\r\n 增加预设路由，只有一个就够了\r\nroute add default gw 192.168.1.250\r\n`\r\n当出现Network is unreachable时，可能是gw后边的IP直接连接。\r\n\r\nping\r\nping通过ICMP封包来进行网络状态报告。其使用方式如下: \r\n`bash\r\nping [选项与参数] IP\r\n    -c 数值:  后接ping的次数\r\n    -n:  输出数据时不进行IP与主机的反查，直接用IP输出，速度较快\r\n    -s 数值:  发送出去的ICMP封包大小，预设为56bytes，可以调大\r\n    -t 数值:  TTL的数值，预设是255，每经过一个节点就会减1\r\n    -W 数值:  等待响应时间\r\n 例子\r\nping -c 3 192.168.22.10\r\nPING 192.168.22.10 (192.168.22.10) 56(84) bytes of data.\r\n64 bytes from 192.168.22.10: icmp_seq=1 ttl=59 time=4.40 ms\r\n64 bytes from 192.168.22.10: icmp_seq=2 ttl=59 time=1.40 ms\r\n64 bytes from 192.168.22.10: icmp_seq=3 ttl=59 time=1.12 ms\r\n\r\n--- 192.168.22.10 ping statistics ---\r\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\r\nrtt min/avg/max/mdev = 1.121/2.309/4.405/1.486 ms\r\n`\r\n上例中响应消息中，几个重要的项目是：\r\n64bytes: 表示传送的ICMP封包大小为64bytes，在某些特殊场合中，可以用-s 2000来取代\r\nimcp_seq=1: ICMP所侦测进行的次数，第一次编号为1\r\nttl=59\r\n\r\ntraceroute 两主机间各节点分析\r\ntraceroute用来追踪两部主机之间通过的各个节点通讯状况的好坏。其使用方式如下: \r\n`bash\r\ntraceroute [选项与参数] IP\r\n    -n:  必进行主机的名称解析，单纯用IP，速度较快\r\n    -U:  使用UDP的port 33433 来进行侦测\r\n    -I:  会用 ICMP 的方式 进行侦测\r\n    -w:  若对方主机在几秒钟没有回声，就放弃\r\n    -T:  使用TCP来侦测，因为UDP/ICMP的攻击层出不穷，因此很多路由器可能取消两个封包的响应功能。\r\n\r\n 例子\r\ntraceroute -n -w1 10.152.105.195\r\ntraceroute to 10.152.105.195 (10.152.105.195), 30 hops max, 60 byte packets\r\n 1  10.144.103.252  0.662 ms  0.646 ms  0.741 ms\r\n 2  * * *\r\n 3  * * *\r\n 4  * * *\r\n 5  * * *\r\n 6  10.152.105.195  1.344 ms  1.172 ms  1.042 ms\r\n`\r\n其中 * * * 是因为该节点可能有某些防护措施，让我们发送的封包信息被丢弃\r\n\r\nnetstat 查看本机的网络联机与后门\r\nnetstat可以查看网络接口监听情况\r\n\r\n`bash\r\n 与路由有关的参数\r\nnetstat -[rn]\r\n与网络接口有关的参数\r\nnetstat -[antulpc]\r\n与路由有关的参数：\r\n-r : 列出路由表(route table)，功能如同 route 这个指令；\r\n-n : 不使用主机名与服务名称，使用 IP 与 port number ，如同 route -n\r\n与网络接口有关的参数: \r\n-a : 列出所有的联机状态，包括 tcp/udp/unix socket 等；\r\n-t : 仅列出 TCP 封包的联机；\r\n-u : 仅列出 UDP 封包的联机；\r\n-l : 仅列出有在 Listen (监听) 的服务之网络状态；\r\n-p : 列出 PID 与 Program\r\n-c : 可以设定几秒钟后自动更新一次，例如 -c 5 每五秒更新一次网络状态的显示\r\n 例子\r\nnetstat -an\r\nActive Internet connections (servers and established)\r\nProto Recv-Q Send-Q Local Address               Foreign Address             State      \r\ntcp        0      0 0.0.0.0:9090                0.0.0.0:*                   LISTEN      \r\ntcp        0      0 127.0.0.1:6600              0.0.0.0:*                   LISTEN      \r\ntcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      \r\n显示目前已经启动的网络服务\r\nnetstat -tulnp\r\nActive Internet connections (only servers)\r\nProto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name   \r\ntcp        0      0 0.0.0.0:9090                0.0.0.0:*                   LISTEN      18251/java          \r\ntcp        0      0 127.0.0.1:6600              0.0.0.0:*                   LISTEN      18201/java          \r\ntcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      26249/nginx         \r\ntcp        0      0 0.0.0.0:8080                0.0.0.0:*                   LISTEN      18251/java \r\n 观察本机上头所有的网络联机状态\r\nnetstat -atunp\r\n`\r\n\r\nnetstat的输出主要分为两大部分：TPC/IP的网络接口；传统的Unix socket。输出参数的含义如下：\r\nProto: 联机封包协议，TCP/UDP等\r\nRecv-Q: 非由用户程序连接所复制而来的总bytes数，\r\nSend-Q: 由远程主机所传送而来，但不具有ACK标志的总bytes数，意指主动联机SYNdrome或其他标志的封包所占的bytes数\r\nLocal Address: 本地端的地址和端口号\r\nForeign Address: 远程主机IP与端口\r\nstat: 连接状态\r\n\r\nhost 侦测主机名\r\n\r\n`bash\r\nhost [-a] hostname [server]\r\n-a: 列出该主机详细的各项主机名设定数据\r\n[server]: 可以使用非为 /etc/resolv.con 的DNS服务IP来查询\r\n 例子\r\nhost www.baidu.com\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/post/linux/linux-常用命令",
        "content": "---\r\ntitle: linux 常用命令\r\ndate: 2017-06-17 19:42:25\r\ntags: [\"linux\"]\r\ncategories: [\"linux\"]\r\n---\r\n\r\n使用ubuntu的时候经常会把常用的一些命令忘掉或不知道有些参数的意思，又懒得看那枯燥的文档。因此记录下来备忘。br\r\n!-- more --\r\n\r\n目录类\r\nls: 查看文件与目录\r\n`bash\r\nls [-aAdfFhilnrRSt] 目录或文件\r\nls [--color={never,auto,always}] 目录或文件\r\nls [--full-time] 目录或文件\r\n-a: 列出全部文件，包括隐藏文件\r\n-A: 列出全部文件，包括隐藏文件，但不包括 . 与 .. 两个目录\r\n-d: 仅列出目录，不列出目录内的文件\r\n-f: 直接列出结果，不进行排序 (ls默认会以文件名排序)\r\n-F: 根据文件、目录等信息给予附件数据结构 ( *:代表可执行文件，/: 代表目录，=: 代表socket文件，|: 代表FIFO文件)\r\n-h: 将文件容量以易读的方式列出\r\n-i: 列出inode号码\r\n-l: 列出文件属性权限等\r\n-n: 列出UID与GID，而非用户与用户组名\r\n-r: 将排序结果反向输出\r\n-R: 连同子目录内容一起列出来\r\n-S: 以文件容量大小排序\r\n-t: 以时间排序\r\n-color: never(不要依据文件特性给予颜色显示)，always(显示颜色)，auto(系统判定是否显示颜色)\r\n--full-time: 以完整的时间模式输出 年、月、日、时、分\r\n--time={atime, ctime}: 输出访问时间或改变权限属性时间(ctime)，而非内容更改时间\r\n`\r\ncd: 切换目录\r\n` bash\r\ncd [相对路径或者绝对路径]\r\n回到自己的主文件夹\r\ncd [or cd ~]\r\n回到上层目录\r\ncd ..\r\n回到刚才的目录\r\ncd -\r\n`\r\npwd : 显示当前目录\r\n`bash\r\npwd [-P]\r\n-P:显示当前的路径，而非使用连接路径\r\n`\r\nmkdir : 新建目录\r\n`bash\r\nmkdir [-mp] 目录名称\r\n-m:配置文件夹的权限，忽略默认权限（umask)\r\n-p:递归地创建目录\r\n新建权限为rwx--x--x的目录\r\nmkdir -m 711 dir_name\r\n`\r\n 复制删除移动\r\n复制 cp\r\n`bash\r\n只复制一个文件或文件夹\r\ncp [-adfilprsu] 源文件 目标文件\r\n-a: 相当于 -pdr，看后文\r\n-d：若文件为连接文件，则只复制连接文件的属性\r\n-f: 若目标文件已经存在且无法开启，则删除后再试一次\r\n-i: 若目标文件已存在，覆盖时会先询问是否覆盖\r\n-l: 创建文件的硬链接\r\n-p: 连同文件的属性一起复制，备份常用\r\n-r: 递归复制，用于目录的复制\r\n-s: 创建文件的软连接\r\n-u: 若目标文件比源文件旧才更新目标文件\r\n\r\n复制多个文件到某一文件夹下\r\n$ cp [options] 源文件1 源文件2 ... 目标文件\r\n`\r\n移除文件或目录\r\n`bash\r\nrm [-fir] 文件或目录\r\n-f: 忽略不存在的文件\r\n-i: 删除前再次确认\r\n-r: 递归删除，主要用来删除目录\r\n`\r\n移动文件目录或者更名\r\n`bash\r\nmv [-fiu] 文件或目录 目标文件或目录\r\n-f: 目标文件存在时，不询问直接覆盖\r\n-i: 目标文件存在，询问是否覆盖\r\n-u: 目标文件存在，且较新时，才会更新\r\n`\r\n非纯文本 od\r\n`bash\r\nod [-t TYPE] 文件\r\n-t: 后面可以接各种类型输出：\r\n   a : 利用默认字符输出\r\n   c : 使用ASCII字符输出\r\n   d[size]: 用十进制输出数据，每个整数占用 size bytes\r\n   f[siez]: 用浮点数输出数据，每个整数占用 size bytes\r\n   o[size]: 用八进制来输出数据，每个整数占用 size bytes\r\n   x[size]: 用十六进制来输出数据，每个整数占用 size bytes\r\n`\r\n连接文件 ln\r\n硬连接是将文件对应到同一个inode号码上的连接。硬连接不能跨文件系统，不能连接到目录。符号连接就是windows下的快捷方式。\r\n`bash\r\nln [-sf] 源文件 目标文件(符合连接文件)\r\n    -s: 创建符号连接，而不是硬连接\r\n    -f: 如果目标文件存在，就将目标文件删除后再创建\r\n`\r\n命令与文件查询\r\nwhich：可以查询脚本文件的位置，比如 ifconfig 命令的位置。但是不能够查询bash内置的命令，比如cd\r\n`bash\r\nwhich [-a] command\r\n-a: 列出所有 PATH 目录中包含的命令，没有该参数，只会列出第一个\r\n`\r\nwhereis： 定位命令的二进制，源文件和帮助文件\r\n`bash\r\nwhereis [-bmsu] 文件或目录名\r\n-b : 只找二进制文件\r\n-m : 在menu下查找\r\n-s : 只找源文件\r\n-u : 其他文件\r\n`\r\nlocate： 根据文件名搜索文件，输出所有的文件。因为是从存储文件记录的数据库文件/var/lib/mlocate中读取的，所以速度快。但是数据库文件是定时更新的，所以新增的文件查询不到。可以通过updatedb来更新文件，因为该命令是查找硬盘的，所以执行比较慢。\r\n`bash\r\nlocate [-ir] 文件名\r\n-i: 忽略大小写差异\r\n-r: 可以接正则表达式\r\n`\r\nfind: 在目录下搜索文件，与xargs一起使用，功能强大\r\n`bash\r\nfind [PATH] [option] [action]\r\n 与时间有关的参数有 -atime, -ctime, -mtime, 这三个参数使用方法类似。\r\n-mtime n: 在n天之前的 一天内 被更改过的文件\r\n-mtime +n: 在n天之前（不含n天）被更改过的文件\r\n-mtime -n: 在n天之内（含n天） 被更改过的文件\r\n-newer file: file问一个文件的路径，列出比file新的文件\r\n-newermt time: 比time更新的文件\r\n\r\n-type TYPE: 查找的文件类型，主要有： 一般文件(f), 设备文件(b,c), 目录(d), 连接文件(l), socket(s)等\r\n-perm [+/-]mode: 查找文件权限，刚好等于mode， \"-\" 表示文件权限必须包含 mode， \"+\" 表示文件权限包含任一 mode\r\n\r\n-name filename: 查找文件名为filename的文件， 使用通配符表示文件名时，需要加上 ''\r\n-size [+-]SIZE: 查找比size还要大(+)或小(-)的文件 ,可以是用K\\M\\G\r\n\r\n-exec command: command为命令，该命令可以处理查找结果，不支持别名。\r\nfind / -exec ls -l {}\\;\r\nfind命令会将所有匹配到的文件一起传递给exec执行，但有些系统对能够传递给exec的命令有长度限制，会出现溢出错误。这时候可以使用xargs。\r\nfind . | xargs grep xxx: 查找当前目录下含有x的文件\r\n`\r\n\r\n更改权限\r\n权限分数为： r(read)=4, w(write)=2, x(execute)=1\r\n`bash\r\nchgrp [-R（递归更改)] groupname dirname/filename: 改变文件所属用户组\r\nchown [-R（递归更改)] username[:groupname] dirname/filename：改变文件所有者\r\nchmod [-R（递归更改)] [options] dirname/filename：改变文件所有者\r\nchmod 761 file: 将文件权限更改为 =rwxrw---x\r\nchmod u=rwx,g=rw,o=x file: u(user) g(group) o(others) =(设置) +(增加) -(取消)\r\n`\r\n\r\n 数据流重定向\r\n1 : 以覆盖的方式将正确的数据输出到指定的文件或设备上\r\n1 : 以累加的方式将正确的数据输出到指定的文件或设备上\r\n2 : 以覆盖的方式将错误的数据输出到指定的文件或设备上\r\n2 : 以累加的方式将错误的数据输出到指定的文件或设备上\r\ncommand  list 2&1 ： 将正确信息和错误信息都输入到list文件中\r\ncommand 2 /dev/null : 不保存错误信息\r\n命令执行判断依据： ; && ||\r\ncom1;com2  不考虑命令的相关性，连续执行命令 \r\ncom1&&com2 前一个命令执行正确($?=0)，才执行第二个命令\r\ncom1||com2 前一个命令执行不正确($?!=0)，才执行第二个命令\r\n\r\n\r\n 查看文件内容\r\ncat\r\n`bash\r\ncat [-AbEnTv] 文件\r\n-A: 相当于-vET 的整合，可列出一些特殊字符而不是空白\r\n-b: 列出行号，仅针对非空白行做行号显示\r\n-E: 将结尾的断行字符以 $ 显示出来\r\n-n: 打印行号，连同空白行也会有行号\r\n-T: 将[Tab]以 ^I显示出来\r\n-v: 列出一些看不出来的特殊字符\r\n`\r\n翻页查看more\r\n`bash\r\nmore 文件路径\r\n空格键    向下翻一页\r\nEnter    向下滚动一行\r\n/字符串   在内容中向下查找字符串\r\n:f       显示文件名以及目前显示的行数\r\nq        离开more，不再显示内容\r\nb        向回翻页，只对文件有效\r\n`\r\n翻页查看 less\r\n`bash\r\nless 文件路径\r\n空格键         向下翻一页\r\n[PageDown]    向下翻一页\r\n[PageUp]      向上翻一页\r\n/字符串   在内容中向下查找字符串\r\n?字符串   在内容中向上查找字符串\r\nn        重复前一个查询\r\nN        向上重复前一个查询\r\nq        离开\r\n`\r\n数据选取 head\r\n`bash\r\nhead [-n number] 文件\r\n-n: 接数字，表示显示头几行，默认显示前10行\r\n`\r\n数据选取tail\r\n`bash\r\ntail [-n number] 文件\r\n-n: 表示显示几行\r\n`\r\n另外可以修改 /etc/issue文件来改变终端的提示信息\r\n\r\n压缩\r\nzip\r\n`bash\r\nzip [-AcdDfFghjJKlLmoqrSTuvVwXyz$] [-b 工作目录] [-ll] [-n 字尾字符串] [-t 日期时间] [-压缩效率] [压缩文件名] [待压缩文件...] [-i 范本样式] [-x 范本样式]\r\n-A: 调整可执行的自动解压缩文件。\r\n-b: 工作目录 指定暂时存放文件的目录。\r\n-c: 替每个被压缩的文件加上注释。\r\n-d: 从压缩文件内删除指定的文件\r\n-D: 压缩文件内不建立目录名称。\r\n-F: 尝试修复已损坏的压缩文件。\r\n-g: 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件.\r\n-i 范本样式: 只压缩符合条件的文件。\r\n-x 范本样式: 压缩时排除符合条件的文件。\r\n-X: 不保存额外的文件属性。\r\n-j: 只保存文件名称及其内容，而不存放任何目录名称。\r\n-J: 删除压缩文件前面不必要的数据。\r\n-l: 压缩文件时，把LF字符置换成LF+CR字符。\r\n-ll: 压缩文件时，把LF+CR字符置换成LF字符。\r\n-m: 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中\r\n-n字尾字符串: 不压缩具有特定字尾字符串的文件。\r\n-q: 不显示指令执行过程\r\n-r: 递归处理，将指定目录下的所有文件和子目录一并处理。\r\n-t日期时间: 把压缩文件的日期设成指定的日期\r\n-y: 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。\r\n 示例\r\nzip -r search.zip search/  ## 将search目录打包的zip文件中\r\nzip -r -x *.css search.zip search/ ## 打包search目录，单不包含css文件\r\n`\r\n使用zipsplit分割压缩的zip文件\r\n`bash\r\nzipsplit (选项) (参数)\r\n-n: 指定分割后每个zip文件的大小，是字节大小；\r\n-t: 报告将要产生的较小的zip文件的大小；\r\n-b: 指定分割后的zip文件的存放位置。\r\n`\r\ntar压缩\r\ntar参数中 -x,-c,-t不能同时出现。\r\n`bash\r\n打包\r\ntar [-j|-z] [cv] [-f 新建的文件名] filename/dirname\r\n 查看文件名\r\ntar [-j|-z] [tv] [-f 新建的文件名]\r\n解压\r\ntar [-j|-z] [xv] [-f 新建的文件名] [-C 目录]\r\n-c: 新建打包文件\r\n-t: 查看打包文件的内容有哪些文件名\r\n-x: 解压功能，可以配合 C 解压到特定目录\r\n-j: 通过bzip2来压缩/解压文件，此时文件名最好是 *.tar.bz2\r\n-z: 通过gzip来压缩/解压文件，此时文件名最好是 *.tar.gz\r\n-v: 在压缩/解压的过程中，将处理的文件名显示出来\r\n-f filename: -f后接要处理的文件名\r\n-C: 解压缩时，将文件解压到特定的目录\r\n\r\n-p: 保留备份数据的原本权限与属性，常用于备份重要的配置文件\r\n-P: 保留绝对路径\r\n--exclude=FILE: 在压缩过程中，不打包FILE\r\n\r\n 示例\r\ntar -zcv -f filename.tar.gz 要压缩的文件或目录名 #压缩\r\ntar  -zxv -f filename.tar.gz -C 欲解压的目录  # 解压\r\ntar -jcv -f system.tar.bz2 --exclude=/etc* --exclude=gz* /etc/root\r\n`\r\n\r\n访问网络内容 wget curl\r\nwget 用于从网络上下载资源，若没有指定目录，默认为当前目录\r\n`bash\r\nwget [参数] [url地址]\r\n    -o, –output-file=FILE: 把记录写到FILE文件中\r\n    -a, –append-output=FILE: 把记录追加到FILE文件中\r\n    -d, –debug: 打印调试输出\r\n    -q, –quiet: 安静模式(没有输出)\r\n    -v, –verbose: 冗长模式(这是缺省设置)\r\n    -nv, –non-verbose: 关掉冗长模式，但不是安静模式\r\n    -i, –input-file=FILE: 下载在FILE文件中出现的URLs\r\n    -F, –force-html: 把输入文件当作HTML格式文件对待\r\n    -B, –base=URL: 将URL作为在-F -i参数指定的文件中出现的相对链接的前缀\r\n    –sslcertfile=FILE: 可选客户端证书\r\n    –sslcertkey=KEYFILE: 可选客户端证书的KEYFILE\r\n    –egd-file=FILE: 指定EGD socket的文件名\r\n    -t, –tries=NUMBER 设定最大尝试链接次数(0 表示无限制).\r\n\r\n    -O –output-document=FILE 把文档写到FILE文件中\r\n    -nc, –no-clobber 不要覆盖存在的文件或使用.前缀\r\n    -c, –continue 接着下载没下载完的文件\r\n    –progress=TYPE 设定进程条标记\r\n    -N, –timestamping 不要重新下载文件除非比本地文件新\r\n    -S, –server-response 打印服务器的回应\r\n    –spider 不下载任何东西\r\n    -T, –timeout=SECONDS 设定响应超时的秒数\r\n    -w, –wait=SECONDS 两次尝试之间间隔SECONDS秒\r\n    –waitretry=SECONDS 在重新链接之间等待1…SECONDS秒\r\n    –random-wait 在下载之间等待0…2*WAIT秒\r\n    -Y, –proxy=on/off 打开或关闭代理\r\n    -Q, –quota=NUMBER 设置下载的容量限制\r\n    –limit-rate=RATE 限定下载输率\r\n\r\n    --post-data=\"\" : 通过post方式提交数据\r\n`\r\n\r\n管道命令 | - cut grep sort uniq\r\n每个|后面接的第一个数据必须是能够接受standard input数据的命令，而且管道命令只能处理standard output，对于error output会忽略\r\ncut \r\n`bash\r\ncut –d '分隔符' –f fields\r\n    -d : 后边接分隔符， 与-f一起使用\r\n    -f : 依据-d的分隔符将一段信息切割成为数段，有-f取出第几段的意思\r\nlast | cut –d ' ' –f 1,2\r\n`\r\ngrep 可用正则\r\n`bash\r\ngrep [-cinvP] [--color=auto] '查找字符串(正则)' filename\r\n    -c : 计算找到字符串的次数\r\n    -i : 忽略大小写\r\n    -n : 给出行号\r\n    -v : 反向选择\r\n    -P : 用Perl正则表达式来匹配\r\ngrep -–color=auto 'manpath' /etc/man.config\r\n`\r\nsort 排序命令\r\n`bash\r\nsort [-fbMnrtuk] [file or stdin]\r\n    -f: 忽略大小写\r\n    -b: 忽略最前面的空格\r\n    -M: 以月份的名字排序\r\n    -n: 使用“纯数字”进行排序（默认是文字类型）\r\n    -r: 反向排序\r\n    -u: 同umiq\r\n    -t: 分隔符，默认是[tab]分割\r\n    -k: 以哪个区间来进行排序\r\n`\r\nuniq 计数\r\n`bash\r\nuniq [-ic]\r\n    -i: 忽略大小写字符的不同 \r\n    -c: 进行计数\r\n`\r\n\r\n 时间\r\ndate命令能够通过date +Format设置输出格式\r\n`bash\r\ndate +Format\r\n    %Y : 年份\r\n    %y : 年份的最后两位\r\n    %d : 按月计的日期(例如：01)\r\n    %D : 按月计的日期；等于%m/%d/%y\r\n    %H : 小时(00-23)\r\n    %I : 小时(00-12)\r\n    %m : 月份\r\n    %M : 分钟\r\n    %S : 秒(00-60)\r\ndate +%Y%m%d%H%M%S   = 20170617194225\r\n输出时间 是一小时前的时间\r\ndate -d'-1 hour' +%F' ' %T  \r\n`\r\n通过 date -s 设置时间\r\n`bash\r\ndate -s 06/17/2017\r\ndate -s 19:42:25\r\n`\r\n\r\n 磁盘与目录容量\r\ndf : 列出文件系统的整体磁盘使用量\r\n`shell\r\ndf [-ahikHTm] [目录或文件名]\r\n    -a : 列出所有文件系统，包括系统特有的/proc等文件系统\r\n    -h : 以人们较易阅读的GB、MB、KB等格式显示\r\n    -i : 不用硬盘容量，而以inode的数量来显示\r\n    -k/m : 以MB/KB的容量显示文件系统\r\n`\r\ndu : 评估文件系统的磁盘使用量\r\n`shell\r\ndu [-ahskm] 文件或目录名称\r\n    -a : 列出所有的文件与目录的容量，因为默认仅统计目录下面的文件量，不能同 s 一起使用\r\n    -h : 以较易阅读的格式显示\r\n    -s : 列出总量，不列出每个个别的目录占用量\r\n    -S : 尚不理解\r\n    -k/m : 以MB/KB的容量显示文件系统\r\n`\r\n\r\nlsof (list open files)\r\n在linux下，任何事物都以文件的形式存在，通过文件不仅可以访问常规数据，还可以访问网络连接和硬件。如TCP和UDP套接字等。系统在后台都为该应用程序分配了一个文件描述符，该文件描述符提供了大量关于这个应用程序本身的信息。\r\n`bash\r\nlsof\r\n    -a : 列出打开文件存在的进程\r\n    -c进程名: 列出指定进程所打开的文件\r\n    -g : 列出GID号进程详情\r\n    -d文件号 : 列出占用该文件号的进程\r\n    +d目录 : 列出目录下被打开的文件\r\n    +D目录 : 递归列出目录下被打开的文件\r\n    -n目录 : 列出使用NFS的文件\r\n    -i条件 : 列出符合条件的进程。（4、6、协议、:端口、 @ip ）\r\n    -p进程号 : 列出指定进程号所打开的文件\r\n    -u : 列出UID号进程详情\r\n    -h : 显示帮助信息\r\n    -v : 显示版本信息\r\n`\r\n\r\n 远程同步命令\r\nrsync命令\r\nrsync命令是用来远程同步数据的，可以通过LAN/WAN快速同步多台机器间的文件。rsync通过自己的算法来比较本地和远程文件的不同部分，而不是每次都整份传送，所以速度比scp快。\r\n:表明是通过远程shell连接，而:: 和 rsync:// 用于连接到rsync守护进程，它需要 src 或 dest 以模块名称开头\r\n`bash\r\n 拷贝本地文件\r\nrsync [options] src dest\r\n使用一个远程shell程序将本地机器的内容拷贝到远程机器\r\nrsync [options] src [user@]host:dest\r\n 使用一个远程shell将远程机器拷贝到本地机器\r\nrsync [options] [user@]host:src dest\r\n从远程rsync服务器中拷贝文件到本地机器\r\nrsync [options] [user@]host::src dest\r\n 从本地机器拷贝文件到远程rsync服务器中\r\nrsync [options] src [user@]host::dest\r\n列远程机器的文件列表，类似rsync传输，不过需要在命令中省略本地机器\r\nrsync [options] rsync://[user@]host[:port]/src [dest]\r\n\r\n 参数\r\n-v, --verbose: 详细模式输出\r\n-q, --quiet: 精简模式输出\r\n-c, --checksum: 打开校验开关\r\n-a, --archive: 归档模式，表示以递归方式传输文件，并保持所有文件属性，相当于 -rlptgoD\r\n-r, --recursive: 对子目录以递归模式处理\r\n-R, --relative: 使用相对路径信息\r\n-b, --backup: 创建备份\r\n    --backup-dir=DIR 将备份文件放到 DIR 中\r\n    --suffix=SUFFIX: 定义备份文件前缀\r\n-u, --update: 跳过接收机器上较新的文件\r\n-d, --dirs: 不会递归地传输目录\r\n-l, --link: 保留软连接\r\n-k, --copy-dirlinks: 将符号链接转换为指定目录\r\n-K, --keep-dirlinks: 将符号链接作为一个递归的目录\r\n-H, --hard-links: 保留硬链接\r\n-p, --perms: 保持文件权限\r\n-o, --owner: 保持文件属主信息\r\n-g, --group: 保持文件属组信息。 \r\n-D, --devices: 保持设备文件信息\r\n* -t, --times: 保持文件时间信息  *\r\n-S, --sparse: 对稀疏文件进行特殊处理以节省DST的空间\r\n-w, --whole-file: 拷贝文件，不进行增量检测 \r\n-x, --one-file-system: 不要跨越文件系统边界\r\n-B, --block-size=SIZE: 检验算法使用的块尺寸，默认是700字节\r\n-e, --rsh=command: 指定使用rsh、ssh方式进行数据同步\r\n    --rsync-path=PATH: 指定远程服务器上的rsync命令所在路径信息\r\n    --existing: 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件\r\n    --delete: 删除那些DST中SRC没有的文件\r\n    --delete-excluded: 同样删除接收端那些被该选项指定排除的文件\r\n    --delete-after: 传输结束以后再删除\r\n    --ignore-errors: 即使出现IO错误也进行删除\r\n    --max-delete=NUM: 最多删除NUM个文件\r\n-C, --cvs-exclude: 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件\r\n-P, --partial: 保留那些因故没有完全传输的文件，以是加快随后的再次传输\r\n--force: 强制删除目录，即使不为空\r\n--numeric-ids: 不将数字的用户和组id匹配为用户名和组名\r\n--timeout=time: ip超时时间，单位为秒\r\n-I, --ignore-times: 不跳过那些有同样的时间和长度的文件\r\n--size-only: 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间\r\n--modify-window=NUM: 决定文件是否时间相同时使用的时间戳窗口，默认为0\r\n-T --temp-dir=DIR: 在DIR中创建临时文件\r\n--compare-dest=DIR: 同样比较DIR中的文件来决定是否需要备份。\r\n--progress: 显示备份过程\r\n-z, --compress: 对备份的文件在传输时进行压缩处理\r\n    --exclude=PATTERN: 指定排除不需要传输的文件模式\r\n    --include=PATTERN: 指定不排除而需要传输的文件模式\r\n    --exclude-from=FILE: 排除FILE中指定模式的文件\r\n    --include-from=FILE: 不排除FILE指定模式匹配的文件\r\n    --version: 打印版本信息\r\n    --address: 绑定到特定的地址\r\n    --config=FILE: 指定其他的配置文件，不使用默认的rsyncd.conf文件\r\n    --port=PORT: 指定其他的rsync服务端口\r\n    --blocking-io: 对远程shell使用阻塞IO\r\n    -stats: 给出某些文件的传输状态\r\n    --progress: 在传输时现实传输过程\r\n    --password-file=FILE: 从FILE中得到密码\r\n-i, --itemize-changes: 输出所有更新的更改摘要\r\n     --out-format=FORMAT     使用指定的FORMAT输出\r\n     --log-file=FILE         将rsync做的操作记录到FILE中\r\n     --list-only             只列出文件，而不拷贝\r\n     --bwlimit=KBPS          限制I/O带宽，KBytes per second\r\n-h, --help: 显示帮助信息。\r\n`\r\n示例：\r\n`bash\r\nrsync -azi machine::user/path/dir/ /search/odin/ --exclude '_log'\r\n`\r\n\r\n定时任务\r\n在linux上，使用 crontab 来创建循环性工作调度。当然为了安全，可以通过/etc/cron.allow和/etc/cron.deny来限制用户使用 crontab。\r\n当用户是用crontab来新建工作调度时，该项工作就会被记录到 /var/spool/cron 中，而且是以用户的账户来作为判别的。一般来说，不建议直接编辑/var/spool/cron中的文件，因为可能会由于输入语法错误，而导致 cron 不能正确执行。\r\n`bash\r\ncrontab [-u username] [-l|-e|-r]\r\n-u: 只有root才能使用这个参数，可以用其他用户的名义新建/删除 crontab 任务 \r\n-l: 查看 crontab 的内容\r\n-e: 编辑 crontab 的内容\r\n-r: 删除所有的 crontab 的工作内容\r\n\r\n 示例\r\n使用 crontab -e 进入到任务编辑页面\r\ncrontab -e  \r\n 0  1  *  *  * shell exec.sh\r\n分 时 日 月 周   执行内容\r\n`\r\n只要通过 :wq 或者 :x，保存退出后，任务就自动定时执行。\r\n配置时间方式如下表所示\r\n\r\n分 | 时 | 日期 | 月 | 周 | 命令\r\n:--|:--|:----|:---|:---|:---\r\n0-59| 0-23| 1-31|1-12|0-7| command\r\n\r\n“周”的0和7都是代表星期日的意思。还有一些辅助字符，如下：\r\n\r\n特殊字符 | 代表意义\r\n:-------| :--------\r\n\\* (星号) | 代表任何时刻都接受，上例中，表示无论日月周是什么，知道是1点钟，就执行命令\r\n, (逗号)  | 代表分隔时段的意思。如要执行任务的时间是 3:00 和 6:00, 那么配置是： 0 3,6 * * * command\r\n\\- (减号)  | 代表一段时间范围内。8点到12点的每小时的20分钟执行任务，那么配置是： 20 8-12 * * * command\r\n/n        | n是数字，即每隔 n 单位的时间间隔执行命令。例如每五分钟执行一次： */5 * * * * command \r\n\r\ncontab -e 是针对用户的 cron 来设计的，如果是系统例行性任务，可以直接编辑 /etc/crontab 这个文件。 /etc/crontab 是一个纯文本文件，可以用root账号编辑。\r\ncron 服务最低的检测限制是“分钟”，所以cron 会每分钟去读取一次 /etc/crontab 与 /var/spool/cron 中的数据，所以，只要编辑并保存这些文件，就会生效。如果不生效，可以使用 /etc/init.d/crondrestart 来重启 cron 服务。\r\n\r\nbash环境中的特殊符号\r\nbash环境中，有些符号是有特殊意义的：\r\n\r\n符号   | 意义\r\n:-----|:----\r\n \\    | 注释符号，最常用于script中\r\n \\\\    | 转义符号，之后跟的特殊符号作为一般符号处理\r\n \\|   | 管道，分割两个管道命令\r\n ;    | 连续命令执行分隔符\r\n ~    | 用户的主文件夹\r\n $    | 使用变量前导符号\r\n &    | 将命令在后台运行\r\n /    | 目录符号\r\n\\ , | 数据流重定向，输出导向\r\n<, << | 数据流重定向， 输入导向\r\n''    | 单引号，不具有变量置换的功能\r\n\"\"    | 双引号，具有变量置换的功能，其中的变量会用其值替换\r\n\\\\    | 两个 \\` 中间为可以先执行的命令，也可以使用 $()\r\n()     | 中间为子shell的起始与结束\r\n{ }    | 中间为命令块的组合\r\n\r\n进程查看\r\n我们使用 ps top 和 pstree 来查看进程的运行情况。\r\n ps : 将某个时间点的进程运行情况选取下来\r\n一般 ps 有两种用法： ps -l 仅查看自己的bash相关的进程； ps aux 查看所有系统运行的程序。语法如下：\r\n`bash\r\nps [options]\r\n -A: 所有的进程均显示出来\r\n -a: 与 terminal 无关的所有进程\r\n -u: 有效用户相关的进程\r\n x: 通常与 a 一起使用，可得到较为完整的信息\r\n\r\n l: 较详细地将PID的信息列出\r\n j: 工作的格式\r\n -f: 做一个更完整的输出\r\n\r\n示例\r\nps aux\r\n USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot         1  0.0  0.0  10352   680 ?        Ss    2015  18:00 init [3]                             \r\nroot         2  0.0  0.0      0     0 ?        S<    2015   1:40 [migration/0]\r\nroot         3  0.0  0.0      0     0 ?        SN    2015   0:50 [ksoftirqd/0]\r\nroot         4  0.0  0.0      0     0 ?        S<    2015   0:00 [watchdog/0]\r\n`\r\n\r\nps aux 结果中，各字段的意义为：\r\n\r\n字段名        | 字段含义\r\n:------------| :----------------\r\nUSER         | 该进程属于哪个用户账号\r\nPID          | 该进程的标志符\r\n%CPU         | 该进程使用的CPU资源的百分比\r\n%MEM         | 该进程所占用的物理内存百分比\r\nVSZ          | 该进程使用的虚拟内存量\r\nRSS          | 该进程占用的固定内容量\r\nTTY          | 该进程是在哪个终端机上运行，若与终端无关则显示 ?；若为 pts/0 表示由网络连接的主机进程\r\nSTAT         | 该进程目前的状态。R(正在运行), S(可唤醒的睡眠状态), D(不可唤醒的睡眠状态，通常为等待I/O), T(停止状态), Z(僵尸状态，进程已经终止但无法删除)\r\nSTART        | 该进程启动的时间\r\nTIME         | 该进程使用CPU运行时间\r\nCOMMAND      | 该进程是哪个命令产生的\r\n\r\n top 动态查看进程的变化\r\ntop 命令可以持续检测程序的运行状态，使用方式如下：\r\n\r\n`bash\r\ntop [-d 数字] | top [-bnp]\r\n参数如下：\r\n-d: 后面可以接秒数，就是整个进程界面更新的秒数，默认是 5s\r\n-b: 以批次的方式执行top，通常会结合数据流重定向来批处理结果\r\n-n: 与 -b 搭配，表示需要进行几次 top 结果的数据\r\n-p: 指定某些PID来进行查看\r\n-H: 显示线程\r\n在top命令中，可以使用如下按键命令：\r\n   ?: 显示在top当中可以输入的按键指令\r\n   P: 以 CPU 的使用资源排序显示\r\n   M: 以内存的使用资源排序显示\r\n   N: 以PID来排序\r\n   T: 该进程使用的CPU时间累积排序\r\n   k: 给予某个PID一个信号\r\n   r: 给某个PID重新定制一个nice属性\r\n   q: 离开top\r\n`\r\n\r\npstree 查看进程树\r\n`bash\r\npstree [-A|U] [-up]\r\n参数：\r\n-A: 各进程树之间的连接\r\n-U: 各进程树之间的连接以utf8码的字符来连接\r\n-p: 列出每个进程的PID\r\n-u: 列出每个进程的账号\r\n示例：\r\n\r\ninit(1)-+-agetty(2112)\r\n        |-crond(2071)---crond(13076)---sh(13084)---sleep(13112)\r\n        |-events/0(8)\r\n        |-events/1(9)\r\n        |-glusterfs(19972)-+-{glusterfs}(19973)\r\n        |                  \\`-{glusterfs}(19982)\r\n        |-httpd(1988)-+-httpd(884,apache)\r\n`\r\n\r\n kill 进程管理\r\n我们可以使用 kill 或者 killall 来向进程发送信号。使用如下：\r\n`bash\r\nkill -signal PID\r\nkillall [-iIe] -signal 命令名称\r\n参数: \r\n-i: interactive ，交互式的，若需要删除，会出现提示\r\n-e: exact，表示后边接的 命令名称 要一致，但完整的命令不能超过15个字符\r\n-I: 命令名称（可能含有参数），忽略大小写\r\n`\r\n\r\n其中常用的 signal 有：\r\n\r\n代号  | 名称  | 含义\r\n:----|:------|:-----\r\n1    | SIGHUP| 启动被终止的进程，可以让该PID重新读取自己的配置，类似重启\r\n2    | SIGINT| 相当于使用键盘的 ctrl+c 来中断一个进程\r\n9    | SIGKILL| 代表强行中断一个进程的运行，如果进程执行到一半，尚未完成的部分不会被处理\r\n15   | SIGTERM| 正常结束进程的执行。后续操作完成后，才终止\r\n17   | SIGSTOP| 相当于使用键盘的 ctrl+z 来暂停一个进程的执行\r\n\r\n`bash\r\n关闭特定的进程\r\nkill -SIGHUP $(ps aux | grep 'syslog' | grep -v 'grep' | awk '{print $2}')\r\n\r\n 关闭一个命令开启的所有进程\r\nkillall -i -9 bash\r\n`\r\n\r\n\r\n\r\n其他快捷方式\r\n使用快捷键 ctrl+r 可以快速使用历史命令",
        "tags": []
    },
    {
        "uri": "/post/linux/linux-忘记root密码",
        "content": "---\r\ntitle: linux 忘记root密码\r\ndate: 2015-08-03 09:19:14\r\ntags: [\"linux\"]\r\ncategories: [\"linux\"]\r\n---\r\n\r\n如果忘记了linux的root密码, 有两种比较通用的方式来修改\r\n\r\n使用grub\r\n重启系统\r\n进入grub菜单： 在启动时，点击e进入详细设置；将光标移动到kernel上点击e进入编辑页面，输入如下指令，回车之后，按b就可以进入单用户维护模式\r\n`bash\r\ngrub edit kernel /vmlinuz-2.6.18-92.el5 ro root=LABEL=/ rhgb quiet strongsingle/strong\r\n`\r\n进入单用户维护模式后，系统会以root的权限直接给你一个shell，此时执行 passwd 就可以修改root密码了。\r\n!-- more --\r\n 使用具有sudo权限的用户修改root密码\r\n执行如下命令，输入用户密码后就可以修改密码了\r\n`bash\r\n$sudo passwd root\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/post/linux/nginx配置双向认证 并通过java访问",
        "content": "---\r\ntitle: nginx配置双向认证 并通过java访问\r\ndate: 2017-06-18 19:42:25\r\ntags: [\"linux\"]\r\ncategories: [\"linux\"]\r\n---\r\n\r\n最近项目开发中的接口要使用双向认证，因为搭建服务器的方式是nginx+resin，而java的keytool配置nginx的双向认证时，并不好用。所以使用了openssl来生成证书。\r\n安装openssl\r\n部分linux系统上已经默认安装了openssl，可以使用openssl version来查看机器上是否安装了openssl。如果没有安装，可以执行 yum install nginx openssl -y 安装\r\n\r\n 使用脚本生成证书\r\n每次使用命令行安装都是一个巨大的考验，尤其是在输入各种信息的时候。输入错误就要Crtl+c重新来过。因此，将安装过程写成一个脚本，方便安装。\r\n!-- more --\r\n在nginx的conf目录下新建一个文件夹：mkdir openssl && cd openssl \r\n将shell脚本和下面的配置文件拷贝到openssl目录下，可以根据自己修改sheel脚本中的SUBJECT和CA；\r\n脚本执行过程中需要输入证书的域名，如果机器没有域名，那么输入ip。如果证书的ip或者域名与输入的内容不一致，是用java访问时，会报错\r\njavax.net.ssl.SSLPeerUnverifiedException: Certificate for .*..* doesn't match any of the subject alternative names: []；\r\n需要输入两种密码，第一种是server.key的密码，第二种是client.key的密码，改密码要在是用证书时用到，需要记住。\r\n\r\n`bash\r\n!/bin/sh\r\n create self-signed server certificate:\r\nread -p \"请输入证书的域 例如[www.example.com or 192.168.1.52]: \" DOMAIN\r\nmkdir newcerts private conf server\r\n根据自己的需求，来更改这些内容\r\nSUBJECT=\"/C=CN/ST=BJ/L=BJ/O=company/OU=company/CN=$DOMAIN\"\r\nCA=\"/C=CN/ST=BJ/L=BJ/O=company/OU=company/CN=$DOMAIN\"\r\n\r\necho \"创建 CA 根证书...\"\r\necho \"生成私钥 key 文件...\"\r\nopenssl genrsa -out private/ca.key 2048  \r\necho \"生成证书请求 csr 文件...\"\r\nopenssl req -new -subj $CA -key private/ca.key -out private/ca.csr \r\n\r\necho \"生成凭证 crt 文件...\"\r\nopenssl x509 -req -days 365 -in private/ca.csr -signkey private/ca.key -out private/ca.crt  \r\n\r\necho \"为我们的 key 设置起始序列号和创建 CA 键库...\"\r\n\r\nrm -rf serial index.txt\r\necho FACE  serial\r\ntouch index.txt\r\n\r\necho \"服务器证书的生成...\"\r\nopenssl genrsa -out server/server.key 2048 \r\nopenssl req -new -subj $SUBJECT -key server/server.key -out server/server.csr  \r\n\r\necho \"使用我们私有的 CA key 为刚才的 key 签名...\"\r\nopenssl ca -in server/server.csr -cert private/ca.crt -keyfile private/ca.key -out server/server.crt -config \"./openssl.conf\" \r\n\r\necho \"客户端证书的生成 * 创建存放 key 的目录 users...\"\r\nmkdir users  \r\necho \" 为用户创建一个 key...\"\r\nopenssl genrsa -des3 -out ./users/client.key 2048 \r\n\r\necho \"为 key 创建一个证书签名请求 csr 文件...\"\r\nopenssl req -new -subj $SUBJECT -key ./users/client.key -out ./users/client.csr  \r\n\r\necho \"使用我们私有的 CA key 为刚才的 key 签名...\"\r\nopenssl ca -in ./users/client.csr -cert ./private/ca.crt -keyfile ./private/ca.key -out ./users/client.crt -config \"./openssl.conf\" \r\n\r\necho \"将证书转换为大多数浏览器都能识别的 PKCS12 文件...\"\r\nopenssl pkcs12 -export -clcerts -in ./users/client.crt -inkey ./users/client.key -out ./users/client.p12  \r\n\r\necho \"把以上生成的文件copy到nginx conf文件的ssl目录下面，如果ssl目录不存在请创建\"\r\necho \"接下请配置nginx.conf操作:\"\r\necho \" server {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\r\necho \" \t\t\t...                                           \"\r\necho \"     ssl on;                                        \"\r\necho \"     ssl_certificate ca/server/server.crt;                \"\r\necho \"     sslcertificatekey ca/server/server.key;            \"\r\necho \"     sslclientcertificate ca/private/ca.crt;             \"\r\necho \"     sslverifyclient on;                          \"\r\necho \"\t\t\t...                                           \"\r\necho \"     }                                               \"\r\necho \"使用如下命令重新加载nginx配置\"\r\necho \"nginx -s reload\"\r\necho \"客户端使用： users/client.p12 和 private/ca.crt\"\r\n\r\n`\r\n在相同的目录下放置如下配置，命名为openssl.conf：\r\n`conf\r\n[ ca ] \r\ndefault_ca      = foo                    The default ca section \r\n\r\n[ foo ] \r\ndir            = ./         # top dir  \r\ndatabase       = ./index.txt          # index file.  \r\nnewcertsdir  = ./newcerts           # new certs dir \r\n\r\ncertificate    = ./private/ca.crt         # The CA cert  \r\nserial         = ./serial             # serial no file  \r\nprivate_key    = ./private/ca.key  # CA private key  \r\nRANDFILE       = ./private/.rand      # random number file \r\n\r\ndefault_days   = 365                     # how long to certify for  \r\ndefaultcrldays= 30                     # how long before next CRL  \r\ndefault_md     = sha1                     # message digest method to use  \r\nunique_subject = no                      # Set to 'no' to allow creation of  \r\n                                         # several ctificates with same subject. \r\npolicy         = policy_any              # default policy \r\n\r\n[ policy_any ] \r\ncountryName = match  \r\nstateOrProvinceName = match  \r\norganizationName = match  \r\norganizationalUnitName = match  \r\nlocalityName            = optional  \r\ncommonName              = supplied  \r\nemailAddress            = optional\r\n`\r\n配置nginx\r\n修改nginx的配置文件，在server配置如下信息\r\n`bash\r\nssl_certificate /path/to/openssl/server/server.crt;\r\n\r\nsslcertificatekey /path/to/openssl/server/server.key;\r\n\r\nsslclientcertificate  /path/to/openssl/private/ca.crt;\r\n\r\nsslverifyclient on;     开启客户端的验证\r\n\r\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\r\n\r\n`\r\n是用chrome浏览器访问\r\n修改完成后，如果不配置证书，在浏览器中是不能访问的。报错： 400 Bad Request No required SSL certificate was sent\r\n安装两个文件： client.p12和ca.crt，之后能够正常访问\r\n\r\n\r\n 使用java完成双向认证\r\n将生成的证书： users/client.p12 和 private/ca.crt 拷贝出来。用java做双向认证时，会使用到这两个文件。\r\njava 双向认证的代码如下：\r\n`bash\r\nprivate final static String P12_PATH = \"client.p12\";   //客户端证书路径\r\nprivate final static String P12_PWD = \"12345678\"; //客户端证书密码\r\nprivate final static String CA_PATH = \"ca.crt\";   // 根证书路径\r\n\r\npublic static String sslRequestGet(String url) throws Exception {\r\n    SSLContext ctx = getSSLContext(P12PATH, CAPATH);\r\n    LayeredConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(ctx);\r\n    HttpGet httpget = new HttpGet(url);\r\n    try (CloseableHttpClient httpClient = HttpClients.custom()\r\n            .setSSLSocketFactory(sslSocketFactory)\r\n            .build();CloseableHttpResponse response = httpClient.execute(httpget) ) {\r\n        HttpEntity entity = response.getEntity();\r\n        String jsonStr = EntityUtils.toString(response.getEntity(), \"UTF-8\");//返回结果\r\n        EntityUtils.consume(entity);\r\n        return jsonStr;\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return \"\";\r\n}\r\n/* 加载客户端验证证书 */\r\nprivate static SSLContext getSSLContext(String keyStorePath, String trustStorePath) throws NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException, IOException, CertificateException, KeyManagementException {\r\n    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n    KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    InputStream is = new FileInputStream(keyStorePath);\r\n    keyStore.load(is, P12_PWD.toCharArray());\r\n    is.close();\r\n    keyManagerFactory.init(keyStore, P12_PWD.toCharArray());\r\n    SSLContext ctx = SSLContext.getInstance(\"TLS\");\r\n    ctx.init(keyManagerFactory.getKeyManagers(), getTrustManagers(trustStorePath) , null);\r\n    return ctx;\r\n}\r\n/* 加载信任证书 */\r\nprivate static TrustManager [] getTrustManagers (String ... crtPath) throws IOException, CertificateException, KeyStoreException, NoSuchAlgorithmException {\r\n    if (crtPath == null || crtPath.length < 1) {\r\n        return null;\r\n    }\r\n    CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X.509\");\r\n    KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    keyStore.load(null);\r\n    for (int i=0, j=crtPath.length; i<j; i++) {\r\n        String path = crtPath[i];\r\n        InputStream is = new FileInputStream(path);\r\n        keyStore.setCertificateEntry(Integer.toString(i), certificateFactory.generateCertificate(is));\r\n        is.close();\r\n    }\r\n    TrustManagerFactory trustManagerFactory =TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\r\n    trustManagerFactory.init(keyStore);\r\n    return trustManagerFactory.getTrustManagers();\r\n}\r\n`\r\n\r\n在VM options中添加执行参数： -Djavax.net.debug=all   -Djavax.net.ssl.trustStore=trustStore 可以将双向认证的过程，在debug信息中打印出来\r\n\r\n\r\n参考网站\r\nNginx SSL 双向认证，key 生成和配置",
        "tags": []
    },
    {
        "uri": "/post/linux/resin 配置",
        "content": "---\r\ntitle : \"resin 配置\"\r\ndate: 2017-06-17 19:42:25\r\ntags: [\"linux\"]\r\ncategories: [\"linux\"]\r\n---\r\n\r\nresin 配置\r\n resin 配置日志信息\r\n`xml\r\n<log-handler name=\"\" level=\"info\" path=\"stdout:\"\r\n               timestamp=\"[%y-%m-%d %H:%M:%S.%s] {%{thread}} \"/\r\nstdout-log path-format=\"log/stdout.log.%Y%m%d\" rollover-period=\"1D\"/\r\nstderr-log path-format=\"log/stderr.log.%Y%m%d\" rollover-period=\"1D\"/\r\n\r\n<!--\r\n level='info' for production\r\n 'fine' or 'finer' for development and troubleshooting\r\n--\r\nlogger name=\"com.caucho\" level=\"info\"/\r\n\r\nlogger name=\"com.caucho.java\" level=\"config\"/\r\nlogger name=\"com.caucho.loader\" level=\"config\"/\r\n`\r\nstdout-log中的path-format设置了正常输出日志的路径和日志文件命名格式；rollover-period设置了日志文件生成时间间隔。 1D是一天，1H是一个小时。\r\n!-- more --\r\n`\r\ncluster id=\"app\"\r\n    !-- sets the content root for the cluster, relative to resin.root --\r\n    root-directory./root-directory\r\n\r\n    !-- defaults for each server, i.e. JVM --\r\n    server-default\r\n      !-- The http port --\r\n      http id=\"\" address=\"*\" port=\"9090\"/\r\n    /server-default\r\n\r\n    !-- define the servers in the cluster --\r\n    server id=\"web\" address=\"127.0.0.1\" port=\"6801\"/\r\n\r\n    !-- the default host, matching any host name --\r\n    host id=\"\" root-directory=\".\"\r\n      <!--\r\n         configures an explicit root web-app matching the\r\n         webapp's ROOT\r\n        --\r\n\tweb-app id=\"/\" root-directory=\"/search/odin/resin/umiswxb\"/      \r\n      <!--\r\n         Administration application /resin-admin\r\n        --\r\n      <!--\r\n      web-app id=\"/resin-admin\" root-directory=\"${resin.root}/doc/admin\"\r\n        prologue\r\n          resin:set var=\"resinadminexternal\" value=\"false\"/\r\n          resin:set var=\"resinadmininsecure\" value=\"true\"/\r\n        /prologue\r\n      /web-app\r\n        --\r\n      <!--\r\n\t Resin documentation - remove for a live site\r\n\t--\r\n      !--<web-app id=\"/resin-doc\" root-directory=\"${resin.root}/doc/resin-doc\"/--\r\n\r\n      <!--\r\n\t resin:LoadBalance regexp=\"^/load\" cluster=\"backend-tier\"/\r\n\t resin:HttpProxy regexp=\"^/http\" address=\"localhost:9000\"/\r\n\t resin:FastCgiProxy regexp=\"^/fcgi\" address=\"localhost:9001\"/\r\n\t--\r\n    /host\r\n  /cluster\r\n`\r\ncluster可以配置不同的服务，id属性是其服务唯一的标记\r\nserver-default中的http的port配置了该服务监听的端口，web-app的id属性定义了服务的访问路径，root-directory定义了服务代码放置的位置。\r\n\r\n配置远程调试端口\r\n\r\n在 resin3.1下的版本中，修改 bin/httpd.sh 文件中的配置\r\n`\r\nargs=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8787\"\r\n`\r\n在 resin3.1 以上的版本中，修改 conf/resin.properties 文件\r\n`\r\njvmargs  :  -Xdebug -Xrunjdwp:transport=dtsocket,server=y,suspend=n,address=9090  \r\n`\r\n或者修改 resin.xml 文件，在 server-default 标签下，添加\r\n`xml\r\njvm-arg-Xdebug/jvm-arg\r\njvm-arg-Xrunjdwp:transport=dt_socket,address=9988,server=y,suspend=n/jvm-arg\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/post/linux/shell",
        "content": "---\r\ntitle: shell 编程\r\ndate: 2017-08-19 09:52:00\r\ntags: [\"linux\"]\r\ncategories: [\"linux\", \"编程\"]\r\n---\r\n\r\nshell script虽然是程序，但是它处理数据的速度是不够的。因为shell用的是外部的命令bash shell的一些默认工具，所以它经常会调用外部的函数库。\r\nshell 经常被用来管理系统，而不是处理数据。\r\n!-- more --\r\nshell程序执行\r\n有两种方式可以执行shell脚本：\r\n直接命令执行：这种方式要求文件有rx权限\r\n   绝对路径 /home/user/shell.sh\r\n   相对路径 ./shell.sh\r\n   放到PATH路径下，直接执行 shell.sh\r\n通过bash shell.sh或者 sh shell.sh来执行\r\n shell基本说明\r\n`shell\r\n!/bin/bash\r\n Program: shell脚本用途说明\r\n修改时间，作者相关信息\r\nread -p \"name: \" name\r\necho -e \"\\nname is $name\"\r\n`\r\nshell 脚本通常以!/bin/bash 开头，来声明这个文件使用bash语法。在文件执行时，能够加载bash的相关环境配置文件\r\ntest测试命令\r\ntest命令经常用来检测文件或者是其相关属性\r\n 检测文件类型  test -e filename\r\n测试标志      | 代表含义\r\n:-------------|:------------------\r\n-e            | 该文件名是否存在\r\n-f            | 该文件名是否存在且为文件\r\n-d            | 该文件名是否存在且为目录\r\n-L            | 该文件名是否存在且为一个连接文件\r\n\r\n检测文件权限 test -r filename\r\n\r\n测试标志      | 代表含义\r\n:-------------|:------------------\r\n-r            | 检测文件名是否存在且具有可读权限\r\n-w            | 检测文件名是否存在且具有可写权限\r\n-x            | 检测文件名是否存在且具有可执行权限\r\n-u            | 检测文件名是否存在且具有SUID属性\r\n-s            | 检测文件名是否存在且为 非空白文件\r\n\r\n 两个文件间比较 test file1 -nt file2\r\n测试标志      | 代表含义\r\n:-------------|:------------------\r\n-nt           | (newer than) 判断file1是否比file2新\r\n-ot           | (older than) 判断file1是否比file2旧\r\n-ef           | 判断file1与file2是否为同一个文件，可用在hard link的判断上\r\n\r\n整数之间的判断 test n1 -eq n2\r\n测试标志      | 代表含义\r\n:-------------|:------------------\r\n-eq           | 两数值相等\r\n-ne           | 两数值不相等\r\n-gt           | n1 大于 n2\r\n-lt           | n1 小于 n2\r\n-ge           | n1 大于等于 n2\r\n-le           | n1 小于等于 n2\r\n\r\n 判定字符串的数据\r\n测试标志      | 代表含义\r\n:-------------|:------------------\r\ntest -z string| 判定字符串是否为0，若string为字符串，则为true\r\ntest -n string| 判定字符串是否为0，若string为字符串，则为false, -n可以省略\r\ntest st1 = str2 | 判断str1是否等于str2，若相等，则为true\r\ntest st1 != str2 | 判断str1是否等于str2，若相等，则为false\r\n\r\n多条件判定 test -r filename -a -x filename\r\n测试标志      | 代表含义\r\n:-------------|:------------------\r\n-a            | 两个条件同时成立\r\n-o            | 任何一个条件成立\r\n!             | 反向状态，not\r\n\r\n 使用判断符号 [] \r\n可以使用[]来代替test进行判断\r\n`shell\r\n[ -z \"$HOME\" ]\r\n`\r\n使用[]必须要特别注意，在bash语法中使用时，必须要注意中括号内的每个组件都需要有空格键来分隔，中括号中的变量最好都以双引号括起来\r\nshell脚本的默认变量\r\n向shell脚本中传递参数和获取参数的方法如下：\r\n`\r\nscriptname opt1 opt2 opt3 ...\r\n$0         $1   $2   $3\r\n`\r\n其他的一些参数：\r\n$ : 后接参数个数\r\n$@ : 所有的参数\r\nshift\r\nshift会移动变量，后面可以跟数字，表示一次移除多少变量\r\n\r\n 条件判断\r\nif ... then...\r\nif ... then... 是最常见的条件判断式。\r\n当只有一个判断要进行时，可以使用如下方式：\r\n`shell\r\nif [ 条件测试语句 ]; then\r\n    条件成立\r\nfi\r\n`\r\n可以通过&&或者||来分隔两个条件判断式，如：\r\n`shell\r\nif [ \"$yn\" == \"Y\" || \"$yn\" == \"y\"]; then\r\n    \"do something\"\r\nfi\r\n`\r\n对于多重、复杂条件判断，可以用如下方式：\r\n`shell\r\nif [ 条件判断式一 ]; then\r\n    \"do something\"\r\nelif [ 条件判断式二 ]; then\r\n    \"do something\"\r\nelse \r\n    \"do something\"\r\nfi\r\n`\r\n 使用 case...esac判断\r\n这种判断经常用来做固定字符串来执行某些操作的需求\r\ncase 语法如下：\r\n`shell\r\ncase $变量 in\r\n    \"第一个变量内容\" )\r\n        \"do something\"\r\n        ;;   #需要用两个分号结尾\r\n    ) \r\n        其他条件执行内容\r\n        ;;\r\nesac\r\n`\r\nfunction\r\nshell中函数的语法如下：\r\n`shell\r\nfunction fname () {\r\n    'do some thing'\r\n}\r\n`\r\n因为shell脚本的执行方式是由下而上的，由左而右的，因此，function的设置一定要在程序的最前面，这样才能在执行时被找到可用的程序段。\r\nfunction中也有内置变量，函数名为$0, 而后续连接的变量也是以$1, $2... 来代替的。\r\n`shell\r\n!/bin/bash\r\nfunction print () {\r\n    echo \"Choice is $1\" \r\n}\r\n\r\necho \"This program will print your choice: \"\r\ncase $1 in \r\n    \"one\" )\r\n        print 1\r\n        ;;\r\n    \"two\" )\r\n        print 2\r\n        ;;\r\n    )\r\n       echo \"Usage $0 (one|two)\"\r\n       ;;\r\nesac\r\n`\r\n循环\r\n 不定循环：while do done, util do done\r\n两种方式的循环如下：\r\n`shell\r\n当满足条件condition时，执行循环体\r\nwhile [ condition ]\r\ndo\r\n    'do something'\r\ndone\r\n\r\n 当不满足条件时执行循环体\r\nuntil [condition]\r\ndo\r\n    'do something'\r\ndone\r\n`\r\n自加运算如下：\r\n`shell\r\ns=0\r\ni=0\r\nwhile [ \"$i\" != \"100\" ]\r\ndo\r\n    i=$(($i+1))\r\n    s=$(($s+$i))\r\ndone\r\n`\r\nfor...do...done\r\n语法如下：\r\n`shell\r\nfor var in con1 con2 con3 ...\r\ndo\r\n    'do something'\r\ndone\r\n 第二种方式\r\nfor ( ( 初始值; 限制数; 执行步长 ))\r\ndo\r\n    'do something'\r\ndone   \r\n`\r\n可以对其他输出内容进行遍历\r\n`shell\r\nusers=$( cut -d ':' -f1 /etc/passwd )\r\nfor username in $users\r\ndo\r\n    id $username\r\n    finger $username\r\ndone\r\n\r\n扫描网络\r\nnetwork=\"192.168.1\"\r\nfor sitenu in $(seq 1 100)\r\ndo \r\n    ping -c 1 -w 1 ${network}.${sitenu} & /dev/null && result=0 || result=1\r\n    if [ \"$result\" == 0 ]; then\r\n        echo \"Server ${network}.${sitenu} is up\"\r\n    fi\r\ndone\r\n\r\n 数值处理\r\ns=0\r\nnu=100\r\nfor ( ( i=1; i<=$nu; i=i+1))\r\ndo\r\n    s=$( ($s+$i))\r\ndone\r\n`\r\nshell脚本调试\r\n可以利用shell脚本参数来检查shell的正确性\r\n`shell\r\nsh [-nvx] script.sh\r\n-n: 不执行script，只检查语法\r\n-v: 执行script前，将script内容输出到屏幕上\r\n-x: 将使用到的script内容显示到屏幕上\r\n`\r\n\r\n 环境变量\r\n可以用 export 来将自定义变量转换成环境变量",
        "tags": []
    },
    {
        "uri": "/post/linux/unexpected end of file",
        "content": "---\r\ntitle: \"linux下执行脚本出现报：syntax error: unexpected end of file\"\r\ndate: 2015-07-23 17:16:32\r\ntags: [\"linux\"]\r\ncategories: [\"linux\"]\r\n---\r\n\r\n这是因为从Windows上拷贝过去的文件，会由于Windows与linux的回车和换行表示方法不一致导致的，可以通过执行dos2unix shellname.sh来解决该问题\r\n\r\nperl脚本在shell中调用时，也可能会出现这样的问题。通过dos2unix perl.pl命令可以修正",
        "tags": []
    },
    {
        "uri": "/post/linux/vim使用快捷键",
        "content": "---\r\ntitle: vim 使用快捷键\r\ndate: 2017-08-14 18:51:00\r\ntags: [\"linux\"]\r\ncategories: [\"linux\"]\r\n---\r\n\r\n在我看来，vim是linux上内置的强大的文本编辑器。\r\n\r\n基本操作\r\nvim有三种模式：一般模式、编辑模式和命令行模式。\r\n使用'i, I, o, O, a, A, r, R'按键可以从一般模式进入到编辑模式。\r\n使用':, /, ?'按键可以从一般模式进入到命令行模式。\r\n通过\\[ESC\\]按键可以从其他模式进入到一般模式。\r\n\r\n 一般模式可用快捷键\r\n下面表格中的 n 都表示数字\r\n\r\n光标移动\r\n按键            | 说明\r\n:---------------|:---------------\r\nh或向左箭头(←)  | 光标向左移动一个字符\r\nj或向下箭头(↓)  | 光标向下移动一个字符\r\nk或向上箭头(↑)   | 光标向上移动一个字符\r\nl或向下箭头(→)  | 光标向右移动一个字符\r\n[ctrl + f]      | 屏幕向下移动一页，同[page down]\r\n[ctrl + b]      | 屏幕向上移动一页，同[page up]\r\n[ctrl + d]      | 屏幕向下移动半页\r\n[ctrl + u]      | 屏幕向上移动半页\r\n    | 光标移动到非空格符的下一行\r\n    | 光标移动到非空格符的上一行\r\nn [space]       | n 为数字，按下数字后，再按下空格，光标会向右移动这一行的n个字符\r\n0 或 [Home]     | 光标移动到这行最前面字符处\r\n$ 或 [End]      | 光标移动到这行最后面字符处\r\nH               | 光标移动到这个屏幕的最上方那行的第一个字符处\r\nM               | 光标移动到这个屏幕的中央的那行的第一个字符处\r\nL               | 光标移动到这个屏幕的最下方的那行的第一个字符处\r\nG               | 光标移动到这个文件的最后一行\r\nnG              | 光标移动到这个文件的第n行\r\ngg              | 光标移动到文件的第一行\r\nN [enter]       | 光标向下移动n行\r\n\r\n 查找\r\n\r\n按键            | 说明\r\n:---------------|:---------------\r\n:n1,n2s/word1/word2/g | n1, n2为数字，在第n1与n2行之间查找word1，并将该字符串替换为word2\r\n:1,$s/word1/word2/g | 全文查找word1，并将该字符串替换为word2\r\n:1,$s/word1/word2/gc | 全文查找word1，并将该字符串替换为word2，需要用户确认\r\n\r\n使用正则表达示查找替换时，需要注意正则表达式的正确使用。其他符号同普通正则相同，但是以下需要转义：\r\n\r\n元字符 | 含义\r\n:-----|:--------\r\n\\\\+   | 匹配1-任意个前一个字符\r\n\\\\?   | 匹配0-1个前一个字符\r\n\\\\{n,m}| 匹配n-m个前一个字符\r\n\\\\{n} | 匹配n个前一个字符\r\n\\\\{n,}| 匹配n-任意个前一个字符\r\n\\\\{,m}| 匹配0-m个\r\n\\\\<   | 匹配单词词首\r\n\\\\   | 匹配单词词尾\r\n\r\n删除、复制、粘贴\r\n按键            | 说明\r\n:---------------|:---------------\r\nx, X            | x为向后删除一个字符，X为向前删除一个字符\r\nnx              | 连续向后删除n个字符\r\ndd              | 删除光标所在行\r\nndd             | 删除光标所在的向下n行\r\nd1G             | 删除光标所在到第一行的所有数据\r\ndG              | 删除从光标所在到最后一行的所有数据\r\nd$              | 删除光标所在处到该行的最后一个字符\r\nd0              | 删除光标所在处到该行最前面的一个字符\r\nyy              | 复制光标所在的那一行\r\nnyy             | 复制光标所在的向下n行\r\ny1G             | 复制光标所在行到第一行的所有数据\r\nyG              | 复制光标所在行到最后一行的所有数据\r\ny0              | 复制光标所在的字符到该行行首的所有数据\r\ny$              | 复制光标所在的那个字符到该行行尾的所有数据\r\np, P            | p为将已复制的数据在光标下一行粘贴，P为粘贴在光标的上一行\r\nJ               | 将光标所在行与下一行的数据结合成同一行\r\nc               | 重复删除多个数据，例如向下删除10行 [10cj]\r\nu               | 复原前一个操作\r\n[ctrl + r]      | 重复上一个操作\r\n .            | 重复前一个操作\r\n\r\n 命令行模式命令\r\n按键            | 说明\r\n:---------------|:---------------\r\n:w              | 将编辑的数据写入硬盘文件中\r\n:w!             | 强制写入，不一定成功\r\n:q              | 离开文件\r\n:q!             | 强制离开而不保存文件\r\n:wq 或 :x       | 保存后离开\r\nZZ              | 若文件没有改动，则不保存离开，若文件已经被改动，则保存后离开\r\n:w[filename]    | 将编辑的数据保存成另一个文件\r\n:r[filename]    | 在编辑的数据中，读入另一个文件，并将数据加到光标所在行后面\r\n:n1,n2 w[filename] | 将n1到n2的内容保存成名为filename的文件\r\n\r\n多窗口功能\r\n使用大写的O参数来垂直分屏\r\n    `bash\r\n    vim -O file1 file2\r\n    `\r\n2.使用小写的o参数来水平分屏\r\n    `bash\r\n    vim -o file1 file2 \r\n    `\r\n关闭当前窗口，不能关闭最后一个窗口\r\n    `bash\r\n    ctrl+w c\r\n    `\r\n关闭当前窗口，如果只剩下最后一个了，则退出vim\r\n    `bash\r\n    ctrl+w q\r\n    `\r\n上下分割当前打开的文件\r\n    `bash\r\n    ctrl+w s\r\n    `\r\n上下分割，并打开一个新的文件\r\n    `bash\r\n    :sp filename\r\n    `\r\n左右分割当前打开的文件\r\n    `bash\r\n    Ctrl+w v\r\n    `\r\n左右分割，并打开一个新的文件\r\n    `\r\n    :vsp filename\r\n    `\r\n9 把光标移到右边的屏\r\n    `bash\r\n    Ctrl+w l\r\n    `\r\n10. 把光标移到左边的屏中\r\n    `bash\r\n    Ctrl+w h\r\n    `\r\n11. 把光标移到上边的屏中\r\n    `bash\r\n    Ctrl+w k\r\n    `\r\n12. 把光标移到下边的屏中\r\n    `bash\r\n    Ctrl+w j\r\n    `\r\n13. 把光标移到下一个的屏中\r\n    `bash\r\n    Ctrl+w w\r\n    `\r\n14. 向右移动屏幕\r\n    `bash\r\n    Ctrl+W L\r\n    `\r\n15. 向左移动屏幕\r\n    `bash\r\n    Ctrl+w H\r\n    `\r\n16. 向上移动屏幕\r\n    `bash\r\n    Ctrl+w K\r\n    `\r\n17. 向下移动屏幕\r\n    `bash\r\n    Ctrl+W J\r\n    `\r\n\r\n vim的一些设置\r\nvim设置内容往往通过修改~/.vimrc来进行一些默认的设置(其注释是 \")\r\n可以参考像 IDE 一样使用 vim\r\n`vimrc\r\n\" 开启实时搜索功能\r\nset incsearch\r\n\" 搜索时大小写不敏感\r\nset ignorecase\r\n\" 关闭兼容模式\r\nset nocompatible\r\n\" vim 自身命令行模式智能补全\r\nset wildmenu\r\n\" 打开语法高亮\r\nsyntax on\r\n\" \r\n\" 自适应不同语言的智能缩进\r\nfiletype indent on\r\n\" 将制表符扩展为空格\r\nset expandtab\r\n\" 设置编辑时制表符占用空格数\r\nset tabstop=4\r\n\" 设置格式化时制表符占用空格数\r\nset shiftwidth=4\r\n\" 让 vim 把连续数量的空格视为一个制表符\r\nset softtabstop=4\r\n \r\nset cindent\r\n\" 总是显示状态栏\r\nset laststatus=2\r\n\" 显示光标当前位置\r\nset ruler\r\n\" 开启行号显示\r\nset number\r\n\" 高亮显示当前行/列\r\nset cursorline\r\nset cursorcolumn\r\n\" 高亮显示搜索结果\r\nset hlsearch\r\n\r\nset fenc=utf-8\r\nset fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936\r\n\r\nset showmatch\r\n\" 禁止折行\r\nset nowrap\r\n\" 设置状态栏主题风格\r\nlet g:Powerline_colorscheme='solarized256'\r\n`",
        "tags": []
    },
    {
        "uri": "/post/markdown语法",
        "content": "---\r\ntitle: markdown语法\r\ndate: 2017-06-17 19:42:25\r\ntags: [\"markdown\"]\r\ncategories: [\"markdown\"]\r\n---\r\n\r\n斜体\r\n`\r\n这是斜体1\r\n这是斜体2\r\n`\r\n这是斜体1\r\n这是斜体2\r\n!-- more --\r\n 粗体\r\n`\r\n这是粗体\r\n这是粗体\r\n`\r\n这是粗体\r\n这是粗体\r\n\r\n带删除线\r\n`md\r\n删除线.\r\n`\r\n删除线.\r\n\r\n 下划线\r\n`\r\nspan style=\"text-decoration:underline\"我带下划线/span\r\nspan style=\"text-decoration:overline\"我带上划线/span\r\n`\r\n超链接\r\n`\r\ntext\r\nhttps://www.sogo.com\r\n`\r\ntext\r\nhttps://www.sogo.com\r\n 引用\r\n引用的区块也可以使用其他的Markdown语法\r\n`\r\n 这是一个引用\r\n  这是第二级引用\r\n`\r\n 这是一个引用\r\n  这是第二级引用\r\n锚点\r\n问内链接;\r\n\r\n 列表\r\n无序列表\r\n`\r\nRed\r\nGreen\r\nBlue\r\n`\r\nRed\r\nGreen\r\nBlue\r\n\r\n 有序列表\r\n`\r\n1\r\n2\r\n3\r\n`\r\n1\r\n2\r\n3\r\n\r\n列表嵌套\r\n`\r\n列出所有元素：\r\n    无序列表元素 A\r\n        元素 A 的有序子列表\r\n    前面加四个空格\r\n列表里的多段换行：\r\n    前面必须加四个空格，\r\n    这样换行，整体的格式不会乱\r\n列表里引用：\r\n\r\n     前面空一行\r\n     仍然需要在   前面加四个空格\r\n\r\n列表里代码段：\r\n\r\n    `\r\n    前面四个空格，之后按代码语法 ` 书写\r\n    `\r\n\r\n        或者直接空八个，引入代码块\r\n`\r\n列出所有元素：\r\n    无序列表元素 A\r\n        元素 A 的有序子列表\r\n    前面加四个空格\r\n列表里的多段换行：\r\n    前面必须加四个空格，\r\n    这样换行，整体的格式不会乱\r\n列表里引用：\r\n\r\n     前面空一行\r\n     仍然需要在   前面加四个空格\r\n\r\n列表里代码段：\r\n\r\n    `\r\n    前面四个空格，之后按代码语法 ` 书写\r\n    `\r\n\r\n        或者直接八个空格，引入代码块\r\n\r\n\r\n 代办列表\r\n`\r\n[ ] 不勾选\r\n[x] 勾选 (为aiks)\r\n`\r\n[ ] 不勾选\r\n[x] 勾选 (为aiks)\r\n\r\n代码\r\n`java\r\n`java\r\nnew String();\r\n`\r\n`\r\n\r\n`java\r\nnew String();\r\n`\r\n\r\n\r\n 表格\r\n\r\n`\r\nFirst Header | Second Header | Third Header\r\n:----------- | :-----------: | -----------:\r\nLeft         | Center        | Right\r\nLeft         | Center        | Right\r\n\r\n`\r\n\r\nFirst Header | Second Header | Third Header\r\n:----------- | :-----------: | -----------:\r\nLeft         | Center        | Right\r\nLeft         | Center        | Right\r\n\r\n分割线\r\n`\r\n---\r\n***\r\n`\r\n---\r\n***\r\n\r\n 图片\r\n`\r\n\r\n[1]: https://www.sogou.com/index/images/logo_440x140.v.1.png \"搜狗搜索 optional title\"\r\n\r\n\r\n`\r\n\r\n\r\n\r\n插入原生html\r\n`markdown\r\n{% raw %}\r\nemyour html/em\r\n{% endraw %}\r\n`\r\n{% raw %}\r\nemyour html/em\r\n{% endraw %}\r\n\r\n MathJax\r\nMathJax通过JavaScript将特定的符号转换成HTML，SVG或者MathML，来在浏览器中显示数学表达式。\r\n将MathJax的JavaScript引入到页面中:\r\n`html\r\n<script type=\"text/javascript\" async\r\n  src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML\"\r\n/script\r\n`\r\n有两种类型的表达式：一种是行内的；一种是单独一行的。\r\n默认的数学分隔符是：$$...$$ 和 \\[...\\]，行内数学表达式是\\(...\\)。例如：\r\n`\r\n$$2^n$$123\r\n\\(2^5\\)123\r\n`\r\n$$2^n$$123\r\n\\(2^5\\)123\r\n\r\n\r\n插入UML\r\n在写markdown文档时，可能会用到UML图，但是我们不想使用图片，因为这样我们要使用在线图片或者自己有限的空间。那么我们可以使用svg。\r\nProcessOn 在线作图，该在线网站生成的svg代码可能较大，可以使用 SVGOMG压缩\r\n\r\n[1]: https://www.sogou.com/index/images/logo_440x140.v.1.png \"搜狗搜索 optional title\"\r\n",
        "tags": []
    },
    {
        "uri": "/post/mysql/MySQL基础语句",
        "content": "---\r\ntitle: MySQL基础语句\r\ndate: 2017-10-08 19:48:32\r\ntags: [\"MySQL\"]\r\ncategories: [\"MySQL\"]\r\n---\r\n\r\nMySQL数据库\r\n\r\nMySQL 是典型的关系型数据库，因为其免费开源，所以被广泛的应用\r\n数据库是按照数据结构来组织、存储和管理数据的仓库当然我们也可以将数据存储在文件中，但是文件中读写数据速度相对较慢所以，我们使用关系型数据库管理系统（RDBMS）来存储和管理数据关系型数据库，是建立在关系模型基础上的数据库，通过集合代数等数学概念和方法来处理数据库中的数据。\r\n!-- more --\r\nRDBMS (Relational Database Management System)的特点：\r\n数据以表格的形式出现\r\n每行为各种记录名称\r\n每列为记录名称所对应的数据域\r\n许多行和列构成一张表\r\n若干个表组成数据库\r\n\r\n 数据库术语\r\n数据库： 数据库是关系型数据表的集合\r\n数据表： 表示数据的矩阵\r\n列： 一列包含了相同类型的数据\r\n行： 一行是一组相关的数据\r\n冗余： 存储两倍数据，冗余降低性能，但提高了数据的安全性\r\n主键： 主键是唯一的，一个数据表中只能包含一个主键\r\n外键： 外键用于将两个表关联起来\r\n复合键： 复合键将多个列作为一个索引键，一般用于符合索引\r\n索引： 使用索引可以快速访问数据表中的信息一般索引使用B+ Tree对数据表中的一列或多列进行排序\r\n\r\nMySQL特殊命令\r\n按ip查看连接: select SUBSTRINGINDEX(host,':',1) as ip , count(*) from informationschema.processlist group by ip;\r\n查看执行数据库执行列表: show processlist;\r\n查看索引使用情况: explain SQL;\r\n\r\n MySQL简单的命令\r\n查看当前服务器版本： SELECT VERSION();\r\n显示当前日期： SELECT NOW();\r\n显示当前用户： SELECT USER();\r\n查看所有的数据库： SHOW DATABASES;\r\n切换数据库： USE db_name;\r\n查看警告信息： SHOW WARNINGS;\r\n查看数据库表的创建信息： SHOW CREATE db_name;\r\n查看当前打开的数据库： SHOW DATABASE();\r\n查看数据库中的表: SHOW TABLES [FROM db_name] [LIKE 'pattern' | WHERE expr];\r\n10. 查看数据库表的结构: SHOW COLUMNS FROM tb_name\r\n11. 查看数据表的创建语句： SHOW CREATE TABLE tb_name;\r\n12. 查看索引: SHOW INDEXES FROM tb_name;\r\n13. 删除表： DROP TABLE tb_name;\r\n14. 删除数据库： DROP DATABASE db_name;\r\n\r\nMySQL 数据类型\r\n数据类型是指列、存储过程参数、表达式和局部变量的数据特征，它决定了数据的存储格式，代表了不同的信息类型\r\n 整型\r\n可以根据下表选择需要的整型类型，既能保证能存储所需数值，又能节省空间 UNSIGNED 无符号值。\r\n\r\n数据类型   | 存储范围              | 字节\r\n:--------|:---------------      |:-------------\r\ntinyint   | 有符号值： -128到127 (-2^7 到 2^7-1) br 无符号值： 0到255 (0到2^8-1)   | 1字节\r\nsamllint  | 有符号值： -32768到32767 (-2^15 到 2^15-1) br 无符号值： 0到65535 (0到2^16-1)   | 2字节\r\nmediumint | 有符号值： -2^23 到 2^23-1 br 无符号值： 0到2^24-1   | 3 字节 (3*8)\r\nint       | 有符号值： -2^31 到 2^31 -1 br 无符号值： 0 到 2^32-1 | 4 字节\r\nbigint    | 有符号值： -2^63 到 2^63 -1 br 无符号值： 0 到 2^64-1 | 8 字节\r\n\r\n浮点型\r\n数据类型               |  存储范围\r\n:----------------| :-----------\r\nfloat[(M,D)]     |-3.402823466E+38 到 -1.175494351E-38、0 和 1.175494351E-38 到 3.402823466E+38 br M 是数字的总位数，D是小数点后边的位数如果没有M和D，那么根据硬件允许的限制来保存值单精度浮点数精确到大概7位小数\r\ndouble[(M,D)]    | -1.7976931348623157E+308 到 -2.2250738585072014E-308、 0 和 2.2250738585072014E-308 到 1.7976931348623157E+308\r\n\r\n 日期类型\r\n数据类型      | 存储需求\r\n:------------| :-----\r\nyear        | 1\r\ntime        | 3\r\ndate        | 3\r\ndatetime    | 8\r\ntimestamp   | 4\r\n\r\n字符型\r\n\r\n数据类型                  | 存储需求\r\n:----------------------- |:----------\r\nchar(M)                  | M 个字节，定长类型， 0 <= M <= 255\r\nvarchar(M)              | L+1个字节(变长类型)，L<=M && 0 <= M <= 65536\r\ntinytext                | L+1个字节，L < 2^8\r\ntext                    | L+2 个字节，L < 2^16\r\nmediumtext              | L+3 个字节，L < 2^24\r\nlongtext                | L+4 个字节，L < 2^32\r\nenum('value1', 'value2', ...) | 1或2个字节，取决于枚举值的个数 (最大65535个值)\r\nset('value1','value2', ...) | 1,2,3,4或8个字节，取决于set成员的数目(最多64个成员)\r\n\r\n 创建表\r\n以下是MySQL创建数据表的通用语法：\r\n`sql\r\nCREATE TABLE [IF NOT EXISTS] table_name (\r\n    columnname datatype,\r\n    ...\r\n);\r\n`\r\n下例子中，我们创建了一张 tb_name 的表\r\n`sql\r\nCREATE TABLE IF NOT EXISTS tb_name (\r\n    id INT UNSIGNED AUTO_INCREMENT,\r\n    name VARCHAR(20) NOT NULL,\r\n    birthday DATE,\r\n    PRIMARY KEY (id)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n-- 结果：受影响的行: 0，时间: 0.042s\r\n`\r\n\r\n解释：\r\n如果不想将字段的值为NULL，可以设置字段的属性为 NOT NULL，这样在插入数据时，如果输入该字段为 NULL，那么数据库就会报错\r\nAUTO_INCREMENT 定义列为自增属性，一般用于主键\r\nPRIMARY KEY 用于定义列为主键，可以定义过个列为主键，用逗号分隔\r\nENGINE 用来设置存储引擎，CHARSET 设置编码\r\n\r\n插入数据\r\nMySQL 通过 INSERT INTO 或者 REPLACE INTO 来插入数据，语法如下：\r\n`sql\r\nINSERT [INTO] ta_name [(field1, field2,...fieldN)] VALUES (val1, val2, ..., valN) [, (val1, val2, ..., valN)];\r\n-- 如果主键相同，则替换之\r\nREPLACE [INTO] ta_name [(field1, field2,...fieldN)] VALUES (val1, val2, ..., valN) [, (val1, val2, ..., valN)];\r\n`\r\n如果数据是字符型，必须使用双引号或者单引号，如 \"val\"\r\n下例中，我们向数据表中插入一条数据：\r\n`sql\r\nINSERT INTO tb_name (name, birthday) VALUES (\"Jhon\", \"1991-11-23\");\r\n-- 结果: 受影响的行: 1，时间: 0.003s\r\n`\r\n如果 field 的名字同 MySQL 关键字的名字相同，需要使用 \\ 来将 field` 括起来\r\n\r\n如果需要从另一张表中导入数据到一张表，可以用 INSERT INTO ... SELECT，其语法如下：\r\n`sql\r\n-- 将tb2中所有的列都拷贝到tb1中\r\nINSERT INTO tb1 \r\nSELECT * FROMT tb2\r\nWHERE condition;\r\n-- 将特定的列从tb1中拷贝到tb2中\r\nINSERT INTO tb1 (column1, column2,..., columnn) \r\nSELECT column1, column2,..., columnn \r\nFROM tb2 \r\nWHERE condition;\r\n`\r\n拷贝指定的列时，INSERT 后的列要一一对应。\r\n\r\n\r\n 简单查询数据\r\nMySQL 通过 SELECT 语句来查询数据，语法如下：\r\n`sql\r\nSELECT colname, colname,... FROM tb_name [WHERE clause] [OFFSET m] [LIMIT n];\r\n`\r\nSELECT 说明：\r\n查询语句中可以使用一个或者多个表，表之间用逗号分隔， WHERE 用来设定查询语句\r\n使用 * 来代替其他字段，SELECT 语句会返回表中所有的字段数据\r\n使用 OFFSET 来指定 SELECT 语句开始查询的数据偏移量\r\n使用 LIMIT 来设定返回的记录数\r\n\r\n`sql\r\nSELECT * FROM tb_name;\r\n-- 结果：\r\n +----+------+------------+\r\n| id | name | birthday   |\r\n+----+------+------------+\r\n|  1 | Jhon | 1991-11-23 |\r\n+----+------+------------+\r\n1 row in set (0.00 sec)\r\n`\r\n\r\nCASE WHEN\r\n\r\n可以在 select 的列中使用 case when condition then val1 else val2 end 来进行查询操作\r\n\r\n`sql\r\nINSERT INTO db1.table1 (keyword, matchtype, type, createtime, modifytime, starttime, end_time, user) \r\nSELECT \r\n    sugg_word as keyword, \r\n    (CASE WHEN fuzz=0 THEN 0 ELSE 1 end) AS match_type,\r\n    (CASE WHEN sugg_case='' THEN 0 ELSE 1 END) AS type,\r\n    createtime, modifytime, starttime, endtime, user \r\nfrom db2.table2 where sugg_case='';\r\n`\r\n\r\n UPDATE 更新命令\r\n如果我们要更改MySQL中的数据，那么我们需要使用 UPDATE 命令，其语法如下：\r\n`sql\r\nUPDATE tb_name SET field1=newValue1, field2=newValue2, ... [WHERE clause];\r\n`\r\n\r\nUPDATE 语句说明：\r\n可以同时更新多个字段；\r\n可以在 WHERE 子句中指定任何条件\r\n可以在一个单独表中同时更新数据\r\n\r\n示例：\r\n`sql\r\nUPDATE tb_name SET birthday='2000-10-01' WHERE name='Jhon';\r\n-- 结果如下\r\nQuery OK, 1 row affected (0.00 sec)\r\nRows matched: 1  Changed: 1  Warnings: 0\r\n`\r\n\r\nDELETE 语句\r\n可以使用 DELETE 来删除 MySQL 表中的记录，语法如下：\r\n`sql\r\nDELETE FROM tb_name [WHERE clause];\r\n`\r\n\r\nDELETE 语句会删除所有命中 WHERE 条件的记录。\r\nDELETE 说明：\r\n如果没有指定 WHERE 子句， MySQL 表中的所有记录都会被删除\r\n可以在 WHERE 子句中指定任何条件\r\n可以在表单中一次性删除记录\r\n\r\n\r\n 查询\r\n\r\nWHERE 子句\r\nWHERE 子句是有条件地从表中筛选数据，语法如下：\r\n`sql\r\nSELECT field1, field2,...fieldN FROM tbname1, tbname2...\r\n[WHERE condition1 [AND [OR]] condition2.....\r\n`\r\nWHERE 子句说明：\r\n查询语句中可以指定一个或多个表，表之间用逗号分隔\r\n在 WHERE 子句中指定任何条件，使用 AND 或 OR 来分隔不同的条件\r\nWHERE 可以用在 SQL 的 DELETE 或者 UPDATE 命令中\r\n\r\nWHERE 子句中可以使用如下操作符，其中 A=10， B=20, s='test'：\r\n\r\n操作符 | 描述            | 实例\r\n:-----|:----------------|:--------\r\n=     | 等号，检测两个值是否相等，如果相等返回true     | (A = B) 返回false\r\n, !=|  不等于，检测两个值是否相等，如果不相等返回true |  (A != B) 返回 true\r\n\\    | 大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true | (A  B) 返回false\r\n<     | 小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true | (A < B) 返回 true\r\n\\=   |  大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true |  (A = B) 返回false\r\n<=    |小于等于号，检测左边的值是否小于于或等于右边的值, 如果左边的值小于或等于右边的值返回true  | (A <= B) 返回 true\r\nIS [NOT] NULL | 判断值是否为空   | (s IS NOT NULL) 返回false\r\nLIKE  | 字符串模糊匹配 | (s LIKE '%es_') 返回 true\r\nREGEXP| 正则匹配      | (s REGEXP '^t[aec]{1,3}$') 返回true\r\n\r\n LIKE 子句\r\nLIKE 子句如果没有 % 和 _， 其效果同 = 相同。\r\n在 LIKE 中，% 代表任意个数的任意字符； _ 代表任意一个字符。\r\n\r\n示例：\r\n`sql\r\nSELECT * FROM tb_name WHERE NAME LIKE 'A%';\r\n-- 结果：\r\n+----+------+------------+\r\n| id | name | birthday   |\r\n+----+------+------------+\r\n|  6 | Andy | 2009-09-01 |\r\n+----+------+------------+\r\n`\r\n\r\nWHERE 子句中的字符串不区分大小写，可以使用 BINARY 来设定字符串区分大小写： WHERE BINARY NAME LIKE 'A%';\r\n\r\nUNION 操作符\r\nUNION 操作符用于连接两个以上的 SELECT 语句，它将 SELECT 语句的结果组合到一个结果集中，多个 SELECT 语句会删除重复的数据。语法如下：\r\n`sql\r\nSELECT exp1, exp2, ..., expn FROM tb_name \r\n[WHERE condition] \r\nUNION [ALL | DISTINCT]\r\nSELECT exp1, epx2, ..., expn FROM tb_name \r\n[WHERE condition];\r\n`\r\n\r\n语句说明：\r\nDISTINCT: 可选，删除结果集中重复的数据，默认为 DISTINCT\r\nALL: 可选，返回所有的结果集，包括重复数据\r\nSELECT 所选的列的个数应该是相等的\r\n\r\n`sql\r\nSELECT name, birthday FROM tb_name WHERE name LIKE 'D%'\r\nUNION ALL\r\nSELECT name, birthday FROM person WHERE name like 'D%';\r\n-- 结果\r\n+-------+------------+\r\n| name  | birthday   |\r\n+-------+------------+\r\n| Devon | 2009-09-01 |\r\n| Dewey | 1990-12-01 |\r\n| Devon | 1990-12-01 |\r\n| Dewey | 1990-12-01 |\r\n+-------+------------+\r\n\r\nSELECT name, birthday FROM tb_name WHERE name LIKE 'D%'\r\nUNION \r\nSELECT name, birthday FROM person WHERE name like 'D%';\r\n-- 结果\r\n+-------+------------+\r\n| name  | birthday   |\r\n+-------+------------+\r\n| Devon | 2009-09-01 |\r\n| Dewey | 1990-12-01 |\r\n| Devon | 1990-12-01 |\r\n+-------+------------+\r\n`\r\n\r\n 排序\r\n可以通过 SELECT 将数据从数据库中取出，还可以通过 ORDER BY 子句对查询结果进行排序。语法如下：\r\n`sql\r\nSELECT field1, field2,..., fieldn FROM tb_name [WHERE condition] ORDER BY field1, [field2...] [ASC [DESC]];\r\n`\r\n\r\nORDER BY 使用说明：\r\n可以使用任何字段作为排序的条件\r\n可以设定多个字段来排序，会按字段的先后顺序来对结果进行排序\r\nASC 是排列升序，DESC 是降序排列，默认情况下是升序\r\n\r\n示例：\r\n`sql\r\nSELECT name, birthday FROM tb_name WHERE NAME LIKE 'D%' ORDER BY birthday;\r\n-- 结果\r\n+-------+------------+\r\n| name  | birthday   |\r\n+-------+------------+\r\n| Dewey | 1990-12-01 |\r\n| Devon | 2009-09-01 |\r\n+-------+------------+\r\n\r\nSELECT name, birthday FROM tb_name WHERE NAME LIKE 'D%' ORDER BY birthday DESC;\r\n+-------+------------+\r\n| name  | birthday   |\r\n+-------+------------+\r\n| Devon | 2009-09-01 |\r\n| Dewey | 1990-12-01 |\r\n+-------+------------+\r\n`\r\n\r\n分组查询\r\n我们可以使用 GROUP BY 语句根据一个或多个列队结果集进行分组。在列上我们可以使用 COUNT、SUN、AVG等聚合函数。语法如下：\r\n`sql\r\nSELECT field1, function(field2), ... FROM tb_name \r\n[WHERE condition] \r\nGROUP BY field1 [WITH ROLLUP]\r\n[ORDER BY field1];\r\n`\r\n\r\n说明：\r\nWITH ROLLUP : 可以实现在分组统计的基础上在进行相同的统计(SUM, AVG, COUNT)\r\nCOALESCE(a,b,c): 如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）\r\n\r\n示例：\r\n`sql\r\nSELECT COUNT(name), birthday FROM tb_name GROUP BY birthday  ORDER BY birthday DESC;\r\n-- 结果\r\n+---------------+------------+\r\n| COUNT(name) | birthday   |\r\n+---------------+------------+\r\n|             4 | 2009-09-01 |\r\n|             1 | 2004-06-16 |\r\n|             1 | 2000-10-01 |\r\n|             1 | 1990-12-01 |\r\n+---------------+------------+\r\n\r\nSELECT COALESCE(birthday, '总数'), SUM(name) AS namecount FROM tbname GROUP BY birthday WITH ROLLUP;\r\n-- 结果\r\n+------------------------------+------------+\r\n| COALESCE(birthday, '总数') | name_count |\r\n+------------------------------+------------+\r\n| 1990-12-01                   |          1 |\r\n| 2000-10-01                   |          1 |\r\n| 2004-06-16                   |          1 |\r\n| 2009-09-01                   |          4 |\r\n| 总数                       |          7 |\r\n+------------------------------+------------+\r\n`\r\n\r\n MySQL NULL 值处理\r\nWHERE 子句在使用查询条件时，如果查询条件的字段为NULL，会有些特殊：\r\nIS NULL: 若当前列的值为 NULL，则返回true\r\nIS NOT NULL: 当前列的值不为NULL，返回true\r\n=: 比较操作符，当比较的两个值为 NULL 时返回true\r\n\r\nNULL 条件比较运算比较特殊，不能使用 =NULL 或 !=NULL 在列中查找 NULL 值。 在 MySQL中， NULL值与任何其他值的比较永远返回 false，NULL=NULL 也会返回false。\r\n* MySQL中处理 NULL 使用 IS NULL 和 IS NOT NULL*\r\n\r\nMySQL 正则表达式\r\nMySQL 除了可以用 LIKE 来进行模糊匹配外，还可以用 REGEXP 来进行正则匹配。其正则匹配的模式同Perl正则匹配相似\r\n`sql\r\n-- 选出 以 D 或 J 开头的，并且以 n 结尾的姓名\r\nSELECT * FROM tb_name WHERE name regexp '^[DJ].*n$';\r\n-- 结果\r\n+----+-------+------------+\r\n| id | name  | birthday   |\r\n+----+-------+------------+\r\n|  1 | Jhon  | 2000-10-01 |\r\n|  2 | Devon | 2009-09-01 |\r\n+----+-------+------------+\r\n`\r\n\r\n 修改表结构\r\n当我们需要修改数据库的表明或者修改数据表字段时，可以通过MySQL的 ALTER 命令来修改。\r\n删除表中的字段： ALTER TABLE tb_name DROP field;\r\n使用 ADD 来向数据表中添加列： ALTER TABLE tb_name ADD sex INT;\r\n修改字段类型及名称： ALTER TABLE tb_name MODIFY sex CHAR(2);\r\n修改字段的默认值： ALTER TABLE tb_name MODIFY sex TIYINT NOT NULL DEFAULT 1;\r\n修改表名： ALTER TABLE tb_name RENAME TO tb;\r\n修改存储引擎： ALTER TABLE tb_name ENGINE=MYISAM;\r\n删除外键约束：ALTER TABLE tb_name DROP FOREIGN KEY keyName;\r\n\r\n索引\r\n表的索引就像书的目录，能够快速地找到找到数据，能够极大地提高以索引列为条件的查询的效率。\r\n索引分为单列索引和组合索引。单列索引只包含单个列，一个表可以有多个单列索引。组合索引是一个索引包含多个列。\r\n可以把索引看做一张有序表，保存了主键和索引字段，并指向实体表的记录。\r\n虽然索引能够极大地提高查询速度，但是却会降低更新表的速度，如对表进行 INSERT、UPDATE和DELETE。因为更新表时，也需要更新索引。\r\n索引分为 普通索引，唯一索引。 唯一索引列的值必须是唯一的，但允许有空置。如果是组合索引，则列的组合必须唯一。\r\n创建索引: CREATE [UNIQUE] INDEX indexName NO tb_name(name(lenght))。如果是 CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB或TEXT类型，必须制定length\r\n修改表结构(添加索引)： ALERT table tb_name ADD INDEX indexName(columnName)\r\n创建表时直接指定：\r\n    `sql\r\n    CREATE TABLE tb_name (\r\n        id INT NOT NULL,\r\n        username VARCHAR(16) NOT NULL,\r\n        ...\r\n        INDEX [indexName] (username(length))\r\n    );\r\n    `\r\n删除索引： DROP INDEX [indexName] ON tb_name;\r\n显示索引信息： SHOW INDEX FROM tb_name;\r\n\r\n 临时表\r\n在我们需要保存一些临时数据时，可以使用临时表。临时表只在当前连接可见，关闭连接时，MySQL会自动删除表并释放空间。\r\n临时表的创建同表的创建类似，只是多了一个关键字：\r\n`sql\r\nCREATE TEMPORARY TABLE temporary_table();\r\n`\r\n但是，使用 SHOW TABLES 命令时，无法看到临时表。\r\n\r\n序列\r\n在MySQL的客户端中，使用 LASTINSERTID() 函数来获取最后插入表中的自增列的值\r\n可以使用 auto_increment=100 来为序列指定一个开始值\r\n\r\n 重复数据的处理\r\nMySQL中允许存在重复的记录，但有些时候我们需要删除一些重复的数据。\r\n可以在MySQL表中，通过将相应的字段设置为 PRIMARY KEY 或者 UNIQUE 索引来保证数据的唯一性：\r\n`sql\r\nCREATE TABLE test1 (\r\n    first_name VARCHAR(20) NOT NULL,\r\n    last_name VARCHAR(20) NOT NULL,\r\n    PRIMARY KEY(lastname, firstname)\r\n    -- 或者使用 UNIQUE\r\n    UNIQUE (lastname, firstname)\r\n);\r\n`\r\n如果我们设置了唯一索引，那么在插入重复数据时，SQL语句会执行报错。可以使用 REPLACE INTO 或者 INSERT IGNORE INTO，这两种方式会忽略重复的数据。如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。\r\n\r\n我们还可以统计表中重复的记录：\r\n`sql\r\nSELECT COUNT(*) AS cnt, lastname, firstname FROM test1\r\nGROUP BY lastname, firstname\r\nHAVING cnt  1;\r\n`\r\n\r\n导出数据\r\n我们可以使用 SELECT ... INTO OUTFILE 来简单地导出数据到文本文件中：\r\n`sql\r\nSELECT * FROM test1 INTO OUTFILE '/tmp/test1.txt';\r\n`\r\n还可以像下例中，指定文件格式：\r\n`sql\r\nSELECT * FROM test1 INTO OUTFILE '/tmp/test1.txt' \r\nFIELDS TERMINATED BY ',' ENCLOSED BY '\"' \r\nLINES TERMINATED BY '\\r\\n'\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/post/mysql/MySQL技巧",
        "content": "---\r\ntitle: MySQL技巧\r\ndate: 2017-10-08 18:51:00\r\ntags: [\"MySQL\"]\r\ncategories: [\"MySQL\"]\r\n---\r\n\r\n\r\n查询时间是今天的数据\r\n    `sql\r\n    select * from tablename where todays(createtime) = todays(now());\r\n    select * from tablename where date(createtime) = curdate();\r\n    `\r\n    !-- more --\r\n查询一周之内的数据\r\n    `sql\r\n    select * from tablename where DATESUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time);\r\n    `\r\n    其中DATE_SUB(date,INTERVAL expr unit)是从日期中减去指定的时间间隔，date是合法的日期表达式，expr是时间间隔，unit可以是如下值\r\n\r\n    Type值| 说明\r\n    :-----|:--------\r\n    MICROSECOND   | 毫秒\r\n    SECOND        | 秒\r\n    MINUTE        | 分 \r\n    HOUR          | 时\r\n    DAY           | 天\r\n    WEEK          | 周\r\n    MONTH         | 月\r\n    QUARTER       | 刻\r\n    YEAR          | 年\r\n\r\n删除MySQL中的重复数据\r\n    `sql\r\n    delete from table where id not in (select * from (select max(id) from table group by duplicate having count(duplicate)  1) as b) and id in (select * from (select id from table group by duplicate having count(duplicate)  1) as c);\r\n    `\r\n\r\nMySQL语句的性能问题\r\n    MySQL语句的性能尤为重要，尤其是对于千万级记录的表。碰到一个问题，有一个删除语句的使用 TODAYS(NOW()) - TODAYS(createtime)  14 条件删除14天前的数据，因为数据有2000万条以上，所以执行起来特别慢，使得同一机器的其他数据表表的查询速度特别慢。将createtime 的类型从 datetime 修改为 date，并将语句修改为 create_time  'year-month-day'",
        "tags": []
    },
    {
        "uri": "/post/python/paramiko-批量操作终端",
        "content": "---\r\ntitle: paramiko-批量操作终端\r\ndate: 2017-12-06 19:42:25\r\ntags: [\"python\"]\r\ncategories: [\"python\"]\r\n---\r\n\r\nparamiko\r\nParamiko 是SSHv2协议的 python(2.7, 3.4+) 实现，提供了client和server的功能。使用该模块可以方便的进行ssh连接或者sftp协议的传输。\r\n\r\n argparse\r\nargparse 模块可以使解析命令行参数变得非常简单。在程序中定义其所需的参数，argparse 将会将命令行的参数解析并生成对象，命令行中的各个参数被保存对象的属性。以下代码中简单描述了 argparse 的使用方式：\r\n\r\n`python\r\nimport argparse\r\n\r\n'''低版本的Python不支持 argparse'''\r\n\r\n'''首先创建一个 argparse.ArugmentParser 对象 '''\r\nparser = argparse.ArgumentParser(description='Process some integers.')\r\n'''使用addargument()方法来添加将命令行参数解析成对象的方式，这些对象在parseargs()方法调用后才可以使用。'''\r\nparser.add_argument('integers', metavar='N', type=int, nargs='+',\r\n                    help='an integer for the accumulator')\r\n'''通过命令行参数可以指定accumulate属性是sum函数，还是max函数'''\r\nparser.addargument('-s', '--sum', dest='accumulate', action='storeconst',\r\n                    const=sum, default=max,\r\n                    help='sum the integers (default: find the max)')\r\nparser.add_argument(\"--foo\", action='append')\r\n\r\n'''\r\n上述代码可以通过如下命令行调用\r\npython prog.py 1 2 3 4   结果： 4\r\n·ptython prog.py 1 2 3 4 --sum` 结果： 10\r\n'''\r\n\r\n'''\r\nadd_argument() 方法的参数定义如下：\r\nname or flags: 一个名称或一个选项字符串列表\r\naction: 命令行中遇到该参数时，采用基本类型的操作\r\n   store: 仅仅存储参数的值\r\n   store_const: 存储由const指定的参数，该方式通常用来存储指定某种操作的可选参数\r\n   storetrue/storefalse: store_const的特例，将值存储为True/False\r\n   append: 将各个参数的值存储为一个列表，允许多个可选参数时非常有用 \r\n   append_const: 存储由const指定的参数到list中。\r\nnargs: 应该使用的命令行参数的数量\r\nconst: 被action和nargs所需的常量值\r\ndefault: 如果命令行中不存在该参数，所采取的默认操作\r\ntype: 命令行参数应该被转换成的类型\r\nchoices: 可以被允许的值\r\nrequired: 是否可以省略的命令行选项\r\nhelp: 简要介绍参数的用途\r\nmetavar: 用法消息参数的名称\r\ndest: parse_args() 返回的对象中属性的名字，对应于该参数。\r\n'''\r\n\r\n\r\nclass FooAction(argparse.Action):\r\n    def init(self, option_strings, dest, nargs=None, **kwargs):\r\n        if nargs is not None:\r\n            raise ValueError(\"nargs not allowed\")\r\n        super(FooAction, self).init(option_strings, dest, **kwargs)\r\n\r\n    def call(self, parser, namespace, values, option_string=None):\r\n        print('%r %r %r' % (namespace, values, option_string))\r\n        setattr(namespace, self.dest, values)\r\n\r\n\r\n'''\r\nnargs: 应该使用的命令行参数的数量\r\nN: N 个命令行参数将会被放到一个list中。\r\n?: 如果可能的话，从命令行中读取一个参数，产生一个 \r\n*: 所有的命令行参数都会被放到同一个list中\r\n+: 同*类似，只是要求至少有一个参数，否则会抛出异常\r\n'''\r\n\r\n\r\nparser.add_argument('--foo', nargs='*')\r\nparser.add_argument('--bar', nargs='*')\r\nparser.add_argument('baz', nargs='*')\r\n'''parser.parse_args('a b --foo x y --bar 1 2'.split()):Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y']) '''\r\n\r\n'''将命令行参数转换成合适的对象'''\r\nargs = parser.parse_args()\r\nprint(args.accumulate(args.integers))\r\n`\r\n\r\n使用 paramiko 批量处理终端\r\n在使用 paramiko 批量处理终端时，如果使用串行的处理方式，每个机器都等上个机器处理完之后再进行操作，那么可以预见将要耗费较长的时间。因此，我们采用了多线程的处理方式。但是，一个机器的资源是有限的，如果批量处理机器太多，每个机器开一个线程的方式显然是浪费资源且低效的，可以使用线程池的方式处理。\r\n\r\n`python\r\nimport argparse\r\nimport paramiko\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\n\r\ndef parse_argument():\r\n    \"\"\"解析参数\"\"\"\r\n    parser = argparse.ArgumentParser(description='Process some integers.')\r\n    parser.add_argument(\"-f\", \"--file\", type=str, dest=\"file\", default=\"machine\", help=\"the file of ip address\")\r\n    parser.add_argument(\"-e\", \"--command\", metavar='N', nargs='+', type=str, dest=\"command\",\r\n                        help=\"the command to execute\")\r\n    parser.add_argument(\"-g\", \"--grep\", type=str, dest=\"grep\", metavar='N', nargs='+', default=None,\r\n                        help=\"grep some thing\")\r\n    args = parser.parse_args()\r\n    if args.command is not None:\r\n        args.command = \" \".join(args.command)\r\n    if args.grep is not None:\r\n        args.command = \"grep --color=always -P \" + \" \".join(args.grep)\r\n    return args\r\n\r\n\r\ndef execute(host, username, password, command):\r\n    \"\"\"连接终端执行命令\"\"\"\r\n    ssh = paramiko.SSHClient()\r\n    ssh.setmissinghostkeypolicy(paramiko.AutoAddPolicy())\r\n    ssh.connect(host, port=22, username=username, password=password, timeout=7)\r\n    stdin, stdout, stderr = ssh.exec_command(command)\r\n    cmd_result = stdout.readlines(encoding=\"gbk\")\r\n    err_result = stderr.readlines()\r\n    result = \"----------------------\" + host + \"--------------------------------\\n\"\r\n    for o in cmd_result:\r\n        print(o)\r\n    return result + \"------------------------\\n\"\r\n\r\nif name == 'main':\r\n    args = parse_argument()\r\n    hosts = []\r\n\r\n    print(args)\r\n    if args.file is not None:\r\n        with open(args.file, encoding=\"utf8\") as hostFile:\r\n            for line in hostFile:\r\n                hosts.append(line.strip())\r\n    pool = ThreadPoolExecutor(max_workers=2)\r\n    futures = []\r\n    print(hosts)\r\n    for host in hosts:\r\n        futures.append(pool.submit(execute, host, \"guest\", \"Sogou@)!$\", args.command))\r\n    for future in futures:\r\n        print(future.result())\r\n`\r\n\r\n上述代码中有两点需要特别说明一下：\r\n对于使用grep命令时，加入--color=always。这是因为always会在任何情况下都给匹配字段加上颜色标记，这也会导致在某些终端下，出现字符颜色标记乱码的情况\r\nparamiko 并不支持 stdout.readlines(encoding=\"gbk\") 这种调用方式。因为其默认会采用utf8编码，而有些机器使用的是gbk方式，这会导致不能正确解析文本，出现乱码。因此，我对 paramiko 中的解码部分进行了如下调整：\r\n    修改file.py文件中的def readlines 函数和 def readline 函数为：\r\n\r\n    `python\r\n    def readlines(self, sizehint=None, encoding=\"utf-8\"):\r\n        lines = []\r\n        byte_count = 0\r\n        while True:\r\n            // 给 readline 透传了 encoding 参数\r\n            line = self.readline(encoding=encoding)\r\n            if len(line) == 0:\r\n                break\r\n            lines.append(line)\r\n            byte_count += len(line)\r\n            if (sizehint is not None) and (byte_count = sizehint):\r\n                break\r\n        return lines\r\n    ...\r\n    def readline(self, size=None, encoding=\"utf-8\"):\r\n        ...\r\n        return line if self.flags & self.FLAGBINARY else u(line, encoding=encoding)\r\n    `\r\n    \r\n    因为 readline 函数最后的return 语句中含有 encoding 参数，只要把编码参数透传给它即可。\r\n执行命令时，可能会遇到二进制文件，导致抛出编码异常UnicodeDecodeError: 'gbk' codec can't decode byte 0xfd in position 246: illegal multibyte sequence。查看decode的API，发现有一个errors参数。该参数可以在遇到错误时，选择如何处理错误。我的解决方案是修改 py3compat.py 文件中的 def u(s, encoding='utf8') 函数为：\r\n    \r\n    `python\r\n    if isinstance(s, bytes):\r\n            return s.decode(encoding, errors=\"ignore\")\r\n        elif isinstance(s, str):\r\n            return s\r\n        else:\r\n            raise TypeError(\"Expected unicode or bytes, got {!r}\".format(s))\r\n    `\r\n",
        "tags": []
    },
    {
        "uri": "/post/python/pycurl-https-error-unable-to-get-local-issuer-certificate",
        "content": "---\r\ntitle: 'pycurl https error: unable to get local issuer certificate '\r\ndate: 2014-12-28 19:45:33\r\ntags: [\"python\"]\r\ncategories: [\"python\"]\r\n\r\n---\r\n在 pycurl 访问 https 链接时可能会报： pycurl.error: (60, 'SSL certificate problem: unable to get local issuer certificate') 错误br\r\n一个比较好的解决方法是：\r\n`python\r\nimport pycurl\r\nimport certifi\r\n\r\ncurl = pycurl.Curl()\r\ncurl.setopt(pycurl.CAINFO, certifi.where())\r\ncurl.setopt(pycurl.URL, 'https://www.quora.com')\r\ncurl.perform()\r\n`",
        "tags": []
    },
    {
        "uri": "/post/python/pycurl-快速开始指南",
        "content": "---\r\ntitle: pycurl 快速开始指南\r\ndate: 2014-12-20 11:37:28\r\ncategories: [\"python\"]\r\ntags: [\"python\"]\r\n---\r\n\r\n获取网络资源\r\n\r\n安装好PycURL之后，我们就可以执行一些网络操作了。最简单的是通过一个网站的URL获取它的相关资源。使用PycURL执行一个网络请求，需要以下步骤：\r\n创建一个pucurl.Curl的实例。\r\n使用  setopt  来设置一些请求选项。\r\n调用 perform 来执行请求。br\r\n!-- more --\r\n\r\n在python2 中，我们采用以下的方法获取网络资源：\r\n` python\r\nimport pycurl\r\nfrom StringIO import StringIO\r\n\r\nbuffer = StringIO()\r\nc = pycurl.Curl()\r\nc.setopt(c.URL, 'http://pycurl.sourceforge.net/')\r\nc.setopt(c.WRITEDATA, buffer)\r\nc.perform()\r\nc.close()\r\n\r\nbody = buffer.getvalue()\r\n Body is a string in some encoding.\r\nIn Python 2, we can print it without knowing what the encoding is.\r\nprint(body)`\r\nPycURL没有对网络的响应提供存贮机制。因此，我们必须提供一个缓存（以StringIO的形式）并且让PycURL将内容写入这个缓存。\r\n现有的大多数PycURL代码使用 WRITEFUNCTION 而不是WRITEDATA：\r\n`python\r\nc.setopt(c.WRITEFUNCTION, buffer.write)\r\n`\r\n虽然 WRITEFUNCTION 还能继续使用，但是没有必要了。因为PycURL 7.19.3版本中的WRITEDATA 可以使用任何具有write方法的Python类。\r\n`python\r\nimport pycurl\r\nfrom io import BytesIO\r\n\r\nbuffer = BytesIO()\r\nc = pycurl.Curl()\r\nc.setopt(c.URL, 'http://pycurl.sourceforge.net/')\r\nc.setopt(c.WRITEDATA, buffer)\r\nc.perform()\r\nc.close()\r\n\r\nbody = buffer.getvalue()\r\n Body is a byte string.\r\nWe have to know the encoding in order to print it to a text file\r\n such as standard output.\r\nprint(body.decode('iso-8859-1'))\r\n`\r\n在Python 3 中，PycURL的响应是字节串。字节串对于我们下载二进制文件是比较方便的，但是我们处理文本内容时必须对字节串解码。\r\n在上面的例子中，我们假设内容是以iso-8859-1编码的。检查响应头在现实中，我们希望使用服务器指定的编码格式对响应解码而不是假设一个编码格式解码。我们需要检查响应头来提取服务器指定的编码格式：\r\n`python\r\nimport pycurl\r\nimport re\r\ntry:\r\n    from io import BytesIO\r\nexcept ImportError:\r\n    from StringIO import StringIO as BytesIO\r\n\r\nheaders = {}\r\ndef headerfunction(headerline):\r\n    # HTTP standard specifies that headers are encoded in iso-8859-1.\r\n    # On Python 2, decoding step can be skipped.\r\n    # On Python 3, decoding step is required.\r\n    headerline = headerline.decode('iso-8859-1')\r\n\r\n    # Header lines include the first status line (HTTP/1.x ...).\r\n    # We are going to ignore all lines that don't have a colon in them.\r\n    # This will botch headers that are split on multiple lines...\r\n    if ':' not in header_line:\r\n        return\r\n\r\n    # Break the header line into header name and value.\r\n    name, value = header_line.split(':', 1)\r\n\r\n    # Remove whitespace that may be present.\r\n    # Header lines include the trailing newline, and there may be whitespace\r\n    # around the colon.\r\n    name = name.strip()\r\n    value = value.strip()\r\n\r\n    # Header names are case insensitive.\r\n    # Lowercase name here.\r\n    name = name.lower()\r\n\r\n    # Now we can actually record the header name and value.\r\n    headers[name] = value\r\n\r\nbuffer = BytesIO()\r\nc = pycurl.Curl()\r\nc.setopt(c.URL, 'http://pycurl.sourceforge.net')\r\nc.setopt(c.WRITEFUNCTION, buffer.write)\r\nSet our header function.\r\nc.setopt(c.HEADERFUNCTION, header_function)\r\nc.perform()\r\nc.close()\r\n\r\n Figure out what encoding was sent with the response, if any.\r\nCheck against lowercased header name.\r\nencoding = None\r\nif 'content-type' in headers:\r\n    content_type = headers['content-type'].lower()\r\n    match = re.search('charset=(\\S+)', content_type)\r\n    if match:\r\n        encoding = match.group(1)\r\n        print('Decoding using %s' % encoding)\r\nif encoding is None:\r\n     Default encoding for HTML is iso-8859-1.\r\n    # Other content types may have different default encoding,\r\n    # or in case of binary data, may have no encoding at all.\r\n    encoding = 'iso-8859-1'\r\n    print('Assuming encoding is %s' % encoding)\r\n\r\nbody = buffer.getvalue()\r\nDecode using the encoding we figured out.\r\nprint(body.decode(encoding))\r\n`\r\n不得不说，完成一个非常简单的提取编码格式的工作需要大量的代码。不幸的是，因为libcurl 限制了分配给响应数据的内存，所以只能依赖我的程序来执行这个枯燥乏味的工作。br\r\n写入文件: 如果我们要将响应数据存入文件，只要稍作改变就可以了：\r\n`python\r\nimport pycurl\r\n\r\n As long as the file is opened in binary mode, both Python 2 and Python 3\r\ncan write response body to it without decoding.\r\nwith open('out.html', 'wb') as f:\r\n    c = pycurl.Curl()\r\n    c.setopt(c.URL, 'http://pycurl.sourceforge.net/')\r\n    c.setopt(c.WRITEDATA, f)\r\n    c.perform()\r\n    c.close()\r\n`\r\n最重要的是以二进制方式打开文件，响应内容不需要编码或者解码就可以直接写入文件。\r\n跟随重定向\r\n默认情况下，libcurl和PycURL都不会跟随重定向的内容。我们可以通过 setopt 来设置跟随重定向：\r\n`python\r\nimport pycurl\r\n\r\nc = pycurl.Curl()\r\nRedirects to https://www.python.org/.\r\nc.setopt(c.URL, 'http://www.python.org/')\r\n Follow redirect.\r\nc.setopt(c.FOLLOWLOCATION, True)\r\nc.perform()\r\nc.close()\r\n`\r\n正如我们没有设置一个写的回调函数一样，默认的libcurl和PycURL将响应体输出到标准输出上。br\r\n（使用Python 3.4.1 报错：pycurl.error: (23, 'Failed writing body (0 != 7219)')）\r\n\r\n设置选项\r\n跟随重定向只是libcurl提供的一个选项。还有好多其他的选项，点击这里查看。除了少数例外，PycURL选项的名字都是从libcurl中通过去掉CURLOPT前缀得来的。因此CURLOPTURL就成了简单的URL。\r\n检测响应\r\n我们已经介绍了检测响应头。其他的响应信息可以通过 getinfo 获得，如下所示：\r\n`python\r\nimport pycurl\r\ntry:\r\n    from io import BytesIO\r\nexcept ImportError:\r\n    from StringIO import StringIO as BytesIO\r\n\r\nbuffer = BytesIO()\r\nc = pycurl.Curl()\r\nc.setopt(c.URL, 'http://pycurl.sourceforge.net/')\r\nc.setopt(c.WRITEDATA, buffer)\r\nc.perform()\r\n\r\nHTTP response code, e.g. 200.\r\nprint('Status: %d' % c.getinfo(c.RESPONSE_CODE))\r\n Elapsed time for the transfer.\r\nprint('Status: %f' % c.getinfo(c.TOTAL_TIME))\r\n\r\ngetinfo must be called before close.\r\nc.close()\r\n`\r\n在此，我们将响应内容写到缓存，避免在标准输出中输出不感兴趣的内容。\r\n响应信息都在a href=\"https://curl.haxx.se/libcurl/c/curleasygetinfo.html\" target=\"blank\"libcurl的相关文档/a上有展示。除了少数例外，PycURL的常量都是通过去掉libcurl常量的前缀 CURLINFO来命名的。因此CURLINFORESPONSECODE变为RESPONSE_CODE\r\n提交数据\r\n使用POSTFIELDS选项来提交数据。提交的数据必须先经过URL编码格式编码：\r\n`python\r\nimport pycurl\r\ntry:\r\n    # python 3\r\n    from urllib.parse import urlencode\r\nexcept ImportError:\r\n    # python 2\r\n    from urllib import urlencode\r\n\r\nc = pycurl.Curl()\r\nc.setopt(c.URL, 'http://pycurl.sourceforge.net/tests/testpostvars.php')\r\n\r\npost_data = {'field': 'value'}\r\nForm data must be provided already urlencoded.\r\npostfields = urlencode(post_data)\r\n Sets request method to POST,\r\nContent-Type header to application/x-www-form-urlencoded\r\n and data to send in request body.\r\nc.setopt(c.POSTFIELDS, postfields)\r\n\r\nc.perform()\r\nc.close()\r\n`\r\nPOSTFIELDS自动将HTTP请求方式设置为POST方式。其他的请求方式可以通过CUSTOMREQUEST选项设置：\r\n`python\r\nc.setopt(c.CUSTOMREQUEST, 'PATCH')\r\n`",
        "tags": []
    },
    {
        "uri": "/post/python/Python-讨厌的MemoryError",
        "content": "---\r\ntitle: Python 讨厌的MemoryError\r\ndate: 2015-04-01 15:41:43\r\ntags: [\"python\"]\r\ncategories: [\"python\"]\r\n---\r\n\r\n在用Python处理大数据时，本来16G的内存，内存还没使用四分之一就开始报MemoryError的错误，后来才知道32bit的Python使用内存超过2G之后，就报这个错误，还没有其他的提示消息。果断换64bit的Python。\r\n!-- more --\r\n一开始安装32bit的Python，是因为numpy和scipy官方版本只支持32bit的，后来又找到了非官方的版本http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpybr\r\nwheel文件安装时出现：Fatal error in launcher: Unable to create process using '“”C:\\Program Files (x86)\\Python33\\python.exe“” “C:\\Program Files (x86)\\Python33\\pip.exe”br\r\n在a href=\"http://stackoverflow.com/questions/24627525/fatal-error-in-launcher-unable-to-create-process-using-c-program-files-x86\" target=\"_blank\"stackoverflow/a上找到解决方法：\r\n`bash\r\n$python -m pip install XXX\r\n`",
        "tags": []
    },
    {
        "uri": "/post/python/python3-安装protobuf模块",
        "content": "---\r\ntitle: python3 安装protobuf模块\r\ndate: 2017-06-17 19:02:10\r\ncategories: [\"python\"]\r\ntags: [\"python\"]\r\n---\r\n\r\npython3 网上没有现成的protobuf模块可以直接使用，我在安装时费了一番周折，故此记录下来。\r\n\r\n记录下自己安装python3-protobuf的过程\r\n\r\n从 protobuf官网 下载源码\r\n解压后打开 vsprojects/protobuf.sln (一般用visual studio打开）\r\n右键生成，在Debug目录下找到protoc.exe （该文件是用来生成proto buffer的代码模块）\r\n使用命令行定位到Python目录下，然后输入python setup.py install  protobuf 的python模块，至此python3下的protobuf就可以使用了",
        "tags": []
    },
    {
        "uri": "/post/sublime",
        "content": "---\r\ntitle: sublime 配置\r\ndate: 2017-08-19 09:52:00\r\ntags: [\"工具\"]\r\ncategories: [\"工具\"]\r\n---\r\n\r\n配置markdown\r\n安装package controll: 快捷键ctrl+\\`打开Sublime控制台，输入下面代码：\r\n    sublime 3\r\n    `python\r\n    import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installedpackagespath(); urllib.request.installopener( urllib.request.buildopener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\r\n    `\r\n    sublime 2\r\n    `\r\n    import urllib2,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installedpackagespath(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.installopener( urllib2.buildopener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')\r\n    `\r\n\r\n安装markdownediting: ctrl+shift+p 进入sublime命令面板，打开install package，输入markdownediting，安装后重启 sublime\r\n安装OmniMarkupPreviewer，同方法2\r\n配置markdownediting: \r\n    `json\r\n    {\r\n        \"color_scheme\": \"Packages/MarkdownEditing/MarkdownEditor-ArcDark.tmTheme\",\r\n        \"draw_centered\": false,\r\n        \"word_wrap\": true,\r\n        \"wrap_width\": \"auto\",\r\n        \"line_numbers\": true\r\n    }\r\n    `\r\n\r\n 安装格式化插件\r\n安装 JSFormat: ctrl+shift+p 进入sublime 命令面板，打开install package，输入jsformat，安装完成后重启sublime\r\n选中代码，使用快捷键ctrl+alt+f即可快速格式化代码\r\n\r\n删除插件\r\nctrl+shift+p，打开命令面板，搜索remove package\r\n选中要删除的插件，确认即可\r\n\r\n 配置\r\n`json\r\n{\r\n    \"font_face\": \"Monaco\",\r\n    \"font_size\": 10,\r\n    \"ignored_packages\":[],\r\n    \"linepaddingtop\": 3,\r\n\r\n    // Additional spacing at the bottom of each line, in pixels\r\n    \"linepaddingbottom\": 3,\r\n    // translate tabs to four spaces\r\n    \"translatetabsto_spaces\": false\r\n}\r\n`\r\n\r\n仿照eclipse快捷键配置\r\n`json\r\n[\r\n    { \"keys\": [\"f12\"], \"command\": \"htmlprettify\"},\r\n    { \"keys\": [\"f1\"], \"command\": \"fold\" },\r\n    { \"keys\": [\"f2\"], \"command\": \"unfold\" },\r\n    { \"keys\": [\"ctrl+l\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"@\"} },\r\n\r\n    { \"keys\": [\"ctrl+space\"], \"command\": \"auto_complete\" },\r\n    { \"keys\": [\"ctrl+space\"], \"command\": \"replacecompletionwithautocomplete\", \"context\":\r\n    [\r\n    \t{ \"key\": \"lastcommand\", \"operator\": \"equal\", \"operand\": \"insertbest_completion\" },\r\n    \t{ \"key\": \"autocompletevisible\", \"operator\": \"equal\", \"operand\": false },\r\n    \t{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true }\r\n    ]\r\n    },\r\n    { \"keys\": [\"ctrl+d\"], \"command\": \"runmacrofile\", \"args\": {\"file\": \"Packages/Default/Delete Line.sublime-macro\"} },\r\n    { \"keys\": [\"ctrl+shift+c\"], \"command\": \"toggle_comment\", \"args\": { \"block\": false } },\r\n    { \"keys\": [\"ctrl+shift+c\"], \"command\": \"toggle_comment\", \"args\": { \"block\": true } },\r\n    { \"keys\": [\"ctrl+shift+f\"], \"command\": \"reindent\" , \"args\": {\"single_line\": false}},\r\n    { \"keys\": [\"alt+up\"], \"command\": \"swaplineup\" },\r\n    { \"keys\": [\"alt+down\"], \"command\": \"swaplinedown\" },\r\n    { \"keys\": [\"ctrl+alt+down\"], \"command\": \"duplicate_line\" },\r\n    { \"keys\": [\"shift+ctrl+r\"], \"command\": \"showoverlay\", \"args\": {\"overlay\": \"goto\", \"showfiles\": true} },\r\n    { \"keys\": [\"ctrl+shift+s\"], \"command\": \"save_all\" },\r\n    { \"keys\": [\"ctrl+l\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \":\"} },\r\n    { \"keys\": [\"shift+ctrl+f4\"], \"command\": \"close_all\" },\r\n    { \"keys\": [\"shift+ctrl+y\"], \"command\": \"lower_case\" },\r\n    { \"keys\": [\"shift+ctrl+x\"], \"command\": \"upper_case\" }\r\n]\r\n`",
        "tags": []
    },
    {
        "uri": "/post/svg动画",
        "content": "---\r\ntitle: svg动画\r\ndate: 2017-07-02 19:42:25\r\ntags: [\"svg\"]\r\ncategories: [\"svg\"]\r\n---\r\n\r\nsvg 字体动画\r\n!-- more --\r\n{% raw %}\r\nstyle type=\"text/css\"\r\n.center-btn-wrapper {\r\n    width: 100%;\r\n    top: 50%;\r\n    text-align: center;\r\n    font-size: 24px;\r\n}\r\n.center-btn-wrapper a {\r\n    color: white;\r\n    text-decoration: none;\r\n    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.42);\r\n    background-color: #D87B00;\r\n    padding: 12px 30px;\r\n    border-radius: 5px;\r\n}\r\n.center-btn-wrapper a:hover {\r\n    background-color: #14516F;\r\n}\r\n/* 手机适配 */\r\n@media screen and (max-width: 768px) {\r\n\t.center-btn-wrapper {\r\n\t    font-size: 18px;\r\n\t}\r\n}\r\n/* 暂时隐藏CNZZ统计按钮 */\r\nspan.cnzz-wrapper {\r\n    display: none;\r\n}\r\nsvg {\r\n\tdisplay: block;\r\n\tmargin: 0 auto;\r\n}\r\nsvg path {\r\n\t/虚线长度足够长，至少要大于整个path的长度/\r\n\tstroke-dasharray: 3498;\r\n\t-webkit-animation: dash 15s linear infinite alternate;\r\n\tanimation: dash 15s linear infinite alternate;\r\n}\r\n@-webkit-keyframes dash {\r\n\t0%{stroke-dashoffset: 3498;stroke-dasharray: 3498;stroke:red;}\r\n\t50%{stroke-dashoffset: 0;stroke-dasharray: 20;stroke:#D302D6;}\r\n\t100%{stroke-dashoffset: 1000;stroke-dasharray: 20;stroke:green;}\r\n}\r\n@keyframes dash {\r\n\t0%{stroke-dashoffset: 3498;stroke-dasharray: 3498;stroke:red;}\r\n\t50%{stroke-dashoffset: 0;stroke-dasharray: 20;stroke:#D302D6;}\r\n\t100%{stroke-dashoffset: 1000;stroke-dasharray: 20;stroke:green;}\r\n}\r\n/style\r\n\r\ndiv class=\"center-btn-wrapper\"\r\n\tsvg id=\"svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"404\" width=\"452\"\r\n\t\t g\r\n\t\t  titleLayer 1/title\r\n\t\t  path fill-opacity=\"null\" stroke-opacity=\"null\" stroke-width=\"3\" stroke=\"#41ABF7\" fill=\"none\" d=\"m31.919427,29.815911c0,0 323.1068,0.991126 323.1068,0.991126c0,0 31.716006,-27.751503 31.716006,-27.751503c0,0 43.609516,49.556251 43.609516,49.556251c0,0 -185.34041,0 -185.34041,0c0,0 0,141.730913 0,141.730913c0,0 96.139145,0 95.643186,-0.00002c0.495959,0.00002 25.274085,-24.778126 25.274085,-24.778126c0,0 39.645013,46.582894 39.645013,46.582894c0,0 -160.562284,0.991126 -160.562284,0.991126c0,0 0,154.615509 0,154.615509c0,0 139.748642,0 139.748642,0c0,0 26.760377,-26.760377 26.760377,-26.760377c0,0 42.618391,48.565145 42.618391,48.565145c0,0 -401.405681,-1.982252 -401.405681,-1.982252c0,0 -14.866887,2.973377 -14.866887,2.973377c0,0 -14.866868,2.973377 -14.866868,2.973377c0,0 -21.804748,-25.769271 -21.804748,-25.769271c0,0 204.171761,-0.991126 204.171761,-0.991126c0,0 0,-154.615509 0,-154.615509c0,0 -84.245635,-0.991126 -84.245635,-0.991126c0,0 -15.857993,0 -15.857993,0c0,0 -11.89351,1.982252 -11.89351,1.982252c0,0 -13.875742,1.982252 -13.875742,1.982252c0,0 -21.804748,-22.795894 -21.804748,-22.795894c0,0 147.677629,-0.991106 147.677629,-0.991106c0,0 0,-143.713145 0,-143.713145c0,0 -118.935,-0.991126 -118.935,-0.991126c0,0 -29.733755,3.964483 -29.733755,3.964483c0,0 -6.937881,2.973377 -6.937881,2.973377c0,0 -17.840265,-27.751503 -17.840265,-27.751503z\" id=\"svg_8\"/\r\n\t\t /g\r\n\t/svg\r\n/div\r\n{% endraw %}\r\n\r\ncss源代码：\r\n`css\r\n.center-btn-wrapper {\r\n    width: 100%;\r\n    top: 50%;\r\n    text-align: center;\r\n    font-size: 24px;\r\n}\r\n.center-btn-wrapper a {\r\n    color: white;\r\n    text-decoration: none;\r\n    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.42);\r\n    background-color: #D87B00;\r\n    padding: 12px 30px;\r\n    border-radius: 5px;\r\n}\r\n.center-btn-wrapper a:hover {\r\n    background-color: #14516F;\r\n}\r\n/* 手机适配 */\r\n@media screen and (max-width: 768px) {\r\n    .center-btn-wrapper {\r\n        font-size: 18px;\r\n    }\r\n}\r\n/* 暂时隐藏CNZZ统计按钮 */\r\nspan.cnzz-wrapper {\r\n    display: none;\r\n}\r\nsvg {\r\n    display: block;\r\n    margin: 0 auto;\r\n}\r\nsvg path {\r\n    /虚线长度足够长，至少要大于整个path的长度/\r\n    stroke-dasharray: 3498;\r\n    -webkit-animation: dash 15s linear infinite alternate;\r\n    animation: dash 15s linear infinite alternate;\r\n}\r\n@-webkit-keyframes dash {\r\n    0%{stroke-dashoffset: 3498;stroke-dasharray: 3498;stroke:red;}\r\n    50%{stroke-dashoffset: 0;stroke-dasharray: 20;stroke:#D302D6;}\r\n    100%{stroke-dashoffset: 1000;stroke-dasharray: 20;stroke:green;}\r\n}\r\n@keyframes dash {\r\n    0%{stroke-dashoffset: 3498;stroke-dasharray: 3498;stroke:red;}\r\n    50%{stroke-dashoffset: 0;stroke-dasharray: 20;stroke:#D302D6;}\r\n    100%{stroke-dashoffset: 1000;stroke-dasharray: 20;stroke:green;}\r\n}\r\n`\r\nhtml源码\r\n`html\r\ndiv class=\"center-btn-wrapper\"\r\n    svg id=\"svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"404\" width=\"452\"\r\n         g\r\n          titleLayer 1/title\r\n          !-- path 是用svg工具生成的 --\r\n          path fill-opacity=\"null\" stroke-opacity=\"null\" stroke-width=\"3\" stroke=\"#41ABF7\" fill=\"none\" d=\"m31.919427,29.815911c0,0 323.1068,0.991126 323.1068,0.991126c0,0 31.716006,-27.751503 31.716006,-27.751503c0,0 43.609516,49.556251 43.609516,49.556251c0,0 -185.34041,0 -185.34041,0c0,0 0,141.730913 0,141.730913c0,0 96.139145,0 95.643186,-0.00002c0.495959,0.00002 25.274085,-24.778126 25.274085,-24.778126c0,0 39.645013,46.582894 39.645013,46.582894c0,0 -160.562284,0.991126 -160.562284,0.991126c0,0 0,154.615509 0,154.615509c0,0 139.748642,0 139.748642,0c0,0 26.760377,-26.760377 26.760377,-26.760377c0,0 42.618391,48.565145 42.618391,48.565145c0,0 -401.405681,-1.982252 -401.405681,-1.982252c0,0 -14.866887,2.973377 -14.866887,2.973377c0,0 -14.866868,2.973377 -14.866868,2.973377c0,0 -21.804748,-25.769271 -21.804748,-25.769271c0,0 204.171761,-0.991126 204.171761,-0.991126c0,0 0,-154.615509 0,-154.615509c0,0 -84.245635,-0.991126 -84.245635,-0.991126c0,0 -15.857993,0 -15.857993,0c0,0 -11.89351,1.982252 -11.89351,1.982252c0,0 -13.875742,1.982252 -13.875742,1.982252c0,0 -21.804748,-22.795894 -21.804748,-22.795894c0,0 147.677629,-0.991106 147.677629,-0.991106c0,0 0,-143.713145 0,-143.713145c0,0 -118.935,-0.991126 -118.935,-0.991126c0,0 -29.733755,3.964483 -29.733755,3.964483c0,0 -6.937881,2.973377 -6.937881,2.973377c0,0 -17.840265,-27.751503 -17.840265,-27.751503z\" id=\"svg_8\"/\r\n         /g\r\n    /svg\r\n/div\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/post/webpackage",
        "content": "---\r\ntitle: webpackage \r\n---\r\n\r\n文件中的缩进是2，修改idea的配置之后不生效，需要修改文件 .editorconfig\r\n\r\n创建webpack\r\n`\r\nvue init webpack  \r\n或者\r\nvue init gurghet/webpack\r\n\r\nnpm install  安装依赖\r\n`\r\n\r\n如果有 less 文件，需要安装\r\n`\r\nnpm install --save-dev less-loader less\r\n`\r\n指定webpack入口文件：\r\n`\r\nmodule.exports = {\r\n\tentry: {\r\n\t\tmain: './src/main.js',\r\n\t\ta: './src/a.js'\r\n\t}\r\n}\r\n\r\n`\r\n\r\n指定输出路径\r\n`\r\nmodule.exports = {\r\n\toutput: {\r\n\t\tpath: './dist',\r\n\t\tfilename: 'js/[name]-[chunkhash].js'\r\n\t}\r\n}\r\n`\r\n\r\n安装htmlWebpackPlugin插件：\r\n`javascript\r\nmodule.exports = {\r\n    // 环境的上下文\r\n\tcontext: ./ \r\n\tplugins: {\r\n\t\tnew htmlWebpackPlugin({\r\n\t\t    // 指定html模板\r\n\t\t\ttemplate: index.html,\r\n\t\t\t// 指定生成文件名\r\n\t\t\tfilename: 'index-[hash].html',\r\n\t\t\t// 指定script标签位置\r\n\t\t\tinject: 'head',\r\n\t\t\t// 设定参数\r\n\t\t\ttitle: 'webpack is awesome!'\r\n\t\t})\r\n\t}\r\n}\r\n`\r\n\r\n在html中使用htmlWebpackPlugin的参数\r\n`html\r\ntitle%= htmlWebpackPlugin.options.title %/title\r\n`",
        "tags": []
    },
    {
        "uri": "/post/二叉树的分层遍历",
        "content": "---\r\ntitle: 二叉树的分层遍历\r\ndate: 2017-06-17 19:48:32\r\ntags: [\"算法\"]\r\ncategories: [\"算法\"]\r\n---\r\n\r\n今天去面试的时候被问到二叉树的分层遍历，因为原来写Python脚本的时候自己用队列的方法写过一次 分层遍历。结果面试官说能不能用递归的方法，不用队列实现。唔，临时想没有想起来，因此记录一下。\r\n\r\n首先定义一个二叉树的节点：\r\n`python\r\nclass TreeNode:\r\n    def init(self,value):\r\n        self.value=value\r\n        self.left=None\r\n        self.right=None\r\n`\r\n!-- more --\r\n遍历算法为：\r\n`python\r\ndef traverse(node):\r\n    '''''将要遍历的根节点放入队列中，并放入一个结束的标志位'''\r\n    if node is None:\r\n        return\r\n    q=Queue.Queue()\r\n    q.put(node)\r\n    q.put(Sign())\r\n    traverse_re(q)\r\n\r\ndef traverse_re(queue):\r\n    node=queue.get()\r\n    if node is None or isinstance(node, Sign):\r\n        return\r\n    while(not isinstance(node, Sign)):\r\n        print node.value,\r\n        #将左右子树放入队列中\r\n        if node.left is not None:\r\n            queue.put(node.left)\r\n        if node.right is not None:\r\n            queue.put(node.right)\r\n        node=queue.get()\r\n    print ''\r\n    queue.put(Sign())\r\n    traverse_re(queue)\r\n`\r\n验证方法为：\r\n`python\r\nif name==\"main\":\r\n    root=TreeNode(1)\r\n    left=TreeNode(2)\r\n    right=TreeNode(3)\r\n    root.left,root.right=left,right\r\n    left.left=TreeNode(4)\r\n    right.left,right.right=TreeNode(6),TreeNode(7)\r\n    traverse(root)\r\n`\r\n\r\n之后在《编程之美》上看到了不使用队列的递归遍历方法：\r\n\r\n`python\r\ndef nodeAtLevel(node, level):\r\n    if node is None or level <0:\r\n        return 0\r\n    if level==0:\r\n        print node.value,\r\n        return 1\r\n    return nodeAtLevel(node.left, level-1)+nodeAtLevel(node.right, level-1)\r\n\r\ndef nodeByLevel(root):\r\n    level=0\r\n    while(True):\r\n        if(nodeAtLevel(root, level)==0):\r\n            break\r\n        level+=1\r\n        print \"\"\r\n`\r\n不过还是使用队列遍历的效率高，时间复杂度低\r\n",
        "tags": []
    },
    {
        "uri": "/post/有价值的参考网站",
        "content": "---\r\ntitle: 一些有价值的参考网站\r\ndate: 2017-06-30 11:41:43\r\ntags: [\"other\"]\r\ncategories: [\"other\"]\r\n---\r\n\r\nnginx配置之location及rewrite\r\n阿里巴巴java开发规约-IDEA插件",
        "tags": []
    },
    {
        "uri": "/post/正则表达式",
        "content": "---\r\ntitle: 正则表达式\r\ndate: 2017-06-17 19:42:25\r\ntags: [\"other\"]\r\ncategories: [\"other\"]\r\n---\r\n\r\n元字符\r\n元字符   |   说明\r\n:------- |:---------\r\n.        | 匹配除换行符以外的任意字符\r\n\\w       | 匹配字母或数字或下划线或汉字\r\n\\s       | 匹配任意的空白字符\r\n\\d       | 匹配数字\r\n\\b       | 匹配单词的开始或结束\r\n^        | 匹配字符串的开始\r\n$        | 匹配字符串的结束\r\n\r\n 限定符\r\n限定符    |  说明\r\n:---------|:---------\r\n| 重复0次或更多次\r\n| 重复一次或更多次\r\n?         | 重复0次或一次\r\n{n}       | 重复n次\r\n{n, }     | 重复n次或更多次\r\n{n, m}    | 重复n到m次\r\n\r\n指定范围\r\n使用[]来指定一个字符的范围，如[a-zABC]匹配的是a到z以及A、B、C中的任意一个字符。\r\n\r\n 分支条件\r\n使用 | 来分隔不同的条件 \r\n\r\n捕获分组\r\n使用小括号指定一个子表达式后，匹配这个子表达式的文本，每个分组会有一个组号，规则是从左向右以分组的左括号为标志，第一个出现的分组的组号是1，第二个是2...\r\n\r\n 后向引用\r\n用于重复搜索前面的某个分组匹配的文本，\\b(\\w+)\\b\\s+\\1\\b可以用来匹配重复的单词，\\1代表第一个分组匹配的文本\r\n也可以指定分组名，语法：(?Word\\w+) 或者 (?’word’\\w+)，要反向引用使用\\kWord\r\n\r\n懒惰模式\r\n当正在表达式中包含能够接受重复的限定符时，通常是匹配尽可能多的字符，而懒惰是匹配尽量少的字符.\r\n\r\n代码     |  语法\r\n:--------| :-------\r\n*?       | 重复任意次，但尽可能少重复\r\n+?       | 重复1次或更多次，但尽可能少重复\r\n??       | 重复0次或1次，但尽可能少重复\r\n{n,m}?   | 重复n到m次，但尽可能少重复\r\n{n, }?   | 重复n次以上，但尽可能少重复\r\n\r\n 常用分组语法\r\n捕获\r\n\r\n代码          | 说明\r\n:-------------|:-------\r\n(exp)         | 匹配exp，并捕获文本到自动命名的组里\r\n(?nameexp)  | 匹配exp，并捕获文本到名称为name的组里\r\n(?:exp)       |匹配exp，不捕获文本，也不分配组号\r\n\r\n零宽断言  \r\n\r\n代码          | 说明\r\n:-------------|:------- \r\n(?=exp)       | 匹配exp前面的位置\r\n(?<=exp)      | 匹配exp后面的位置\r\n(!exp)        | 匹配后面跟的不是exp的位置\r\n(?<\\!exp)     | 匹配前面不是exp的位置\r\n\r\n注释:  (?#comment) 注释\r\n\r\n\r\n在Java中使用正则\r\n使用正则提取匹配内容\r\n`java\r\nString ip = \"ip:127.0.0.1\";\r\nPattern pattern = Pattern.compile(\"((?:(?:25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)))\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d))))\");\r\nMatcher matcher = pattern.matcher(ip);\r\nif ( matcher.find() ) {\r\n    System.out.println(\"Found value: \" + matcher.group(0));\r\n}\r\nSystem.out.println(matcher.replaceAll(\" I am matcher replace [$1] ha\"));\r\n`\r\n替换文本内容\r\n`java\r\nString text = \"here is [text] and a [input]\";\r\n// $1 代表正则表达式第一个捕获组括号中的内容\r\nSystem.out.println(text.replaceFirst(\"\\\\[(.*?)]\", \"{$1}\"));\r\nSystem.out.println(text.replaceAll(\"\\\\[(.*?)]\", \"{$1}\"));\r\n`\r\n\r\n JavaScript中使用正则\r\n`javascript\r\n/\\\\[(.*?)]/i.test(\"here is [text] \");\r\n`",
        "tags": []
    },
    {
        "uri": "/post/碰到过的问题",
        "content": "---\r\ntitle: 碰到过的问题\r\ntags: [\"other\"]\r\ncategories: [\"other\"]\r\nmenu: \"main\"\r\n---\r\n\r\n有时候碰到问题，只知道自己以前解决过。如何解决的，却是一点也想不起来了。故在此记录下，碰到过的问题，以待后续会用到。\r\n!-- more --\r\n\r\nJava\r\n在java中，对于读取文件乱码，可以通过以下方式来指定文件的编码new InputStreamReader(new FileInputStream(file), \"GBK\") 或者 Files.newBufferedReader(path, StandardCharsets.UTF_8)\r\nCookie rejected [...] 对于 Cookie rejected ，可能是机器配置了域名，但是没有使用域名访问机器。\r\n使用Java转换xslt时，可以通过 TransformerFactory.newInstance(\"com.self.SelfConfig\",com.self.SelfConfig.class.getClassLoader())，其中 com.self.SelfConfig 是继承自 TransformerFactoryImpl，覆盖了其 newTemplatesHandlers() 方法的类。\r\n在maven中使用java编译时，出现 Compilation failed:internal java compiler error，信息中有Information:java:javacTask:源发行版1.8需要目标发行版1.8。这是因为maven默认的编译版本不是1.8，修改pom.xml:\r\n  `xml\r\n    build\r\n        plugins\r\n            plugin\r\n                groupIdorg.apache.maven.plugins/groupId\r\n                artifactIdmaven-compiler-plugin/artifactId\r\n                configuration\r\n                    source1.8/source\r\n                    target1.8/target\r\n                /configuration\r\n            /plugin\r\n        /plugins\r\n    /build\r\n  `\r\n引入 slf4j jar 包时，出现： java.lang.IllegalAccessError: tried to access field org.slf4j.impl.StaticLoggerBinder.SINGLETON from class org.slf4j.LoggerFactory。 \r\n   可能的原因是其他jar包中包含的 slf4j-api.jar 的版本比较低，解决方案是查找引入的jar包文件，哪一个包使用的 slf4j-api 版本比较低，如果是 maven，可以使用如下方式去掉低版本的jar：\r\n   `xml\r\n    exclusions\r\n      exclusion\r\n          groupIdorg.slf4j/groupId\r\n          artifactIdslf4j-log4j12/artifactId\r\n      /exclusion\r\n  /exclusions\r\n   `\r\n\r\neclipse 不能正确引用jar文件。 在jar文件上右键 - Build Path - add to path\r\n\r\n JavaScript \r\n在ipad上通过jquery绑定的click事件不生效，解决方法：\r\n    `javascript\r\n    $(document).bind(\"click touchstart\", function(){})\r\n    `\r\n使用java拼接json字符串时，不能用\\n， 否则JavaScript不会识别。\r\n使用 zepto 时，如果 zepto 中压缩了 fx_methods.js，那么使用 show() 或 hide() 方法时，会在元素上加上一些动画类的属性，导致样式出问题。\r\n在定义一系列变量时，可能会随手如下定义：\r\n  `javascript\r\n  var container = $(\"id\"),\r\n    isFirst = isFirst === \"true\"; // isFirst 为已定义的变量\r\n  `\r\n  这样会导致 isFirst 永远等于 false。 因为这相当于： \r\n  `javascript\r\n  var isFirst;  // undefined\r\n  isFirst = isFirst === \"true\"\r\n  `\r\n在计算offsetTop等位置时，元素必须是可见的。\r\n\r\nCSS \r\n1.含有画布内容隐藏时，获取画布可能会出现错误。隐藏方式修改为：\r\n    `css3\r\n    position: relative; \r\n    left: 1000px;\r\n    `\r\n    通过定位的方式可能会导致页面可以左右滑动或者下方有大片空白。\r\n    后来采用的方式是先展示元素，通过js脚本控制元素最后隐藏。\r\n    因为js脚本执行可能会有延时或者顺序不可保证，因此使用先展示后隐藏会有问题，因此可以使用设置通过如下方式控制\r\n    `css3\r\n    height:0;\r\n    overflow: hidden;\r\n    `\r\n\r\n linux\r\n/var 目录使用率为100%\r\n  使用 du -h --max-depth=1 /var命令查看var下的文件，发现没有占用空间特别大的文件，总量也不够磁盘的100%\r\n  使用lsof -n | grep delete 命令查看哪些进程使用了已经删除的文件，这些文件虽然已经删除，但是没有释放空间，解决方法是kill掉进程或者reboot\r\n  可能是inode的总量达到磁盘上限，使用df -i查看inode使用情况。如果达到100%，可能是小文件过多，需要找到并清理这些文件\r\nlinux 的 shell 脚本。如果是手动使用sh shell.sh执行没有问题，但是使用 crontab 或者 java 等程序调用时，执行错误或者与sh shell.sh 执行不一致。那么可能是环境变量不同所导致的，比如 PATH， 可以通过export PATH=$PATH:... 来解决。但是碰到过一次比较奇怪的问题，使用 sh shell.sh 执行数据查询没问题，但是使用 crontab 执行却总是没有结果。经过一段时间的调试，找问题，终于定位到是编码的问题。在sh shell.sh执行时，$LANG=zhCN.UTF-8，但是在 crontab 执行时却是 $LANG=enUS，导致查询失败。在代码开头加入 export LANG=zh_CN.UTF-8 解决。\r\n\r\nnginx resin\r\n在nginx+resin的配置中，nginx总是报错：upstream timed out (110: Connection timed out) while reading response header from upstream。\r\n   一般情况下是因为resin处理时间过长，没有返回结果。通过配置 nginx的 location 的超时时间来解决\r\n   `conf\r\n   location / {\r\n        hmuxreadtimeout 180;\r\n         若为proxy，则改为  proxyreadtimeout 180;\r\n        hmuxpass hmux://resinadd;\r\n   }\r\n   `\r\nnginx 不能连接上resin，说resin拒绝连接，浏览器访问出现502错误\r\n    解决方案：查看resin配置文件resin.xml或resin.conf，看配置的host是否与nginx配置的相同，端口号是否一致\r\n    `xml\r\n      cluster\r\n        srun server-id=\"\" host=\"localhost\" port=\"8080\"/\r\n      /cluster\r\n    `\r\nresin启动失败，查看日志，有java.net.UnknownHostException，编辑/etc/hosts文件，配置相应的host即可\r\n\r\nPHP\r\nphp脚本中不能将 \"+\" 通过urldecode($str)正确解析，需要通过rawurldecode($str)解析\r\nPHP中双引号中的变量会被解析 \r\n\r\n\r\n SQL\r\n在MySQL插入操作时，抛出java.sql.SQLException: Incorrect string value: '\\xE4\\xB8\\xAD\\xE5\\x9B\\xBD...' for column 'request'异常\r\n  该异常是因为数据库表或者字段使用的字符集不支持这种编码，将数据库表或者字段采用的编码集设置成utf8\r\n\r\nOther\r\n换个角度思考问题，往往能更好地解决问题。\r\nresin 出现validating indexes due to unclean shutdown.错误时，可以将resin安装目录下的 resin-data 文件夹整体删除。\r\n在从其他地方拷贝代码，重新开trunk时，碰到The working copy at '...' is too old (format 10) to work with client version '...'. You need to upgrade the working copy first。这是因为拷贝的代码中含有 .svn 目录，导致版本的问题，删除目录下的 .svn 才能解决\r\n在xslt中，如果含有未定义的template，但是未使用，可能会出现千奇百怪的错误。比如说if判断不对，select的元素遍历不对。\r\n\r\n JSP\r\nJSP执行莫名失败，不报错。可能是变量名称定义重复。可以通过在外层加一个大括号，将变量的定义分离开来\r\n在使用JSP的out.write()返回内容时，需要用out.flush()将缓存中的内容刷新到返回体中\r\n\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/post/读书笔记/_感谢自己的不完美",
        "content": "---\r\ntitle: 感谢自己的不完美.md\r\ndraft: true\r\n---\r\n\r\n序 拥抱你的不完美\r\n2017-11-26 20:19:11\r\n深入地碰触自己内心的黑暗，而不是逃避黑暗去追求快乐乃至一个外在的好形象，是治愈之路。\r\nPart 1 坏习惯不是你的敌人\r\n2017-11-26 20:20:41\r\n改变恶习最关键的一点是：不和恶习较劲，接受恶习。因为，积习就是你的本性，恶习代表着你内心的需要，你只有理解它并接受它，它才能得到最有效的改造\r\n2017-09-14 18:09:22\r\n坏习惯是一个人的人格的一部分，接受它才能更好地改变它。\r\n认识恶习：它一定曾让你获益\r\n2017-09-14 18:11:18\r\n每一种习惯的形成都必然会经历以下这个循环：\r\n行为发生—得到奖励—强化\r\n2017-11-26 20:33:42\r\n对我们来说，每一个坏习惯都有其好处。不仅如此，实际上每一个坏习惯都是我们人格的一部分，都反映着我们自己的深层需要。\r\n注\r\n坏习惯是深层次需要的映射，控制自己只能压抑这种需要，直到压抑不住到最后的爆发\r\n\r\n2017-09-14 18:14:33\r\n我们必须认识到，每一个人做任何事情最终都是为了满足自己的一些深层需要，每一个负面的、损害性的行为背后都有一个正面的动机。如果认真聆听我们内心的声音，你会发现，生命中每一部分都是你的朋友，都是为了帮助你更好地生活。\r\n2017-11-30 09:30:42\r\n我们生命中的每一部分对我们都是有帮助的，我们必须把它们当作朋友来接纳\r\n2017-09-15 11:10:16\r\n认真倾听自己内心的声音，理解自己脆弱的根源，并从这个根源入手来解决问题。\r\n注\r\n不是通过其他方法压制自己的脆弱\r\n\r\n2017-09-15 11:12:52\r\n当你真正想做一件事情时，动力会从内心自动产生，你自然会自律。不要从外界去寻找迫使你改变习惯的东西，因为它们很容易被你放弃。\r\n2017-09-15 11:15:31\r\n但改变恶习仍需要一点：立即去做。\r\n注\r\n与次人格对话 - 找到使命感 -立即去做\r\n\r\n带着心理问题积极生活\r\n2017-12-01 09:48:30\r\n痛苦本身其实只是一个信号，只是告诉我们，问题发生了，我们应该去改变。如果只是一味努力降低痛苦、逃避痛苦，那就是在逃避问题自身，这并不利于心灵的成长。\r\n2017-12-01 09:49:10\r\n直面痛苦，认识痛苦的意义，领悟到问题的来源，并由此成长\r\n注\r\n有时候把痛苦写下来，随意笔锋流转，既能够直面痛苦，又能反思\r\n\r\n2017-09-15 11:27:33\r\n一、接受心理问题，带着你的心理问题去积极生活；\r\n二、打开心扉，寻找你身边的“业余心理医生”；\r\n2017-09-15 11:27:37\r\n三、理解他人，自己去做一名好的“业余心理医生”\r\n2017-09-15 11:27:44\r\n痛苦只是心理问题的信号，直面问题才能减少痛苦。\r\n2017-09-15 20:40:15\r\n错误认识之一：“我是天底下最不幸的”\r\n2017-09-15 20:40:05\r\n错误认识之二：“痛苦都是因为现在”\r\n2017-09-15 20:39:54\r\n错误认识之三：“用一切办法减少痛苦”\r\n2017-09-15 20:41:47\r\n逃避问题及其内在痛苦情感的倾向是所有心理疾病的主要原因\r\n2017-09-15 20:42:43\r\n错误认识之四：“我能控制自己的\r\n2017-09-15 20:42:47\r\n一切”\r\n2017-09-15 20:44:03\r\n错误认识之五：“没有它我就一切OK”\r\n心灵成长书吧：《克服焦虑》\r\n2017-09-15 20:48:11\r\n焦虑的核心是关系\r\n2017-09-15 20:48:55\r\n这就是焦虑的两个关键内容：为得不到爱而焦虑；为得不到自由而焦虑。其他的焦虑形式，只是这两个内容的延伸而已。\r\n悲伤是完结悲剧的力量\r\n2017-09-16 15:37:03\r\n我们需切记：我们的力量不在于我们看上去有多快乐，而在于我们的心离我们的人生真相有多近。\r\n每一次磨难都是生命的财富\r\n2017-09-17 10:07:01\r\n我们都需要催化剂，来激活和开启我们自身因为种种原因而关闭的部分。\r\n2017-09-17 10:26:31\r\n第一个分离：否定自然\r\n2017-09-17 10:26:36\r\n第二个分离：否定自我\r\n2017-09-17 10:26:42\r\n第三个分离：否定生命\r\n2017-09-17 10:26:47\r\n第四个分离：否定领导力\r\n2017-09-17 10:27:02\r\n越逃避，阴影越重；越勇敢，阴影越轻\r\n2017-09-17 10:28:08\r\n作为一个人，我们必须深入地探讨自己经历过的所有事件以及教训，只有在这个深度上我们才能发现我们自己的真实，找到自己的决策能力。发生过什么并不重要，重要的是我们怎么去处理。无论我们出生、成长在什么样的家庭里，我们从中学到什么\r\n2017-09-17 10:28:23\r\n经验与教训，并如何最大限度地利用它们，这才是最重要的\r\n2017-09-17 10:28:38\r\n“你不能逃避事实。”他强调说，“你能做到的，就是从你自己开始，将你自己的苦难转化为你的催化剂。”\r\n越控制，越失序\r\n2017-09-17 10:41:57\r\n忧伤、愤怒、焦虑、嫉妒等等都不是问题，问题是我们试图消灭它们，我们视它们为失序，我们由此想控制，以为控制的局面就是秩序。其实，真正的秩序是自由，是顺其自然，是活在当下。\r\n越快乐，越悲伤?\r\n2017-09-28 09:55:46\r\n因为某些感受一旦产生，我们不接受它、压制它，不让它通过心理的途径来表达，那么，它就会通过身体的途径来表达。\r\n愤怒：你的力量之泉\r\n2017-09-28 14:57:02\r\n你要理解你的愤怒，最终才能触及它的核心。它有某种深奥的内涵，帮助你让生活变得有意义。如果你确切地知道什么让你生气、你在和谁生气，你就能清楚自己的立场与事情的重点，以及该如何在情感上加以处理。\r\n愤怒理清了复杂的生活，并不断将其重组。\r\n向创可贴式的爱说“不”\r\n2017-09-28 17:54:12\r\n悲伤的时候，我们会号啕大哭，会流下很多很多泪水。这种悲伤和泪水，就是治疗性的。直面现实时的悲伤和泪水，是唯一能让我\r\n2017-09-28 17:54:18\r\n们告别悲惨往事的办法。除此以外，别无他法。\r\n“走饭”之死与快乐王子的“铅心”\r\n2017-09-29 16:11:41\r\n直面愤怒可能先要跨过一点——对愤怒的羞愧。看到并化解这份羞愧，是释放愤怒的关键所在。\r\n自卑，只是因为缺乏爱\r\n2017-10-20 16:28:46\r\n性格浓缩着我们童年的一切人际关系\r\n2017-10-20 16:30:01\r\n自卑与自信，其实是由我们小时候获得的爱的多少所决定的。如果从父母那里获得了足够多的爱，那么不管一个人的外在条件如何，他都会很\r\n2017-10-20 16:30:06\r\n自信。\r\n相反，如果从父母那里没有获得多少爱，甚至相反是被蔑视、被伤害甚至被虐待，那么不管一个人的外在条件如何，他都会很自卑。\r\n心灵成长书吧：《女心理师》\r\n2017-10-23 14:17:51\r\n法国一个哲学家曾称：任何一个人的人生，如果你往下看，都会看到一个深渊。\r\nPart 5 恐惧告诉你什么对你更重要\r\n2017-10-23 14:19:28\r\n许多恐惧所传递的信息是极具价值的。事实上，我们越恐惧一件事情，那件事情背后隐藏着的信息可能就越重要。\r\n无需战胜恐惧\r\n2017-10-26 16:29:54\r\n恐惧提醒你，什么是最重要的\r\n当陷入困境时，我们很容易认为，假若做出一些什么事情，就可以跳出困境或起码可以改善困境了。\r\n2017-10-26 16:30:00\r\n但是，假若你不理解自己是如何陷入困境的而只是急着去作一些改变，那么你作的这些改变，可能与你的心灵，与你真正的需要是背道而驰的。\r\n2017-10-26 16:30:19\r\n恐惧具有独一无二的价值，因为很多时候，只有恐惧才能强有力地提醒你，什么是最重要的。\r\n2017-10-26 16:33:47\r\n恐慌的背后，常藏着我们生命中重要的答案；恐慌程度越高，答案就越重要。\r\n人生为什么会轮回？\r\n2017-10-27 19:26:11\r\n接受，即接受自己的命运，承认自己自卑，或承认自己的确有一对很自卑的父母，自己对他们有点瞧不起，甚至非常有意见。当承认了这一事实后，你就会对自己的自卑或对父母的自卑就不那么在乎了。\r\n学会接受自己\r\n2017-10-30 16:38:19\r\n实际上，追求人格的自由，结束已经发生的事实对我们心灵的羁绊只有一条途径：接受已经发生的事实，承认它已不可改变。\r\n2017-10-30 16:38:56\r\n一个人假若常常失去控制，那么一个重要的原因是他把自己太多的事情压抑进了潜意识。\r\n这是最简单的否认，即我们对一些自己不喜欢的事实置之不理，认为自己那样就可以摆脱它的控制了。\r\n还有另一种否认。很多时候，我们会像小孩子一样，认为过去一些不好的事情不应该发生，一些人不应该那样对待自己。就好像过去那些事情还可以纠正过来似的。\r\n2017-10-30 16:39:31\r\n这两种否认，都会令我们在不好的事情中越陷越深。我们本来是想摆脱这些不好的事情对自己的消极影响的，但结果适得其反，它们对我们的影响反而越来越重。\r\n想结束这些不幸的事情对我们的影响，从而令自己的心灵获得自由，我们只有一件事情可以做：接受！\r\n所谓接受，即直面我们人生中的所有真相，深深地懂得，任何事实一旦发生就无可更改，而且不管多么亲密的人，我们都不能指望他们为自己而改变。\r\n2017-10-31 12:11:04\r\n很多时候，我们一看到解决问题的完美状态，就渴望自己立即抵达那个终极状态，当达不到的时候就谴责自己。这也是一种自恋，以为自己可以轻松拥有抵达完美状态的自由。但当这样想的时候，我们的自由度反而会受到损害，因为你谴责自己，其实就是你的一部分自我在谴责另一部分自我，而且一般都是“内在的父母”在谴责“内在的小孩”\r\n2017-10-31 12:11:18\r\n若想最快地获得自由，就要接受并尊重自己暂时难抵达最佳状态的事实。假若看到了自己的成长，那么也要接受这个事实。\r\n2017-10-31 16:38:46\r\n也有一些沉溺性的、歇斯底里的情绪，假若你经常失去控制地发泄情绪，那么，这种情绪一般都是在提示你，你的过去大有问题，你的潜意识大有问题。并且，你的情绪一定是在玩刻舟求剑的游戏，你现在发泄愤怒的对象，是被冤枉了的，你要回到船出发的源头，到那里去寻找答案。\r\n2017-10-31 16:39:53\r\n假若你明白了自己存在的卑微性，你会明白，你越懂得接受，你的心灵所享有的自由度就越高。\r\n宽容自己，才能宽以待人\r\n2017-10-31 16:40:20\r\n很多人生哲理，看起来很美，实际上很难做到，甚至做不到，因为超出了人类能力的范围。\r\n让你的身心重归流动\r\n2017-11-01 16:45:52\r\n不管深层的原因是什么，都可以概括地说，只有头脑的思考，而与身体失去了连接，也因而与自己的心理体验失去了连接，这就是绝缘体之所以成为绝缘体的原因。\r\n2017-11-01 16:47:55\r\n一个是，感受是痛苦的，所以要堵塞；另一个是，感受是有罪的，所以不能让它在身心中流动。\r\n",
        "tags": []
    },
    {
        "uri": "/post/读书笔记/_计算机网络_自顶向下",
        "content": "---\r\ntitle: 计算机网络_自顶向下\r\ndate: 2017-12-06 19:48:32\r\ntags: [\"读书笔记\"]\r\ncategories: [\"读书笔记\"]\r\ndraft: true\r\n---\r\n\r\n术语\r\nISP(Internet Service Provider): 因特网服务提供商",
        "tags": []
    },
    {
        "uri": "/post/读书笔记/_读书笔记-之-程序员修炼之道--从小工到专家",
        "content": "---\r\ntitle: 读书笔记-之-程序员修炼之道--从小工到专家\r\ndate: 2017-09-04 11:41:43\r\ntags: [\"读书笔记\"]\r\ncategories: [\"读书笔记\"]\r\ndraft: true\r\n---\r\n\r\n强力编辑器\r\n选一种编辑器，彻底了解它，并将其用于所有的编辑任务。如果你用一种编辑器进行所有的文本编辑，那么就不用停下来思考怎么完成文本操控。逐渐就会将必须的键击成为本能反应。编辑器就会成为双手的延伸，不会有任何阻塞。\r\n 如果可以将所有使用的编辑器的快捷键调成一致，这样就不用考虑不同场景下使用不同编辑器会用错快捷键。\r\n 可以将配置好的文件拷贝一份，这样新的环境就省去了重新配置一次的麻烦。\r\n 在IDEA中，有快速模板，可以熟悉或者自己配置一些，这样能够提高编码的效率\r\n\r\n 调试\r\n对于许多开发者来说，调试本身是一个敏感、感性的话题。可能会遇到抵赖、推诿、蹩脚的接口、甚或是无动于衷，而不是把它当做要解决的难题。\r\n要接受事实：调试就是解决问题，而不是发出指责\r\n\r\n调试的思维方式\r\n在开始调试时，选择恰当的思维方式十分重要。你必须要关闭自我保护的许多防卫措施，忘掉可能面临的任何项目压力，让自己放松下来。\r\n调试的第一准则就是 不要恐慌，接受bug\r\n在目睹bug或见到bug报告的第一反应是“那是不可能”，就完全错了。不要在“那是不可能发生”上浪费一个脑细胞，因为很明显，那已经发生了。\r\n 从何处开始\r\nbug报告的准确性在经过第三方之手时会进一步降低，需要观察用户的操作，获取第一手的细节。\r\n测试策略\r\n使数据可视化。\r\n    要想知道程序在做什么，最容易的途径是好好看看它操作的数据。通过数据的变化，能够更好地了解程序是怎么做的，为什么不符合预期。\r\n跟踪\r\n    调试器通常会聚焦于程序现在的状态。有时候，我们要知道程序或者数据随时间变化的状态。而在并发进程、实时系统、还有基于事件的应用等系统中，调试器有时会无法准确诊断一些错误。这时候，我们可以使用跟踪语句，沿着调用树下降，增加跟踪语句\r\n    跟踪日志信息应该采用规范、一致的格式，这样才能用awk或者Perl处理日志文件\r\n消除过程\r\n    找到问题原因的一种非常简单、却又特别有用的方式就是向别人解释它：你只是一步步解释代码要做什么，常常问题就自己跳出来了。\r\n    大多数项目中，调试的代码可能是团队的其他成员编写的应用代码、第三方产品以及平台环境的混合物，首先要怀疑的是自己代码的问题，而不是平台或者第三方库。\r\n    如果你只改动了一样东西，系统就停止工作，不管看起来有多牵强，但是就是这些改动的问题。有时改动的内容在控制之外：OS新版本、编译器、数据库等，都可能会破坏影院阿里代码的正确性，出现新的bug。所以必须要在新的条件下重新测试系统。\r\n    如果没有显而易见的地方入手查找，那么还可以依靠简单粗暴的二分查找。\r\n造成惊讶的元素\r\n    在发现某个bug让你吃惊时，你必须重新评估你确信不疑的“事实”。某样东西出错时，你感到吃惊的程度同你对正在运行代码的信任以及信心成正比。必须意识到一个或更多的假设是错的，不要假定，要用数据和边界条件证明。\r\n    在你修正一个问题时，会不会因为修正这个问题，而衍生出其他的问题，这是需要详细测试的。\r\n\r\n 文本操控\r\n寻找一种短时间内可以编写完成的，文本操控语言，例如Perl、Python等，这样能够节省大量的时间做其他事。\r\n\r\n代码生成器\r\n当面临重复的编码工作时，就很有必要编写一套代码生成器 —— 编写能编写代码的代码\r\n 被动代码生成器\r\n被动代码生成器本质上就是参数化的模板，根据输入产生输出，只不过输出的是可用的代码。被动代码生成器不必完全准确，我们可以在后期进行修正\r\n创建新的源文件：每个代码文件中的标准注释，版权信息等重复信息，都可以通过代码生成器生成\r\n转换文件的格式，比如从xml转换到json\r\n生成查找表及其他在运行时计算昂贵的资源: java的Map要添加许多数据时，可以通过读取文件生成代码\r\n\r\n主动代码生成器\r\n被动代码生成器只是一种遍历手段，主动代码生成器是“DIY”原则的必备品。\r\n设法让两种完全不同的环境同时工作时，应该考虑用主动代码生成器\r\n代码生成器最复杂的部分往往是分析输入文件的解析器。\r\n 在Java中，适合主动代码生成的是 字符串模板，在解释型语言中，可以直接生成可执行代码\r\n\r\n 注重实效的偏执\r\n\r\n你不可能写出完美的软件，所以即使是自己的代码，也要针对自己可能的错误进行防卫性编程\r\n按照合约设计\r\n\r\n DBC\r\nDBC(按照合约设计)核心是用文档记载软件模块的权利与责任，以保证程序的正确性。正确性就是不多不少，做它声明要做的事。\r\n\r\n在设计时简单地列举输入域的范围是什么，边界条件是什么，例程允诺交付什么——或者不交付什么——是向着编写更好的软件的一次飞跃。\r\n 将合约放到注释中，说明要做的事，理清思路，往往能避免许多bug\r\n\r\n语义不变项 它必须是事物的确切含义的中心，而不受反复无常的政策的支配。因此不能把固定的需求、不可违反的法则与那些仅仅是政策的东西混为一谈。\r\n\r\n死程序不说谎\r\n我们很容易掉进“那不可能发生”的心理状态。大多数人编写的代码都不检查文件是否能成功关闭，或者某个跟踪语句是否按照我们的预期写出。\r\n如果出现问题，选择让程序崩溃，而不是破坏其他数据 因为死程序带来的危害通常比有疾患的程序要小得多。\r\n\r\n 何时使用异常\r\n关于异常的问题之一就是知道何时使用它们。异常应该很少作为程序的正常流程的一部分使用，应该保留给意外事件。\r\n假如，代码试图打开一个文件进行读取，而文件并不存在，应该引发异常么？\r\n这取决于实际情况。如果文件应该在那里，那么引发异常就有正当的理由，因为意外的事发生了；另一方面，如果不清楚文件是否应该存在，那么你找不到它看来不是异常，返回一个错误才是合适的。\r\n将异常用于异常的情况\r\n\r\n怎样配平资源\r\n编程时，有些资源是需要我们管理的：内存、事务、线程、文件等所有数量有限的事物。一般情况下，资源使用遵循一种可预测的模式：分配资源、使用资源、解除资源占用。\r\n但是，对于资源分配和解除分配的处理，需要始终如一的计划，即 要有始有终\r\n例如，一个例程需要配平对文件的使用：打开和关闭在同一个地方\r\n\r\n 嵌套分配资源\r\n对于一次需要不止一个资源的例程，可以对资源分配的基本模式扩展，有如下建议：\r\n以与资源分配的次序相反的次序解除资源的分配。这样，如果一个资源含有对另一个资源的引用，就不会造成资源被遗弃\r\n在代码的不同地方分配同一组资源时，总是以相同的次序分配它们，这样能够降低死锁发生的可能。\r\n\r\n耦合\r\n把代码组织成最小模块，并限制它们之间的交互。如果随后出于这种必须替换某个模块，其他模块仍能继续工作。\r\n\r\n 函数的得墨忒耳法则\r\n假如，我们编写一个类，生成科学记录似数据图。数据记录仪分布在世界各地，每个记录仪对象都含有一个地点兑现个，给出其位置及时区。想让用户选择记录仪，绘制其数据，并标上其正确的时区。可以：\r\n`java\r\npublic void plotDate(Date date, Selection selcetion) {\r\n    TimeZone tz = selection.getRecorder().getLocation().getTimeZone();\r\n    ...\r\n}\r\n`\r\n\r\n但现在绘制程序将三个类耦合在一起：Selection、Record 和 Location。这种方式使得我们类的依赖类的数目增加，这导致了系统其它地方的无关改动影响你代码的风险的增加。例如，对Location做出改动，使它不在直接包含TimeZone，你也需要改动你的代码。\r\n如下使用所需的东西，是不是更好：\r\n`java\r\npublic void plotDate (Date date, TimeZone tz) {\r\n    ...\r\n}\r\nplotDate(someDate, someSelection.getTimeZone());\r\n`\r\n\r\n这样程序将不会关心 TimeZone 来自哪个类，降低了风险。\r\n\r\n对象直接的横贯关系有可能很快带来依赖关系的组合爆炸：\r\n导入的类的数量，比测试程序还要长\r\n对某个模块简单的改动会传遍系统的一些无关模块\r\n开发者害怕改动代码，因为他们不知道哪些代码可能会受到影响。\r\n\r\n我们可以使用德墨忒尔法则来设计我们的方法和函数，来达到： 使模块之间的耦合减至最少\r\n\r\n得墨忒耳法则规定： 某个对象的任何方法都应该只调用属于如下情形的方法： 它自身；传入该方法的任何参数；它创建的任何对象；热河直接持有的组件对象 ：\r\n`java\r\npublic class Demeter {\r\n    private A a;\r\n    private int func() {}\r\n    public void example(B b) {\r\n        C c;\r\n        int f = func(); // 它自身\r\n        b.invert();                // 传入该方法的任何参数\r\n        a = new A();\r\n        a.setActive();             // 它创建的任何对象\r\n        c.print();                // 任何直接持有的组件对象\r\n    }\r\n}\r\n`\r\n\r\n因为遵循得墨忒耳法则缩小了调用类的响应集的规模，以这种方式设计的类的错误也往往更少。但是与任何技术一样，我们必须平衡特定应用的各种正面因素和负面因素，通过违反法则，而换取速度的提升，是可以接受的。\r\n\r\n\r\n\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/post/青海四日游",
        "content": "---\r\ntitle: 青海湖四日游\r\ndate: 2017-07-22 19:42:25\r\ntags: [\"旅行\"]\r\ncategories: [\"旅行\"]\r\n---\r\n\r\n最近趁着女朋友暑假，去青海湖周边自驾旅游一次。不过开车经常会迎着或者侧对着太阳，必须做好防晒的准备\r\n\r\n都说去青海，来回必须有一次交通方式是火车。因此，我们9号下午坐火车从北京出发，历经24小时到达西宁市。从天水站开始，沿途风景开始秀丽起来，可以通过欣赏景色来缓解旅途的无趣和疲惫。\r\n!-- more --\r\n\r\n\r\n\r\n西宁市 -- 7.11\r\n从火车站下车后，我们直奔具有美食街之称的莫家街。很多网友都推荐了马忠食府，像一个食堂，充值拿卡，刷卡取餐，退卡返还余额。吃了大名鼎鼎的酿皮和酸奶，说实话感觉一般，没有传说中的那么好吃。\r\n随后在屈臣氏买了些面膜和洗面奶，西宁那边真的很晒，预先做好防护措施吧。回来之后，同事都说怎么没有晒黑。\r\n我们是在神州租车上预定的别克昂科拉。在附近随便找了家酒店--西宁元树花园酒店，是在小区里边的一个住宿地。可能是一层的缘故，被褥比较潮湿，环境也一般。安排好住宿的地后，我在周围找了下神州租车的具体位置，先踩好点，明天好提车。\r\n 日月山 -- 7.12\r\n早上七点起来，收拾好东西，去神州租车顺利提车。这是我第一次开车上路，难免有些紧张。开始都不敢转弯，不敢停车，因此也没在西宁吃早饭。直接开车出了西宁，上了绕城高速。一直开车到湟源县城，顺便补了下早饭。如果不吃饭，店家还不让上他们的厕所。后来开车直接上了日月山，开阔的视野，美丽的风景，都让人煞是陶醉。因为昨天晚上被抢了被子，没有睡好，感觉头疼（后来才知道是高原反应），所以在日月山的停车场小歇，睡了会儿觉~\r\n\r\n\r\n\r\n青海湖 -- 7.12\r\n日月山小歇后，驱车去青海湖。开车两个小时左右后（速度比较慢），终于看到了传说中的青海湖。在视野的尽头，碧水和青天连成一色，中间点缀着些许白色。我和湖之间是黄绿交织的。黄色的是盛开的油菜花，绿色的这边的主食青稞。路上时不时超过骑行的坚毅骑者。开车绕青海湖将近一半的路程，有不少上下坡的路段，有些还略陡，对绕湖骑行的人，愈发佩服。\r\n公路与油菜花之间是用简陋的铁丝网成片围起来的，找了家看着还不错的，在黄色的海洋中竖着一个牌子，写着“爱你一万年”。游览完油菜花，照完相片，驱车向里，走到了湖边。透过清澈的湖水，可以看到很多被一波波湖水磨掉棱角的不规则石头。顺着波纹，看到远处倒影的白云，在这里，可以分清湖与天之间的界限。天空碧澈如洗，完全远离了城市的喧嚣和雾霾。比较不爽的就是收费50，厕所也是收费的。\r\n!-- 此处用注释写上 ： 适合浇花，施肥 --\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n想体验一下游牧部落的蒙古包，预定了青海湖游牧部落酒店。百度地图导航到“青海湖游牧部落酒店”，开车到环湖西路十三公里左右的地方，本以为到了。因为高原反应，头已经比较疼了，也不想再继续开车，没想到导航地址应该是“青海湖黑马游牧部落酒店”，在环湖西路七十公里的地方。而且这时候亲爱的老婆，也有些高原反应，有些晕车，竟然吐了，我头更疼了。不过停车的地方，是碧水连着蓝天，中间没有一丝杂质，最适合看日出了。\r\n\r\n\r\n\r\n可惜已经预定了酒店，舍不得那两百多块钱，而且这附近没有住宿的地，只能开车继续走。非常担心老婆的身体，只想着尽量开快些，这样让老婆少遭些罪。不觉间已经把速度提到将近100，也许是化担忧为力量，也许是挥发出自己未知的潜力，头不是那么疼了。否极泰来，半途中，老婆身体好转，开始能跟我闲聊了。到酒店已经将近晚上8点了，可是太阳还是高高在上，散发着热量。安排好住宿，吃完了烤羊肉，太阳开始慢慢落山了，真的是落山。日落把天空都染红了，整个草原都镀上了一层红色。随着太阳逐渐消散，黑暗慢慢蚕食光亮，气温也翻跟头地往下降，看着别人穿上厚厚的暖和的衣服，我和老婆只能缩到被窝里，积攒明天看日出的热量。还好热心的老板给我们准备了电热毯，否则，晚上真不知道怎么熬过去了。\r\n\r\n\r\n\r\n没有搜日出时间，和老婆，早上5点就开车到了湖边，在车上开着暖风等了将近一个小时，还被一个老藏民用藏语啰里啰嗦地收了15块钱。不过为了看日出，这些都值了。看着太阳一点点挣脱束缚，跳出来，果真如老舍文章上写的那样，不同的是远处是慢慢的，由黑转亮的青山。没办法，找的看日出的位置不尽人意。\r\n\r\n\r\n\r\n\r\n\r\n 卡茶盐湖 -- 7.13\r\n从青海湖游牧部落酒店出来，驾车一百五十多公里就到了号称“天空之境”的卡茶盐湖。\r\n湖名，估计是盛产盐而得来，所谓“茶卡”是藏语的“盐池”。开车近乎绕卡茶盐湖一圈才到了入口处。途中，可以看到和白云鬼混在一起的白色的卡茶盐湖。与青海湖的清亮透彻，小家碧玉不同，卡茶盐湖是洁白如雪，端庄肃穆，似乎诉说这它在古丝绸之路的辉煌。从远处可以清晰地看到山、云、人的倒影，大胆阐释了对称美。偶尔一阵波纹荡漾开来，倒影也开始娇羞起来，变得若隐若现。为了防止我们这些凡夫俗子玷污盐湖的圣洁，在可以下去的地方，是需要穿上鞋套的。来盐湖的路上，有当地人，顶着烈日，叫卖着鞋套。可惜当时不知道鞋套是何用处，遂没有管它。景区里边，鞋套却是需要15一双，贵了许多。为了近距离接触这座“天空之境”，忍痛买了两双。不过鞋套是防不住调皮的湖水的，在深些的地方，湖水还是跑进了鞋中。于是，将鞋袜脱下，扔在一旁，赤脚穿上鞋套。慢慢地踏进湖里，顿时感觉仿佛踩在了满是石子的不平整路上。从边缘处，躲避着黑色塌陷的无底洞，小心翼翼地向湖中心走去。云在水中的倒影，跟你玩起了你追我赶的游戏，总是不能把他们踩在脚下。老婆看着别人拍的彩色倒影的照片，很是羡慕，却是抓耳挠腮，不得其解。后来拉开了距离，才晓得高中学习的知识已经遗忘了，水的倒影和太阳产生的影子傻傻地分不清楚。\r\n\r\n\r\n\r\n\r\n\r\n我们游玩的时间是下午2点到5点。太阳毫不留情地把热量挥洒到大地上，遮阳伞仿佛也受不了这种热情，只有盐湖在那静静地享受着。烤熟的大地，驱赶着几乎快要中暑的我们，只得匆匆告别了秀丽的卡茶盐湖。车子里已经被蒸的热气腾腾，赶紧打开车窗，把冷风调到最低，我们在车外贪婪地享受着片刻的清凉。\r\n祁连山草原 -- 7.14\r\n4天的行程很紧，时间催促着我们赶往下一个景点--祁连山草原。从炽烈的阳光下，开车到伸手不见五指的黑夜，终于在晚上十点的时候，在青海湖旁的泉吉乡圣洁宾馆投宿。晚餐是在天峻县的兄弟茶餐厅，条件和饭菜都不错，能在县城碰上一个有品位的餐馆，也是有些惊喜的。在路程上来说应该先去卡茶盐湖的，只是提前预定了酒店的缘故，多跑了两百多公里。\r\n早上起来在一家南方人开的小店里边解决了早餐。跟老板聊了几句，才知道幸好是在老婆暑假的时候来旅游的。青海湖到了十月份左右，赶上冷空气从这边过，那时候整天北风呼啸，也开始缺起氧来，是待不下去的。大部分人会在那时候去其他地方过冬，很多热闹的营业商店，都会关掉，外来人是适应不了高原上的秋冬的，后来晚上住宿的老板也如是说。（回到北京，听同事说，十一的时候，也有好多人去青海湖，不过那时候需要把能穿的都穿上。因为那边山路比较多，估计自驾就很有挑战性了）吃完早饭，太阳就开始暴晒，不给人留一点清凉。顶着烈日行车，沿西莎线二十多公里处，有一片油菜花海。可以放心的停车，照相留念，没有人看管，也就无从收费。青海湖的油菜花却是也比不上这的，有一个小亭子，用木头搭建的，却是不遮光的。在此，可以俯瞰整个花海，在风中摇曳，一望无际。\r\n\r\n\r\n\r\n继续行车，从一个特别小而难走的路，下了西莎线，进入了哈热段。与路途中的标语形成鲜明对比的，是凹凸不平，如羊肠小道的公路，时不时地还会有大坑给你惊喜。后来才知道，这样的路已经算是不错了。从哈热段上了省道204，到了盘大公路，才知道什么是山路，什么是山路十八弯，水路九连环。有很长一段公路是石子铺成的，更有甚者，就是比较宽敞的土路。慢速摇摇晃晃地通过，尤其是一段上山和下山的路，很多死弯。对于新手的我来说，都已经快绝望了，但也咬牙开出来了，给自己赞一个。\r\n\r\n\r\n\r\n\r\n\r\n\r\n在途中会遇到挡路的绵羊，如果是正对着它们还好，如果要是从后面超车，那是要难死了，鸣笛是不管用的，只能耐心等它们的主人驱赶或者它们从公路上转移了。\r\n\r\n\r\n\r\n从盘大公路转到西张线的时候，有一片空地可以休息。在这可以清楚地看到远处悠悠白云下白蒙蒙的雪山。由于严重低估了开车经过山路的时间，到达百度地图导航的祁连山草原，已经是下午4点多了。也许是前几天没有休息好，也许是有些高原反应，开车却是不行了。只得到峨堡镇的牧家住宿住下，随后在附近转悠下来。晚上终于是尝了手抓羊肉，或许是我舌头没那么敏感，对吃食兴趣不大，却是感觉味道一般。在旅店老板的推荐下，去了藏民家参观。路途上还有藏民收拾好的牦牛粪便，估计是用来烧的。他们住宿的地方很奇特，是自己搭建的帐篷，外边放着太阳能电池板。在门口周围是两堆东西，估计是晚上用来当门用的。帐篷的中间一个长条形的炉子，添加燃料的在一边，烧火的在另一边。他们是用羊粪当燃料的，炉子上边放着一大一小两个壶，是用来煮奶茶的。帐篷的顶部是留出长条形的一块。即可以看到蔚然的天空，也让炉子冒出的烟能顺利跑出去。牧民也比较健谈，聊了些风土人情，还给了我们些虫草（我们是后来才知道这个是冬虫夏草的），说是可以减轻高原反应。因为牧民忙着去收牦牛，所以没有能够穿上藏袍。他们用牦牛颈上的绳套绑到下面固定好的绳子上，防止晚上牦牛乱跑。\r\n\r\n\r\n\r\n第二天，早上起来，老婆就兴冲冲的拉着我，要去穿藏袍。我们到的时候，藏民正忙着用一人环抱的大铁盆熬煮酸奶，看到旁边已经熬好了一盆了。不知道他们是要卖出去，还是怎么。藏民帮老婆打理好藏袍，戴上帽子和挂饰。迎着朝阳，挥动着裙子，煞是好看。\r\n\r\n\r\n\r\n不过我们却是对所谓的祁连山草原失望起来，虽然周围都是草，但真没啥美景。后来才知道，这只是去张掖，七彩丹霞的必经之路，却算不上是美丽的草原。\r\n 卓尔山 --7.14\r\n从峨堡镇出发已经快十点了，主要是走的省道302，比昨天的路好走了许多。临近卓尔山的时候，就已经有零零星星的景点了。我们只在“林海听涛”的地方稍作停留，林是有的，不过涛却是悄悄溜走。在这可以清晰地看到远处的丹霞地貌，红绿相间，远处的雪山也若隐若现。\r\n\r\n\r\n\r\n中午的时候，赶到了卓尔山，车不能直接开上去，只能放到免费的停车场。门票加往返车费总共八十，摆渡车B线是上山的，A线是下山的。稍等片刻，就坐车上山了。路途也有许多美景，近处的黄色的油菜花，绿色的青稞点缀其间，接着就是红褐色的健壮岩石，远处的雪山，像是蒙着白色丝巾的朦胧大姑娘。上山的路是由木头堆砌而成，虽然不陡峭，但是也可以看出当时花费了巨大的人力物力。\r\n\r\n\r\n\r\n\r\n\r\n因为是顶着烈日爬山，高原上的紫外线也很强烈，秀色可餐的风景才能带来一丝慰藉。顺着木头铺成的路，一步步走到山顶，丝丝凉风拂面，带走了焦躁和困倦。山顶的起伏不大，可以绕山顶一圈，处处都是风景。从山顶上，可以俯视整个祁连县城，干净整洁，建筑与自然环境之间相辅相成，毫无违和感。建筑成功融入到自然景色之中，又成为其点睛之笔。这是座美丽的城市，是大自然的宠儿，在群山环抱中，八宝河静静流淌，让人有在此定居，从此不问世事，陶醉于美景的冲动。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n从山顶的另一面，能够望到远处为皑皑白雪所覆盖的牛心山。因为还要回程，只能与卓尔山依依惜别。\r\n\r\n\r\n\r\n无论如何都要从省道204走一遭，才能说去祁连山草原旅游过。从祁连县出城不远，就可以听到“林海听涛”的涛了。林间清澈见底的小溪水从石间欢快流过，吸引着过路的游客。捧一把溪水，调皮地从指缝间滑落，凉飕飕的。继续走，就到了海拔4120的大冬树山垭口。终于可以体会“会当凌绝顶，一览众山小”。凛冽的风从山顶吹过，吹走了仅留下的热量，远处黑乎乎的云压了过来，不敢久留，急匆匆踩上油门，跑了。\r\n\r\n开车到吉龙沟附近，突然走进一副山水画里。画里面可以看到远处乌云下的青翠山脉，羊啊牛啊围着雪白的帐篷在欢乐地玩耍。一条小河从脚下静淌淌流过。我们像是那只掰棒子的熊，每一个可以泊车的地，都迫不及待地停车。期待前方有更美，更让人陶醉的景色，可又怕这是最后一处美景。走走停停，时间流逝太快，为了赶上投宿的地，只能一步三回头地慢慢开车走了。\r\n阳光从乌云缝隙里悄悄洒落，终是没有挣脱束缚，瓢盆大雨乍然惊现。大雨过后，彩虹偷偷在如洗的碧空中出现，沧桑劲壮的公路，构成一幅美丽画卷。就像卓尔山上的阿姨所说：如果我是一个画家，我就把眼前的景色画进画里；如果我是一个诗人，我就用最美丽的诗句，歌颂眼前的美景...。碧澈的天空，让人忍不住，仰天长啸。\r\n\r\n\r\n\r\n\r\n\r\n旅行的时间总是过的那么快，转眼间，就到了离别的时候了。从八一路客运站坐大巴到曹家堡机场，还好飞机没有取消。看着西宁市慢慢变小，依依不舍。\r\n\r\n\r\n[1]: http://othw8pf44.bkt.clouddn.com/37C12523FDAD7E7ABA5FB3E3EB905B32.png  \"火车上\"\r\n[2]: http://othw8pf44.bkt.clouddn.com/IMG_1326.jpg     \"卓尔山 林海听涛\"\r\n[3]: http://othw8pf44.bkt.clouddn.com/IMG_1791.jpg     \"祁连山草原\"\r\n[4]:  http://othw8pf44.bkt.clouddn.com/IMG_1797.jpg    \"祁连山草原\"\r\n[5]:  http://othw8pf44.bkt.clouddn.com/IMG_1772.jpg    \"西张线 油菜花\"\r\n[6]: http://othw8pf44.bkt.clouddn.com/IMG_0465.jpg   \"青海湖日出\"\r\n[7]: http://othw8pf44.bkt.clouddn.com/IMG_1748.jpg   \"青海湖日出\"\r\n[8]: http://othw8pf44.bkt.clouddn.com/IMG_0417.jpg     \"青海湖\"\r\n[9]: http://othw8pf44.bkt.clouddn.com/IMG_0364.jpg     \"青海湖畔之油菜花\"\r\n[10]: http://othw8pf44.bkt.clouddn.com/IMG_1627.jpg      \"省道204阴天\"\r\n[11]: http://othw8pf44.bkt.clouddn.com/IMG_1623.jpg     \"省道204乌云\"\r\n[12]: http://othw8pf44.bkt.clouddn.com/IMG_1580.jpg \"日月山\"\r\n[13]: http://othw8pf44.bkt.clouddn.com/IMG_1796.jpg     \"祁连山草原\"\r\n[14]: http://othw8pf44.bkt.clouddn.com/IMG_1403.jpg     \"卓尔山\"\r\n[15]: http://othw8pf44.bkt.clouddn.com/IMG_1393.jpg     \"卓尔山\"\r\n[16]: http://othw8pf44.bkt.clouddn.com/IMG_1450.jpg     \"卓尔山\"\r\n[17]: http://othw8pf44.bkt.clouddn.com/IMG_1459.jpg     \"卓尔山\"\r\n[18]:  http://othw8pf44.bkt.clouddn.com/IMG_1217.jpg      \"峨堡镇之藏袍\"\r\n[19]:   http://othw8pf44.bkt.clouddn.com/IMG_1170.jpg   \"峨堡镇\"\r\n[20]:  http://othw8pf44.bkt.clouddn.com/IMG_0967.jpg    \"盘大公路\"\r\n[21]: http://othw8pf44.bkt.clouddn.com/IMG_0958.jpg    \"盘大公路\"\r\n[22]: http://othw8pf44.bkt.clouddn.com/IMG_0926.jpg     \"盘大公路之羊群\"\r\n[23]: http://othw8pf44.bkt.clouddn.com/IMG_0894.jpg    \"山村野花\"\r\n[24]: http://othw8pf44.bkt.clouddn.com/IMG_0545.jpg   \"卡茶盐湖\"\r\n[25]: http://othw8pf44.bkt.clouddn.com/IMG_0770.jpg   \"卡茶盐湖\"\r\n[26]: http://othw8pf44.bkt.clouddn.com/IMG_0443.jpg     \"青海湖之蒙古包\"\r\n[27]: http://othw8pf44.bkt.clouddn.com/IMG_0435.jpg     \"青海湖之美景\"\r\n[28]:  http://othw8pf44.bkt.clouddn.com/IMG_1645.jpg    \"青海湖畔\"",
        "tags": []
    }
]