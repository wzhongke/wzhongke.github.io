<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>World of Wang</title>
    <link>https://wzhongke.github.io/</link>
    <description>Recent content on World of Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright@Kevin Tan</copyright>
    <lastBuildDate>Sat, 21 Apr 2018 11:28:11 +0000</lastBuildDate>
    
	<atom:link href="https://wzhongke.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>es6</title>
      <link>https://wzhongke.github.io/post/front/es6/</link>
      <pubDate>Sat, 21 Apr 2018 11:28:11 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/es6/</guid>
      <description>babel: ES6 转换成 ES5 babel 是一个将ES6转换成ES5的转码器，babel的配置文件是 .babelrc，存放在项目的根目录。 全局安装babel： $ npm install --global babel-cli</description>
    </item>
    
    <item>
      <title>webpack</title>
      <link>https://wzhongke.github.io/post/front/webpack/</link>
      <pubDate>Fri, 13 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/webpack/</guid>
      <description>安装 使用如下命令安装webpack到当前目录下 npm install webpack --save 如果需要使用 webpack 命令行，需要全局安装 npm install webpack-cli -g 如果因为权限问题，安装失败，则需要使用如下命</description>
    </item>
    
    <item>
      <title>字符串匹配算法</title>
      <link>https://wzhongke.github.io/post/algorithms/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 12 Apr 2018 11:39:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/algorithms/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</guid>
      <description>最近在做结果过滤时，碰到了一些字符串匹配效率低下的问题。在网上查找了一些字符串匹配的算法，有KMP算法，多模AC匹配算法等。 BMP算法 坏字符</description>
    </item>
    
    <item>
      <title>nodejs 学习笔记</title>
      <link>https://wzhongke.github.io/post/front/nodejs/</link>
      <pubDate>Thu, 08 Mar 2018 12:01:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/nodejs/</guid>
      <description>创建一个应用 使用Node.js时，不仅仅在实现一个应用，同时还实现了整个HTTP服务。 Node.js有如下三部分组成： 1. 引入required</description>
    </item>
    
    <item>
      <title>css使用方式总结</title>
      <link>https://wzhongke.github.io/post/front/css-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 08 Mar 2018 11:28:11 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/css-%E6%80%BB%E7%BB%93/</guid>
      <description>写在前面的话 在使用css的过程中，总会有一些需要查询或者迈过的坑，产生一些想法和处理问题的方式，亦或自己的经验和体会。将自己实践过程中碰到过</description>
    </item>
    
    <item>
      <title>spring 学习笔记</title>
      <link>https://wzhongke.github.io/post/java/springlearn/</link>
      <pubDate>Sun, 21 Jan 2018 16:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/springlearn/</guid>
      <description>IoC (Inversion of Control), 也叫 DI (Dependency injection)，对象通过构造函数参数，工厂方法参数或者在工厂方法构造或返回的实例上设置属性来定义他们之间的依赖关系，容</description>
    </item>
    
    <item>
      <title>树算法</title>
      <link>https://wzhongke.github.io/post/algorithms/%E6%A0%91/</link>
      <pubDate>Thu, 11 Jan 2018 08:37:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/algorithms/%E6%A0%91/</guid>
      <description>二叉搜索树 搜索树结构支持许多动态结合操作，包括SEARCH、MINMUM、MAXIMUX、PREDECESSOR、SUCCESSOR、INS</description>
    </item>
    
    <item>
      <title>linux编译安装httpd</title>
      <link>https://wzhongke.github.io/post/linux/make%E5%AE%89%E8%A3%85httpd/</link>
      <pubDate>Thu, 28 Dec 2017 19:21:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/make%E5%AE%89%E8%A3%85httpd/</guid>
      <description>有时候需要在内网的机器上安装httpd，因为机器不能上网，yum源也不可用，只能手动编译。 准备工作——下载httpd的安装包 Apach Http server apr以及</description>
    </item>
    
    <item>
      <title>mathjax 符号说明</title>
      <link>https://wzhongke.github.io/post/mathjax/</link>
      <pubDate>Wed, 27 Dec 2017 12:50:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/mathjax/</guid>
      <description>使用MathJax插入公式 MathJax 插入的公式有两种形式：行内公式和独立公式。 1. 默认的行内公式是使用 $...$或 \(...\) 符号包裹内容。如 $a^2=b^2+c^2$ 2. 默认的独立公式</description>
    </item>
    
    <item>
      <title>hugo markdown 中使用javascript</title>
      <link>https://wzhongke.github.io/post/hugo-markdown%E4%B8%AD%E4%BD%BF%E7%94%A8javascript/</link>
      <pubDate>Sun, 24 Dec 2017 15:13:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/hugo-markdown%E4%B8%AD%E4%BD%BF%E7%94%A8javascript/</guid>
      <description>问题 在使用hugo制作个人博客时，不支持在markdown文件中直接引入&amp;lt;script&amp;gt;/*javascript code*/&amp;l</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://wzhongke.github.io/post/algorithms/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Fri, 22 Dec 2017 08:37:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/algorithms/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>什么是动态规划算法 动态规划算法同分治方法相似，都是通过组合子问题的解来求解原问题。分治算法将原问题划分为互不相交的子问题，递归地求解问题，在</description>
    </item>
    
    <item>
      <title>图算法</title>
      <link>https://wzhongke.github.io/post/algorithms/%E5%9B%BE/</link>
      <pubDate>Fri, 22 Dec 2017 08:37:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/algorithms/%E5%9B%BE/</guid>
      <description>图的表示 我们用$V$表示图的结点数，$E$表示图的边的条数。 对于图$G=(V,E)$，可以用两种标准表示方法表示：将图作为邻接链表的组合；将</description>
    </item>
    
    <item>
      <title>nginx 配置</title>
      <link>https://wzhongke.github.io/post/linux/nginx%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 21 Dec 2017 11:08:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/nginx%E9%85%8D%E7%BD%AE/</guid>
      <description>nginx配置之 location nginx 的 location 配置可以有如下多种方式： # 精确匹配 location = / { # 精确匹配 / ，主机名后不能有任何字符串 operateA; } # 通用匹配，未匹配到其他loca</description>
    </item>
    
    <item>
      <title>paramiko-批量操作终端</title>
      <link>https://wzhongke.github.io/post/python/paramiko-%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E7%BB%88%E7%AB%AF/</link>
      <pubDate>Wed, 06 Dec 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/python/paramiko-%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E7%BB%88%E7%AB%AF/</guid>
      <description>paramiko Paramiko 是SSHv2协议的 python(2.7, 3.4+) 实现，提供了client和server的功能。使用该模块可以方便的进行ssh连接或者sftp协议的传输。 argparse argparse 模块可</description>
    </item>
    
    <item>
      <title>css 动画</title>
      <link>https://wzhongke.github.io/post/front/css-%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Fri, 01 Dec 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/css-%E5%8A%A8%E7%94%BB/</guid>
      <description>通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。 transitions 可以通过设置 transitions 来实现过渡效果。其用</description>
    </item>
    
    <item>
      <title>XPath 笔记</title>
      <link>https://wzhongke.github.io/post/java/xpath/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/xpath/</guid>
      <description>XPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。 XPath 节点 在XPath中有七种类型的节点：元素、属性、文本、命</description>
    </item>
    
    <item>
      <title>创建型模式</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>创建型模式包括：Abstract Factory、Builder、Factory Method、Prototype、Singleton 创建型模式</description>
    </item>
    
    <item>
      <title>创建者模式之生成器</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>构建复杂对象的生成器 &amp;ndash; Builder 生成器模式适合于创建一个对象很复杂的时候。 意图 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表</description>
    </item>
    
    <item>
      <title>结构型模式</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>转换接口的适配器 &amp;ndash; Adapter 将一个类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>曾经多少次有过这种感觉：你已经解决过一个问题但就是不能确切知道不在什么地方或怎么解决的，如果你能记起以前问题的细节和怎么解决的，你就可以利用</description>
    </item>
    
    <item>
      <title>MySQL基础语句</title>
      <link>https://wzhongke.github.io/post/mysql/mysql%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sun, 08 Oct 2017 19:48:32 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/mysql/mysql%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5/</guid>
      <description>MySQL数据库 MySQL 是典型的关系型数据库，因为其免费开源，所以被广泛的应用 数据库是按照数据结构来组织、存储和管理数据的仓库当然我们也可以将数据</description>
    </item>
    
    <item>
      <title>MySQL技巧</title>
      <link>https://wzhongke.github.io/post/mysql/mysql%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sun, 08 Oct 2017 18:51:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/mysql/mysql%E6%8A%80%E5%B7%A7/</guid>
      <description>查询时间是今天的数据 sql select * from table_name where to_days(create_time) = to_days(now()); select * from table_name where date(create_time) = curdate(); 查询一周之内的数据 select * from table_name where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &amp;lt;= date(create_time); 其中DATE_SUB(date,INTERVA</description>
    </item>
    
    <item>
      <title>jvm调优</title>
      <link>https://wzhongke.github.io/post/java/jvm%E8%B0%83%E4%BC%98/</link>
      <pubDate>Thu, 21 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/jvm%E8%B0%83%E4%BC%98/</guid>
      <description>垃圾回收 CMS 收集器无法处理浮动垃圾（Floating Garbage），可能会出现 Concurrent Mode Failure 失败，而导致另一次 STW 的 Full GC 的产生。 由于 CMS 并发清理阶段用户</description>
    </item>
    
    <item>
      <title>linux 网络常用命令</title>
      <link>https://wzhongke.github.io/post/linux/linux-server/</link>
      <pubDate>Thu, 21 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/linux-server/</guid>
      <description>linux 常用网络命令 ifconfig, ifup, ifdown 这三个指令都是用来启动网络接口的。 1. ifconfig ifconfig主要是可以手动启动、观察与修改网络接口的相关参数。语法如下: ifconfig [interface] {up/down}</description>
    </item>
    
    <item>
      <title>java 泛型</title>
      <link>https://wzhongke.github.io/post/java/java-%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sun, 17 Sep 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/java-%E6%B3%9B%E5%9E%8B/</guid>
      <description>在java中使用泛型，可以避免使用Object或者强制类型转换。泛型最适用于集合类，比如List。 使用泛型编写代码增加了其可复用性，可以被许</description>
    </item>
    
    <item>
      <title>找出字符串最大回文</title>
      <link>https://wzhongke.github.io/post/algorithms/%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87/</link>
      <pubDate>Sun, 17 Sep 2017 14:20:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/algorithms/%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87/</guid>
      <description>题目 给定一个字符串 s，找到s中最长的回文字符串。可以假设s的最长长度是1000。 Example1 : Input: &amp;ldquo;babad&amp;rdquo; Output: &amp;ldquo;bab&amp;rdquo; Note: &amp;ldquo;aba&amp;rdquo; 也是可以的答案 Example2 : Input: &amp;ldquo;cbbd&amp;rdquo; Output: &amp;ldquo;bb&amp;rdquo; 解法 假设前i个字符</description>
    </item>
    
    <item>
      <title>vuex</title>
      <link>https://wzhongke.github.io/post/front/vuex/</link>
      <pubDate>Wed, 30 Aug 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/vuex/</guid>
      <description>Vuex 能做什么 Vuex将多个组件共享的状态从组件中抽离出来，，以一个全局单例的模式进行统一管理。 解决问题 - 多层嵌套组件间传参繁琐，且兄弟组件间的</description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://wzhongke.github.io/archive/</link>
      <pubDate>Sat, 19 Aug 2017 21:37:49 +0800</pubDate>
      
      <guid>https://wzhongke.github.io/archive/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://wzhongke.github.io/about/</link>
      <pubDate>Sat, 19 Aug 2017 20:09:28 +0800</pubDate>
      
      <guid>https://wzhongke.github.io/about/</guid>
      <description> Hello World! { &amp;quot;Name&amp;quot;: &amp;quot;Kevin Tan&amp;quot;, &amp;quot;Hobbies&amp;quot;: [&amp;quot;Piano&amp;quot;, &amp;quot;Movie&amp;quot;, &amp;quot;Linux&amp;quot;, &amp;quot;Cycling&amp;quot;, &amp;quot;LoL&amp;quot;], &amp;quot;Location&amp;quot;: &amp;quot;Hangzhou&amp;quot;, &amp;quot;Company&amp;quot;: &amp;quot;Netease&amp;quot;, &amp;quot;School&amp;quot;: &amp;quot;ZJU&amp;quot;, &amp;quot;Contacts&amp;quot;: { &amp;quot;Email&amp;quot;: &amp;quot;stkevintan@zju.edu.cn&amp;quot;, &amp;quot;Telegram&amp;quot;: &amp;quot;@kevinsfork&amp;quot;, &amp;quot;Weibo&amp;quot;: &amp;quot;@kevinclasky&amp;quot; } }  </description>
    </item>
    
    <item>
      <title>shell 编程</title>
      <link>https://wzhongke.github.io/post/linux/shell/</link>
      <pubDate>Sat, 19 Aug 2017 09:52:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/shell/</guid>
      <description>shell script虽然是程序，但是它处理数据的速度是不够的。因为shell用的是外部的命令bash shell的一些默认工具，所以它经常会调用外部</description>
    </item>
    
    <item>
      <title>sublime 配置</title>
      <link>https://wzhongke.github.io/post/sublime/</link>
      <pubDate>Sat, 19 Aug 2017 09:52:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/sublime/</guid>
      <description>配置markdown 安装package controll: 快捷键ctrl+\`打开Sublime控制台，输入下面代码： sublime 3 import urllib.request,os,hashlib; h = &#39;df21e130d211cfc94d9b0905775a7c0f&#39; + &#39;1e3d39e33b79698005270310898eea76&#39;; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) );</description>
    </item>
    
    <item>
      <title>vim 使用快捷键</title>
      <link>https://wzhongke.github.io/post/linux/vim%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 14 Aug 2017 18:51:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/vim%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>在我看来，vim是linux上内置的强大的文本编辑器。 基本操作 vim有三种模式：一般模式、编辑模式和命令行模式。 使用&amp;rsquo;i, I, o, O,</description>
    </item>
    
    <item>
      <title>git 版本管理工具</title>
      <link>https://wzhongke.github.io/post/git/</link>
      <pubDate>Sat, 12 Aug 2017 19:48:32 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/git/</guid>
      <description>git是比较常用的版本控制工具。 git的基本使用 git init : 创建新的git仓库 git clone path : 从远端服务器或本地检出仓库 git add filename 或者 git add * : 添加改动到缓存区</description>
    </item>
    
    <item>
      <title>单例实现方式</title>
      <link>https://wzhongke.github.io/post/java/%E5%8D%95%E4%BE%8B%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 30 Jul 2017 11:41:43 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/%E5%8D%95%E4%BE%8B%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid>
      <description>有时候需要采用延迟初始化来降低初始化类和创建对象的开销。双重检查锁定是常见的延时初始化技术。 基于volatile的单例，双锁检测 该方式中，必</description>
    </item>
    
    <item>
      <title>青海湖四日游</title>
      <link>https://wzhongke.github.io/post/%E9%9D%92%E6%B5%B7%E5%9B%9B%E6%97%A5%E6%B8%B8/</link>
      <pubDate>Sat, 22 Jul 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/%E9%9D%92%E6%B5%B7%E5%9B%9B%E6%97%A5%E6%B8%B8/</guid>
      <description>最近趁着女朋友暑假，去青海湖周边自驾旅游一次。不过开车经常会迎着或者侧对着太阳，必须做好防晒的准备 都说去青海，来回必须有一次交通方式是火车。</description>
    </item>
    
    <item>
      <title>java中没有见过的用法</title>
      <link>https://wzhongke.github.io/post/java/java%E4%B8%AD%E6%B2%A1%E6%9C%89%E8%A7%81%E8%BF%87%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 20 Jul 2017 17:16:32 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/java%E4%B8%AD%E6%B2%A1%E6%9C%89%E8%A7%81%E8%BF%87%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>interface &amp;amp; interface 在阅读Comparator源码时，无意间发现了如下这种用法： public static &amp;lt;T, U extends Comparable&amp;lt;? super U&amp;gt;&amp;gt; Comparator&amp;lt;T&amp;gt; comparing( Function&amp;lt;? super T, ? extends U&amp;gt; keyExtractor) { Objects.requireNonNull(keyExtractor); return (Comparator&amp;lt;T&amp;gt; &amp;amp; Serializable) (c1, c2) -&amp;gt; keyExtractor.apply(c1).compareTo(keyExtractor.apply(c2)); } 在这个方法中有 (Comparator&amp;lt;T&amp;gt; &amp;amp;</description>
    </item>
    
    <item>
      <title>mybatis</title>
      <link>https://wzhongke.github.io/post/java/mybatis/</link>
      <pubDate>Thu, 20 Jul 2017 16:05:42 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/mybatis/</guid>
      <description>MyBatis是什么 MyBatis是定制化SQL、存储过程以及高级映射的持久层框架。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，</description>
    </item>
    
    <item>
      <title>Lambda表达式和Stream</title>
      <link>https://wzhongke.github.io/post/java/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8Cstream/</link>
      <pubDate>Thu, 20 Jul 2017 12:14:12 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8Cstream/</guid>
      <description>流被设计为与lambda表达式一起使用，这使得日常编程更容易。 Lambda 表达式 匿名类的一个非常明显的问题是，如果匿名类的实现非常简单，例如只包含一个</description>
    </item>
    
    <item>
      <title>java线程池技术</title>
      <link>https://wzhongke.github.io/post/java/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 03 Jul 2017 19:01:11 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%8A%80%E6%9C%AF/</guid>
      <description>服务器在处理客户端请求时，经常面对的是客户端的任务简单，单一。如果针对每个任务，都创建一个线程执行，那么对于成千上万的客户端任务，服务器会创</description>
    </item>
    
    <item>
      <title>svg动画</title>
      <link>https://wzhongke.github.io/post/svg%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Sun, 02 Jul 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/svg%E5%8A%A8%E7%94%BB/</guid>
      <description>svg 字体动画 {% raw %} .center-btn-wrapper { width: 100%; top: 50%; text-align: center; font-size: 24px; } .center-btn-wrapper a { color: white; text-decoration: none; text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.42); background-color: #D87B00; padding: 12px 30px; border-radius: 5px; } .center-btn-wrapper a:hover { background-color: #14516F; } /* 手机适配 / @media screen and (max-width: 768px) { .center-btn-wrapper { font-size: 18px; } } / 暂时隐</description>
    </item>
    
    <item>
      <title>java 文件处理</title>
      <link>https://wzhongke.github.io/post/java/java-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 30 Jun 2017 11:41:43 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/java-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</guid>
      <description>Path Path 是java7中java.nio.file包中的类，它是一个抽象构造。创建和处理Path不会马上绑定到对应的物理位置，如果试图读取一个未创</description>
    </item>
    
    <item>
      <title>一些有价值的参考网站</title>
      <link>https://wzhongke.github.io/post/%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E5%8F%82%E8%80%83%E7%BD%91%E7%AB%99/</link>
      <pubDate>Fri, 30 Jun 2017 11:41:43 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E5%8F%82%E8%80%83%E7%BD%91%E7%AB%99/</guid>
      <description>nginx配置之location及rewrite 阿里巴巴java开发规约-IDEA插件</description>
    </item>
    
    <item>
      <title>缓存算法</title>
      <link>https://wzhongke.github.io/post/algorithms/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 30 Jun 2017 11:41:43 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/algorithms/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95/</guid>
      <description>众所周知，内存的读取速度比硬盘类存储设备快的多。为了降低硬件设备的负载，提高响应速度，增加吞吐率，我们可以将最近使用过，并且将来还要使用的数</description>
    </item>
    
    <item>
      <title>行为模式</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 30 Jun 2017 11:41:43 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/</guid>
      <description>行为模式设计到算法和对象间职责的分配，不仅描述对象或类的模式，还描述它们这间的通信模式。这些模式刻画了在运行时难以跟踪的复杂控制流。它们将你</description>
    </item>
    
    <item>
      <title>nginx配置双向认证 并通过java访问</title>
      <link>https://wzhongke.github.io/post/linux/nginx%E9%85%8D%E7%BD%AE%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81-%E5%B9%B6%E9%80%9A%E8%BF%87java%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Sun, 18 Jun 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/nginx%E9%85%8D%E7%BD%AE%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81-%E5%B9%B6%E9%80%9A%E8%BF%87java%E8%AE%BF%E9%97%AE/</guid>
      <description>最近项目开发中的接口要使用双向认证，因为搭建服务器的方式是nginx+resin，而java的keytool配置nginx的双向认证时，并不</description>
    </item>
    
    <item>
      <title>java修改字符串编码</title>
      <link>https://wzhongke.github.io/post/java/java%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</link>
      <pubDate>Sun, 18 Jun 2017 19:01:11 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/java%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</guid>
      <description>使用java处理接口返回数据时，经常会有编码转换的问题。 一开始以为如果将gbk编码的数据转换为utf8的数据，那么应该使用gbk编码获取数据</description>
    </item>
    
    <item>
      <title>HashMap 和 ConcurrentHashMap</title>
      <link>https://wzhongke.github.io/post/java/concurrenthashmap/</link>
      <pubDate>Sat, 17 Jun 2017 19:48:32 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/concurrenthashmap/</guid>
      <description>并发编程为什么使用ConcurrentHashMap HashMap并不是线程安全的，HashTable虽然是线程安全的，但是HashTabl</description>
    </item>
    
    <item>
      <title>apply和call</title>
      <link>https://wzhongke.github.io/post/front/apply%E5%92%8Ccall%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 17 Jun 2017 19:48:32 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/apply%E5%92%8Ccall%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>JavaScript中每个函数都包含两个非继承而来的方法：apply()和call(). apply()方法接收两个参数：运行调用函数的作用域</description>
    </item>
    
    <item>
      <title>hexo Hello World</title>
      <link>https://wzhongke.github.io/post/hello-world/</link>
      <pubDate>Sat, 17 Jun 2017 19:48:32 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/hello-world/</guid>
      <description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post $ hexo new &amp;quot;My New Post&amp;quot; More info: Writing Run server $ hexo server More info: Server Generate static files $ hexo generate More info: Generating Deploy to</description>
    </item>
    
    <item>
      <title>二叉树的分层遍历</title>
      <link>https://wzhongke.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%86%E5%B1%82%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 17 Jun 2017 19:48:32 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%86%E5%B1%82%E9%81%8D%E5%8E%86/</guid>
      <description>今天去面试的时候被问到二叉树的分层遍历，因为原来写Python脚本的时候自己用队列的方法写过一次 分层遍历。结果面试官说能不能用递归的方法，不</description>
    </item>
    
    <item>
      <title>javascript 常用技巧</title>
      <link>https://wzhongke.github.io/post/front/javascript-%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 17 Jun 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/javascript-%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>javascript在使用中有各种各样的技巧：提高执行效率，降低执行频率等。 Web Storage 的使用 Web Storage的目的是克服由cookie带来的一些限</description>
    </item>
    
    <item>
      <title>linux 常用命令</title>
      <link>https://wzhongke.github.io/post/linux/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 17 Jun 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>使用ubuntu的时候经常会把常用的一些命令忘掉或不知道有些参数的意思，又懒得看那枯燥的文档。因此记录下来备忘。 目录类 ls: 查看文件与目录 ls [-aAdfFhilnrRSt] 目</description>
    </item>
    
    <item>
      <title>markdown 语法</title>
      <link>https://wzhongke.github.io/post/markdown%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 17 Jun 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/markdown%E8%AF%AD%E6%B3%95/</guid>
      <description>斜体 *这是斜体1* _这是斜体2_ 这是斜体1 这是斜体2 粗体 **这是粗体** __这是粗体__ 这是粗体 这是粗体 带删除线 ~~删除线.~~ 删除线. 下划</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://wzhongke.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sat, 17 Jun 2017 19:42:25 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>元字符 元字符 说明 . 匹配除换行符以外的任意字符 \w 匹配字母或数字或下划线或汉字 \s 匹配任意的空白字符 \d 匹配数字 \b 匹配单词的开始或结束 ^ 匹配字符串的</description>
    </item>
    
    <item>
      <title>python3 安装protobuf模块</title>
      <link>https://wzhongke.github.io/post/python/python3-%E5%AE%89%E8%A3%85protobuf%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sat, 17 Jun 2017 19:02:10 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/python/python3-%E5%AE%89%E8%A3%85protobuf%E6%A8%A1%E5%9D%97/</guid>
      <description>python3 网上没有现成的protobuf模块可以直接使用，我在安装时费了一番周折，故此记录下来。 记录下自己安装python3-protobuf的过程</description>
    </item>
    
    <item>
      <title>vue 学习笔记</title>
      <link>https://wzhongke.github.io/post/front/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 21 Jan 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>属性和方法 每个vue实例都会代理其data对象的所有属性 var data = { a: 1 } var vm = new Vue({ data: data }) vm.a === data.a // -&amp;gt; true // setting the property also affects original data vm.a = 2 data.a // -&amp;gt; 2 // ... and vice-versa data.a =</description>
    </item>
    
    <item>
      <title>linux 忘记root密码</title>
      <link>https://wzhongke.github.io/post/linux/linux-%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81/</link>
      <pubDate>Mon, 03 Aug 2015 09:19:14 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/linux-%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81/</guid>
      <description>如果忘记了linux的root密码, 有两种比较通用的方式来修改 使用grub 重启系统 进入grub菜单： 在启动时，点击e进入详细设置；将光标移动</description>
    </item>
    
    <item>
      <title>java中override与overload的区别</title>
      <link>https://wzhongke.github.io/post/java/java%E4%B8%ADoverride%E4%B8%8Eoverload%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 23 Jul 2015 17:16:32 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/java%E4%B8%ADoverride%E4%B8%8Eoverload%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>override（重写，覆盖） 方法名、参数、返回值相同。 子类方法不能缩小父类方法的访问权限。 子类方法不能抛出比父类方法更多的异常(但子类方法</description>
    </item>
    
    <item>
      <title>linux下执行脚本出现报：syntax error: unexpected end of file</title>
      <link>https://wzhongke.github.io/post/linux/unexpected-end-of-file/</link>
      <pubDate>Thu, 23 Jul 2015 17:16:32 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/unexpected-end-of-file/</guid>
      <description>这是因为从Windows上拷贝过去的文件，会由于Windows与linux的回车和换行表示方法不一致导致的，可以通过执行dos2unix sh</description>
    </item>
    
    <item>
      <title>java中的先赋值再定义</title>
      <link>https://wzhongke.github.io/post/java/java%E4%B8%AD%E7%9A%84%E5%85%88%E8%B5%8B%E5%80%BC%E5%86%8D%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 02 Apr 2015 11:32:36 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/java%E4%B8%AD%E7%9A%84%E5%85%88%E8%B5%8B%E5%80%BC%E5%86%8D%E5%AE%9A%E4%B9%89/</guid>
      <description>如下代码 public class MyTest{ { value = 3; System.out.println(&amp;quot;函数块&amp;quot;); } MyTest(){ System.out.println(&amp;q</description>
    </item>
    
    <item>
      <title>Python 讨厌的MemoryError</title>
      <link>https://wzhongke.github.io/post/python/python-%E8%AE%A8%E5%8E%8C%E7%9A%84memoryerror/</link>
      <pubDate>Wed, 01 Apr 2015 15:41:43 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/python/python-%E8%AE%A8%E5%8E%8C%E7%9A%84memoryerror/</guid>
      <description>在用Python处理大数据时，本来16G的内存，内存还没使用四分之一就开始报MemoryError的错误，后来才知道32bit的Python</description>
    </item>
    
    <item>
      <title>pycurl https error: unable to get local issuer certificate </title>
      <link>https://wzhongke.github.io/post/python/pycurl-https-error-unable-to-get-local-issuer-certificate/</link>
      <pubDate>Sun, 28 Dec 2014 19:45:33 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/python/pycurl-https-error-unable-to-get-local-issuer-certificate/</guid>
      <description>在 pycurl 访问 https 链接时可能会报： pycurl.error: (60, &amp;lsquo;SSL certificate problem: unable to get local issuer certificate&amp;rsquo;) 错误 一个比较好的解决方法是： import pycurl import certifi curl = pycurl.Curl() curl.setopt(pycurl.CAINFO, certifi.where()) curl.setopt(pycurl.URL, &#39;https://www.quora.com&#39;) curl.perform()</description>
    </item>
    
    <item>
      <title>pycurl 快速开始指南</title>
      <link>https://wzhongke.github.io/post/python/pycurl-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 20 Dec 2014 11:37:28 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/python/pycurl-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%E6%8C%87%E5%8D%97/</guid>
      <description>获取网络资源 安装好PycURL之后，我们就可以执行一些网络操作了。最简单的是通过一个网站的URL获取它的相关资源。使用PycURL执行一个网</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wzhongke.github.io/post/_photoshop%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/_photoshop%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description> Ctrl+r: 显示标尺 Shift+Tab:隐藏/显示浮动面板   </description>
    </item>
    
    <item>
      <title>HTML 标签</title>
      <link>https://wzhongke.github.io/post/front/html%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/front/html%E6%A0%87%E7%AD%BE/</guid>
      <description>标签 &amp;lt;video&amp;gt;标签是HTML5的新标签，其属性如下： 属性 值 描述 autoplay autoplay 视频就绪后马上播放 controls controls 向用户展示控件，比如播放按钮等 height pixels 视</description>
    </item>
    
    <item>
      <title>Springboot2 &#43; Prometheus 监控</title>
      <link>https://wzhongke.github.io/post/java/springboot&#43;prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/springboot&#43;prometheus/</guid>
      <description>从 SpringBoot 2.0 开始，Micrometer 就成为默认的指标输出引擎。 Micrometer 是一种支持多种检测系统的应用，像 Atlas，Datadog, Prometheus 等等。 配置Spri</description>
    </item>
    
    <item>
      <title>docker</title>
      <link>https://wzhongke.github.io/post/linux/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/docker/</guid>
      <description>安装 windows 直接下载(安装包)[https://docs.docker.com/docker-for-windows/install/]安装 Linux 下安</description>
    </item>
    
    <item>
      <title>java 计算对象占用内存</title>
      <link>https://wzhongke.github.io/post/java/java-%E8%AE%A1%E7%AE%97%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/java-%E8%AE%A1%E7%AE%97%E5%86%85%E5%AD%98/</guid>
      <description>可以使用如下代码计算对象占用内存： import java.lang.instrument.Instrumentation; import java.lang.reflect.Array; import java.lang.reflect.Field; import java.lang.reflect.Modifier; import java.util.IdentityHashMap; import java.util.Map; import java.util.Stack; /** * 借助 Instrumentation 接口的 getObjectSize 方法计算对象占用空间 * 原来的 sizeOf 只能计算本对象占用空间， 无法计</description>
    </item>
    
    <item>
      <title>maven</title>
      <link>https://wzhongke.github.io/post/java/maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/maven/</guid>
      <description>maven执行命令： mvn clean install -Dmaven.test.skip=true</description>
    </item>
    
    <item>
      <title>spring</title>
      <link>https://wzhongke.github.io/post/java/spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/java/spring/</guid>
      <description>spring 模块 Core Container Core Container由 spring-core, spring-beans, spring-context, spring-context-support 和 spring-expression (Spring Expression Language)模块组成。 spring-core 和 spring-beans 模块提供了框架的基本功能——包括IoC和依赖注入。 BeanFactory 是一个</description>
    </item>
    
    <item>
      <title>webpackage</title>
      <link>https://wzhongke.github.io/post/webpackage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/webpackage/</guid>
      <description>文件中的缩进是2，修改idea的配置之后不生效，需要修改文件 .editorconfig 创建webpack vue init webpack # 或者 vue init gurghet/webpack npm install # 安装依赖 如果有 less 文件，需要安装 npm install --save-dev</description>
    </item>
    
    <item>
      <title>zookeeper 集群搭建</title>
      <link>https://wzhongke.github.io/post/linux/%E6%90%AD%E5%BB%BAzookeeper%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/linux/%E6%90%AD%E5%BB%BAzookeeper%E9%9B%86%E7%BE%A4/</guid>
      <description>安装 zookeeper 下载zookeeper，建议选择稳定版本： wget 将下载文件解压到 /usr/local/zookeeper 配置 zookeeper 集群 将 conf/zoo_sample.cfg 复制到 conf/zoo.cfg，并修改该文件： tickTime=2000 dataDir=/search/odin/zookeeper clientPort=2181 initLimit=5 syncLimit=2 server.1=10.134.96.237:2888:3888</description>
    </item>
    
    <item>
      <title>碰到过的问题</title>
      <link>https://wzhongke.github.io/post/%E7%A2%B0%E5%88%B0%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/%E7%A2%B0%E5%88%B0%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>有时候碰到问题，只知道自己以前解决过。如何解决的，却是一点也想不起来了。故在此记录下，碰到过的问题，以待后续会用到。 Java 在java中，对于读取</description>
    </item>
    
  </channel>
</rss>