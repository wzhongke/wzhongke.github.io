<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on World of Wang</title>
    <link>https://wzhongke.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on World of Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 04 Nov 2017 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wzhongke.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>创建型模式</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>创建型模式包括：Abstract Factory、Builder、Factory Method、Prototype、Singleton 创建型模式</description>
    </item>
    
    <item>
      <title>创建者模式之生成器</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>构建复杂对象的生成器 &amp;ndash; Builder 生成器模式适合于创建一个对象很复杂的时候。 意图 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表</description>
    </item>
    
    <item>
      <title>结构型模式</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>转换接口的适配器 &amp;ndash; Adapter 将一个类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>曾经多少次有过这种感觉：你已经解决过一个问题但就是不能确切知道不在什么地方或怎么解决的，如果你能记起以前问题的细节和怎么解决的，你就可以利用</description>
    </item>
    
    <item>
      <title>行为模式</title>
      <link>https://wzhongke.github.io/post/designpatterns/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 30 Jun 2017 11:41:43 +0000</pubDate>
      
      <guid>https://wzhongke.github.io/post/designpatterns/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/</guid>
      <description>行为模式设计到算法和对象间职责的分配，不仅描述对象或类的模式，还描述它们这间的通信模式。这些模式刻画了在运行时难以跟踪的复杂控制流。它们将你</description>
    </item>
    
  </channel>
</rss>